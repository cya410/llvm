/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Enum Values                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_ENUM
#undef GET_INSTRINFO_ENUM
namespace llvm {

namespace SP {
  enum {
    PHI	= 0,
    INLINEASM	= 1,
    CFI_INSTRUCTION	= 2,
    EH_LABEL	= 3,
    GC_LABEL	= 4,
    KILL	= 5,
    EXTRACT_SUBREG	= 6,
    INSERT_SUBREG	= 7,
    IMPLICIT_DEF	= 8,
    SUBREG_TO_REG	= 9,
    COPY_TO_REGCLASS	= 10,
    DBG_VALUE	= 11,
    REG_SEQUENCE	= 12,
    COPY	= 13,
    BUNDLE	= 14,
    LIFETIME_START	= 15,
    LIFETIME_END	= 16,
    STACKMAP	= 17,
    PATCHPOINT	= 18,
    LOAD_STACK_GUARD	= 19,
    STATEPOINT	= 20,
    FRAME_ALLOC	= 21,
    ADDCCri	= 22,
    ADDCCrr	= 23,
    ADDCri	= 24,
    ADDCrr	= 25,
    ADDEri	= 26,
    ADDErr	= 27,
    ADDXC	= 28,
    ADDXCCC	= 29,
    ADDXri	= 30,
    ADDXrr	= 31,
    ADDri	= 32,
    ADDrr	= 33,
    ADJCALLSTACKDOWN	= 34,
    ADJCALLSTACKUP	= 35,
    ALIGNADDR	= 36,
    ALIGNADDRL	= 37,
    ANDCCri	= 38,
    ANDCCrr	= 39,
    ANDNCCri	= 40,
    ANDNCCrr	= 41,
    ANDNri	= 42,
    ANDNrr	= 43,
    ANDXNrr	= 44,
    ANDXri	= 45,
    ANDXrr	= 46,
    ANDri	= 47,
    ANDrr	= 48,
    ARRAY16	= 49,
    ARRAY32	= 50,
    ARRAY8	= 51,
    ATOMIC_LOAD_ADD_32	= 52,
    ATOMIC_LOAD_ADD_64	= 53,
    ATOMIC_LOAD_AND_32	= 54,
    ATOMIC_LOAD_AND_64	= 55,
    ATOMIC_LOAD_MAX_32	= 56,
    ATOMIC_LOAD_MAX_64	= 57,
    ATOMIC_LOAD_MIN_32	= 58,
    ATOMIC_LOAD_MIN_64	= 59,
    ATOMIC_LOAD_NAND_32	= 60,
    ATOMIC_LOAD_NAND_64	= 61,
    ATOMIC_LOAD_OR_32	= 62,
    ATOMIC_LOAD_OR_64	= 63,
    ATOMIC_LOAD_SUB_32	= 64,
    ATOMIC_LOAD_SUB_64	= 65,
    ATOMIC_LOAD_UMAX_32	= 66,
    ATOMIC_LOAD_UMAX_64	= 67,
    ATOMIC_LOAD_UMIN_32	= 68,
    ATOMIC_LOAD_UMIN_64	= 69,
    ATOMIC_LOAD_XOR_32	= 70,
    ATOMIC_LOAD_XOR_64	= 71,
    ATOMIC_SWAP_64	= 72,
    BA	= 73,
    BCOND	= 74,
    BCONDA	= 75,
    BINDri	= 76,
    BINDrr	= 77,
    BMASK	= 78,
    BPFCC	= 79,
    BPFCCA	= 80,
    BPFCCANT	= 81,
    BPFCCNT	= 82,
    BPGEZapn	= 83,
    BPGEZapt	= 84,
    BPGEZnapn	= 85,
    BPGEZnapt	= 86,
    BPGZapn	= 87,
    BPGZapt	= 88,
    BPGZnapn	= 89,
    BPGZnapt	= 90,
    BPICC	= 91,
    BPICCA	= 92,
    BPICCANT	= 93,
    BPICCNT	= 94,
    BPLEZapn	= 95,
    BPLEZapt	= 96,
    BPLEZnapn	= 97,
    BPLEZnapt	= 98,
    BPLZapn	= 99,
    BPLZapt	= 100,
    BPLZnapn	= 101,
    BPLZnapt	= 102,
    BPNZapn	= 103,
    BPNZapt	= 104,
    BPNZnapn	= 105,
    BPNZnapt	= 106,
    BPXCC	= 107,
    BPXCCA	= 108,
    BPXCCANT	= 109,
    BPXCCNT	= 110,
    BPZapn	= 111,
    BPZapt	= 112,
    BPZnapn	= 113,
    BPZnapt	= 114,
    BSHUFFLE	= 115,
    CALL	= 116,
    CALLri	= 117,
    CALLrr	= 118,
    CASXrr	= 119,
    CASrr	= 120,
    CMASK16	= 121,
    CMASK32	= 122,
    CMASK8	= 123,
    CMPri	= 124,
    CMPrr	= 125,
    EDGE16	= 126,
    EDGE16L	= 127,
    EDGE16LN	= 128,
    EDGE16N	= 129,
    EDGE32	= 130,
    EDGE32L	= 131,
    EDGE32LN	= 132,
    EDGE32N	= 133,
    EDGE8	= 134,
    EDGE8L	= 135,
    EDGE8LN	= 136,
    EDGE8N	= 137,
    FABSD	= 138,
    FABSQ	= 139,
    FABSS	= 140,
    FADDD	= 141,
    FADDQ	= 142,
    FADDS	= 143,
    FALIGNADATA	= 144,
    FAND	= 145,
    FANDNOT1	= 146,
    FANDNOT1S	= 147,
    FANDNOT2	= 148,
    FANDNOT2S	= 149,
    FANDS	= 150,
    FBCOND	= 151,
    FBCONDA	= 152,
    FCHKSM16	= 153,
    FCMPD	= 154,
    FCMPEQ16	= 155,
    FCMPEQ32	= 156,
    FCMPGT16	= 157,
    FCMPGT32	= 158,
    FCMPLE16	= 159,
    FCMPLE32	= 160,
    FCMPNE16	= 161,
    FCMPNE32	= 162,
    FCMPQ	= 163,
    FCMPS	= 164,
    FDIVD	= 165,
    FDIVQ	= 166,
    FDIVS	= 167,
    FDMULQ	= 168,
    FDTOI	= 169,
    FDTOQ	= 170,
    FDTOS	= 171,
    FDTOX	= 172,
    FEXPAND	= 173,
    FHADDD	= 174,
    FHADDS	= 175,
    FHSUBD	= 176,
    FHSUBS	= 177,
    FITOD	= 178,
    FITOQ	= 179,
    FITOS	= 180,
    FLCMPD	= 181,
    FLCMPS	= 182,
    FLUSHW	= 183,
    FMEAN16	= 184,
    FMOVD	= 185,
    FMOVD_FCC	= 186,
    FMOVD_ICC	= 187,
    FMOVD_XCC	= 188,
    FMOVQ	= 189,
    FMOVQ_FCC	= 190,
    FMOVQ_ICC	= 191,
    FMOVQ_XCC	= 192,
    FMOVRGEZD	= 193,
    FMOVRGEZQ	= 194,
    FMOVRGEZS	= 195,
    FMOVRGZD	= 196,
    FMOVRGZQ	= 197,
    FMOVRGZS	= 198,
    FMOVRLEZD	= 199,
    FMOVRLEZQ	= 200,
    FMOVRLEZS	= 201,
    FMOVRLZD	= 202,
    FMOVRLZQ	= 203,
    FMOVRLZS	= 204,
    FMOVRNZD	= 205,
    FMOVRNZQ	= 206,
    FMOVRNZS	= 207,
    FMOVRZD	= 208,
    FMOVRZQ	= 209,
    FMOVRZS	= 210,
    FMOVS	= 211,
    FMOVS_FCC	= 212,
    FMOVS_ICC	= 213,
    FMOVS_XCC	= 214,
    FMUL8SUX16	= 215,
    FMUL8ULX16	= 216,
    FMUL8X16	= 217,
    FMUL8X16AL	= 218,
    FMUL8X16AU	= 219,
    FMULD	= 220,
    FMULD8SUX16	= 221,
    FMULD8ULX16	= 222,
    FMULQ	= 223,
    FMULS	= 224,
    FNADDD	= 225,
    FNADDS	= 226,
    FNAND	= 227,
    FNANDS	= 228,
    FNEGD	= 229,
    FNEGQ	= 230,
    FNEGS	= 231,
    FNHADDD	= 232,
    FNHADDS	= 233,
    FNMULD	= 234,
    FNMULS	= 235,
    FNOR	= 236,
    FNORS	= 237,
    FNOT1	= 238,
    FNOT1S	= 239,
    FNOT2	= 240,
    FNOT2S	= 241,
    FNSMULD	= 242,
    FONE	= 243,
    FONES	= 244,
    FOR	= 245,
    FORNOT1	= 246,
    FORNOT1S	= 247,
    FORNOT2	= 248,
    FORNOT2S	= 249,
    FORS	= 250,
    FPACK16	= 251,
    FPACK32	= 252,
    FPACKFIX	= 253,
    FPADD16	= 254,
    FPADD16S	= 255,
    FPADD32	= 256,
    FPADD32S	= 257,
    FPADD64	= 258,
    FPMERGE	= 259,
    FPSUB16	= 260,
    FPSUB16S	= 261,
    FPSUB32	= 262,
    FPSUB32S	= 263,
    FQTOD	= 264,
    FQTOI	= 265,
    FQTOS	= 266,
    FQTOX	= 267,
    FSLAS16	= 268,
    FSLAS32	= 269,
    FSLL16	= 270,
    FSLL32	= 271,
    FSMULD	= 272,
    FSQRTD	= 273,
    FSQRTQ	= 274,
    FSQRTS	= 275,
    FSRA16	= 276,
    FSRA32	= 277,
    FSRC1	= 278,
    FSRC1S	= 279,
    FSRC2	= 280,
    FSRC2S	= 281,
    FSRL16	= 282,
    FSRL32	= 283,
    FSTOD	= 284,
    FSTOI	= 285,
    FSTOQ	= 286,
    FSTOX	= 287,
    FSUBD	= 288,
    FSUBQ	= 289,
    FSUBS	= 290,
    FXNOR	= 291,
    FXNORS	= 292,
    FXOR	= 293,
    FXORS	= 294,
    FXTOD	= 295,
    FXTOQ	= 296,
    FXTOS	= 297,
    FZERO	= 298,
    FZEROS	= 299,
    GETPCX	= 300,
    JMPLri	= 301,
    JMPLrr	= 302,
    LDDFri	= 303,
    LDDFrr	= 304,
    LDFri	= 305,
    LDFrr	= 306,
    LDQFri	= 307,
    LDQFrr	= 308,
    LDSBri	= 309,
    LDSBrr	= 310,
    LDSHri	= 311,
    LDSHrr	= 312,
    LDSWri	= 313,
    LDSWrr	= 314,
    LDUBri	= 315,
    LDUBrr	= 316,
    LDUHri	= 317,
    LDUHrr	= 318,
    LDXri	= 319,
    LDXrr	= 320,
    LDri	= 321,
    LDrr	= 322,
    LEAX_ADDri	= 323,
    LEA_ADDri	= 324,
    LZCNT	= 325,
    MEMBARi	= 326,
    MOVDTOX	= 327,
    MOVFCCri	= 328,
    MOVFCCrr	= 329,
    MOVICCri	= 330,
    MOVICCrr	= 331,
    MOVRGEZri	= 332,
    MOVRGEZrr	= 333,
    MOVRGZri	= 334,
    MOVRGZrr	= 335,
    MOVRLEZri	= 336,
    MOVRLEZrr	= 337,
    MOVRLZri	= 338,
    MOVRLZrr	= 339,
    MOVRNZri	= 340,
    MOVRNZrr	= 341,
    MOVRRZri	= 342,
    MOVRRZrr	= 343,
    MOVSTOSW	= 344,
    MOVSTOUW	= 345,
    MOVWTOS	= 346,
    MOVXCCri	= 347,
    MOVXCCrr	= 348,
    MOVXTOD	= 349,
    MULXri	= 350,
    MULXrr	= 351,
    NOP	= 352,
    ORCCri	= 353,
    ORCCrr	= 354,
    ORNCCri	= 355,
    ORNCCrr	= 356,
    ORNri	= 357,
    ORNrr	= 358,
    ORXNrr	= 359,
    ORXri	= 360,
    ORXrr	= 361,
    ORri	= 362,
    ORrr	= 363,
    PDIST	= 364,
    PDISTN	= 365,
    POPCrr	= 366,
    RDY	= 367,
    RESTOREri	= 368,
    RESTORErr	= 369,
    RET	= 370,
    RETL	= 371,
    RETTri	= 372,
    RETTrr	= 373,
    SAVEri	= 374,
    SAVErr	= 375,
    SDIVCCri	= 376,
    SDIVCCrr	= 377,
    SDIVXri	= 378,
    SDIVXrr	= 379,
    SDIVri	= 380,
    SDIVrr	= 381,
    SELECT_CC_DFP_FCC	= 382,
    SELECT_CC_DFP_ICC	= 383,
    SELECT_CC_FP_FCC	= 384,
    SELECT_CC_FP_ICC	= 385,
    SELECT_CC_Int_FCC	= 386,
    SELECT_CC_Int_ICC	= 387,
    SELECT_CC_QFP_FCC	= 388,
    SELECT_CC_QFP_ICC	= 389,
    SETHIXi	= 390,
    SETHIi	= 391,
    SHUTDOWN	= 392,
    SIAM	= 393,
    SLLXri	= 394,
    SLLXrr	= 395,
    SLLri	= 396,
    SLLrr	= 397,
    SMULCCri	= 398,
    SMULCCrr	= 399,
    SMULri	= 400,
    SMULrr	= 401,
    SRAXri	= 402,
    SRAXrr	= 403,
    SRAri	= 404,
    SRArr	= 405,
    SRLXri	= 406,
    SRLXrr	= 407,
    SRLri	= 408,
    SRLrr	= 409,
    STBAR	= 410,
    STBri	= 411,
    STBrr	= 412,
    STDFri	= 413,
    STDFrr	= 414,
    STFri	= 415,
    STFrr	= 416,
    STHri	= 417,
    STHrr	= 418,
    STQFri	= 419,
    STQFrr	= 420,
    STXri	= 421,
    STXrr	= 422,
    STri	= 423,
    STrr	= 424,
    SUBCCri	= 425,
    SUBCCrr	= 426,
    SUBCri	= 427,
    SUBCrr	= 428,
    SUBEri	= 429,
    SUBErr	= 430,
    SUBXri	= 431,
    SUBXrr	= 432,
    SUBri	= 433,
    SUBrr	= 434,
    SWAPri	= 435,
    SWAPrr	= 436,
    TA3	= 437,
    TA5	= 438,
    TADDCCTVri	= 439,
    TADDCCTVrr	= 440,
    TADDCCri	= 441,
    TADDCCrr	= 442,
    TICCri	= 443,
    TICCrr	= 444,
    TLS_ADDXrr	= 445,
    TLS_ADDrr	= 446,
    TLS_CALL	= 447,
    TLS_LDXrr	= 448,
    TLS_LDrr	= 449,
    TSUBCCTVri	= 450,
    TSUBCCTVrr	= 451,
    TSUBCCri	= 452,
    TSUBCCrr	= 453,
    TXCCri	= 454,
    TXCCrr	= 455,
    UDIVCCri	= 456,
    UDIVCCrr	= 457,
    UDIVXri	= 458,
    UDIVXrr	= 459,
    UDIVri	= 460,
    UDIVrr	= 461,
    UMULCCri	= 462,
    UMULCCrr	= 463,
    UMULXHI	= 464,
    UMULri	= 465,
    UMULrr	= 466,
    UNIMP	= 467,
    V9FCMPD	= 468,
    V9FCMPED	= 469,
    V9FCMPEQ	= 470,
    V9FCMPES	= 471,
    V9FCMPQ	= 472,
    V9FCMPS	= 473,
    V9FMOVD_FCC	= 474,
    V9FMOVQ_FCC	= 475,
    V9FMOVS_FCC	= 476,
    V9MOVFCCri	= 477,
    V9MOVFCCrr	= 478,
    WRYri	= 479,
    WRYrr	= 480,
    XMULX	= 481,
    XMULXHI	= 482,
    XNORCCri	= 483,
    XNORCCrr	= 484,
    XNORXrr	= 485,
    XNORri	= 486,
    XNORrr	= 487,
    XORCCri	= 488,
    XORCCrr	= 489,
    XORXri	= 490,
    XORXrr	= 491,
    XORri	= 492,
    XORrr	= 493,
    INSTRUCTION_LIST_END = 494
  };

namespace Sched {
  enum {
    NoInstrModel	= 0,
    SCHED_LIST_END = 1
  };
} // End Sched namespace
} // End SP namespace
} // End llvm namespace 
#endif // GET_INSTRINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Descriptors                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_MC_DESC
#undef GET_INSTRINFO_MC_DESC
namespace llvm {

static const uint16_t ImplicitList1[] = { SP::ICC, 0 };
static const uint16_t ImplicitList2[] = { SP::O6, 0 };
static const uint16_t ImplicitList3[] = { SP::FCC0, 0 };
static const uint16_t ImplicitList4[] = { SP::O7, 0 };
static const uint16_t ImplicitList5[] = { SP::Y, 0 };
static const uint16_t ImplicitList6[] = { SP::Y, SP::ICC, 0 };

static const MCOperandInfo OperandInfo2[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo3[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo4[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo5[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo6[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo7[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo8[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo9[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo10[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo11[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo12[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo13[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo14[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo15[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo16[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo17[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo18[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo19[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo20[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { SP::FCCRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo21[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo22[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo23[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo24[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo25[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo26[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo27[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo28[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo29[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo30[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo31[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo32[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo33[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo34[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo35[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo36[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo37[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo38[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo39[] = { { SP::FCCRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo40[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo41[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo42[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo43[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo44[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo45[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo46[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo47[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo48[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo49[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo50[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo51[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo52[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo53[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo54[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo55[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo56[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo57[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo58[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo59[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo60[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo61[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo62[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo63[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo64[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo65[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo66[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo67[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo68[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo69[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo70[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo71[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo72[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo73[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo74[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo75[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo76[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo77[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo78[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo79[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo80[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo81[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo82[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo83[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo84[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo85[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo86[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo87[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo88[] = { { SP::FCCRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo89[] = { { SP::FCCRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo90[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FCCRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo91[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FCCRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo92[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FCCRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo93[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FCCRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo94[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FCCRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };

extern const MCInstrDesc SparcInsts[] = {
  { 0,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #0 = PHI
  { 1,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #1 = INLINEASM
  { 2,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #2 = CFI_INSTRUCTION
  { 3,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #3 = EH_LABEL
  { 4,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #4 = GC_LABEL
  { 5,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #5 = KILL
  { 6,	3,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo3,0,nullptr },  // Inst #6 = EXTRACT_SUBREG
  { 7,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo4,0,nullptr },  // Inst #7 = INSERT_SUBREG
  { 8,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #8 = IMPLICIT_DEF
  { 9,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo6,0,nullptr },  // Inst #9 = SUBREG_TO_REG
  { 10,	3,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo3,0,nullptr },  // Inst #10 = COPY_TO_REGCLASS
  { 11,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #11 = DBG_VALUE
  { 12,	2,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo7,0,nullptr },  // Inst #12 = REG_SEQUENCE
  { 13,	2,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo7,0,nullptr },  // Inst #13 = COPY
  { 14,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #14 = BUNDLE
  { 15,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #15 = LIFETIME_START
  { 16,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #16 = LIFETIME_END
  { 17,	2,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Call)|(1<<MCID::MayLoad)|(1<<MCID::UsesCustomInserter)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo8,0,nullptr },  // Inst #17 = STACKMAP
  { 18,	6,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Call)|(1<<MCID::MayLoad)|(1<<MCID::UsesCustomInserter)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo9,0,nullptr },  // Inst #18 = PATCHPOINT
  { 19,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::Rematerializable), 0x0ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #19 = LOAD_STACK_GUARD
  { 20,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Call)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #20 = STATEPOINT
  { 21,	2,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #21 = FRAME_ALLOC
  { 22,	3,	1,	0,	4,	0, 0x0ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #22 = ADDCCri
  { 23,	3,	1,	0,	4,	0, 0x0ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #23 = ADDCCrr
  { 24,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, nullptr, OperandInfo12,0,nullptr },  // Inst #24 = ADDCri
  { 25,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, nullptr, OperandInfo13,0,nullptr },  // Inst #25 = ADDCrr
  { 26,	3,	1,	0,	4,	0, 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #26 = ADDEri
  { 27,	3,	1,	0,	4,	0, 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #27 = ADDErr
  { 28,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, nullptr, OperandInfo14,0,nullptr },  // Inst #28 = ADDXC
  { 29,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #29 = ADDXCCC
  { 30,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #30 = ADDXri
  { 31,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #31 = ADDXrr
  { 32,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #32 = ADDri
  { 33,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #33 = ADDrr
  { 34,	1,	0,	0,	4,	0|(1<<MCID::Pseudo), 0x0ULL, ImplicitList2, ImplicitList2, OperandInfo2,0,nullptr },  // Inst #34 = ADJCALLSTACKDOWN
  { 35,	2,	0,	0,	4,	0|(1<<MCID::Pseudo), 0x0ULL, ImplicitList2, ImplicitList2, OperandInfo8,0,nullptr },  // Inst #35 = ADJCALLSTACKUP
  { 36,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #36 = ALIGNADDR
  { 37,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #37 = ALIGNADDRL
  { 38,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #38 = ANDCCri
  { 39,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #39 = ANDCCrr
  { 40,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #40 = ANDNCCri
  { 41,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #41 = ANDNCCrr
  { 42,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #42 = ANDNri
  { 43,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #43 = ANDNrr
  { 44,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #44 = ANDXNrr
  { 45,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #45 = ANDXri
  { 46,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #46 = ANDXrr
  { 47,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #47 = ANDri
  { 48,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #48 = ANDrr
  { 49,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #49 = ARRAY16
  { 50,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #50 = ARRAY32
  { 51,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #51 = ARRAY8
  { 52,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo16,0,nullptr },  // Inst #52 = ATOMIC_LOAD_ADD_32
  { 53,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #53 = ATOMIC_LOAD_ADD_64
  { 54,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo16,0,nullptr },  // Inst #54 = ATOMIC_LOAD_AND_32
  { 55,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #55 = ATOMIC_LOAD_AND_64
  { 56,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo16,0,nullptr },  // Inst #56 = ATOMIC_LOAD_MAX_32
  { 57,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #57 = ATOMIC_LOAD_MAX_64
  { 58,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo16,0,nullptr },  // Inst #58 = ATOMIC_LOAD_MIN_32
  { 59,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #59 = ATOMIC_LOAD_MIN_64
  { 60,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo16,0,nullptr },  // Inst #60 = ATOMIC_LOAD_NAND_32
  { 61,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #61 = ATOMIC_LOAD_NAND_64
  { 62,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo16,0,nullptr },  // Inst #62 = ATOMIC_LOAD_OR_32
  { 63,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #63 = ATOMIC_LOAD_OR_64
  { 64,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo16,0,nullptr },  // Inst #64 = ATOMIC_LOAD_SUB_32
  { 65,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #65 = ATOMIC_LOAD_SUB_64
  { 66,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo16,0,nullptr },  // Inst #66 = ATOMIC_LOAD_UMAX_32
  { 67,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #67 = ATOMIC_LOAD_UMAX_64
  { 68,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo16,0,nullptr },  // Inst #68 = ATOMIC_LOAD_UMIN_32
  { 69,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #69 = ATOMIC_LOAD_UMIN_64
  { 70,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo16,0,nullptr },  // Inst #70 = ATOMIC_LOAD_XOR_32
  { 71,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #71 = ATOMIC_LOAD_XOR_64
  { 72,	3,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #72 = ATOMIC_SWAP_64
  { 73,	1,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #73 = BA
  { 74,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, ImplicitList1, nullptr, OperandInfo7,0,nullptr },  // Inst #74 = BCOND
  { 75,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, nullptr, OperandInfo7,0,nullptr },  // Inst #75 = BCONDA
  { 76,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #76 = BINDri
  { 77,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, nullptr, nullptr, OperandInfo19,0,nullptr },  // Inst #77 = BINDrr
  { 78,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #78 = BMASK
  { 79,	3,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #79 = BPFCC
  { 80,	3,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #80 = BPFCCA
  { 81,	3,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #81 = BPFCCANT
  { 82,	3,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #82 = BPFCCNT
  { 83,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #83 = BPGEZapn
  { 84,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #84 = BPGEZapt
  { 85,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #85 = BPGEZnapn
  { 86,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #86 = BPGEZnapt
  { 87,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #87 = BPGZapn
  { 88,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #88 = BPGZapt
  { 89,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #89 = BPGZnapn
  { 90,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #90 = BPGZnapt
  { 91,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, nullptr, OperandInfo7,0,nullptr },  // Inst #91 = BPICC
  { 92,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, nullptr, OperandInfo7,0,nullptr },  // Inst #92 = BPICCA
  { 93,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, nullptr, OperandInfo7,0,nullptr },  // Inst #93 = BPICCANT
  { 94,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, nullptr, OperandInfo7,0,nullptr },  // Inst #94 = BPICCNT
  { 95,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #95 = BPLEZapn
  { 96,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #96 = BPLEZapt
  { 97,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #97 = BPLEZnapn
  { 98,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #98 = BPLEZnapt
  { 99,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #99 = BPLZapn
  { 100,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #100 = BPLZapt
  { 101,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #101 = BPLZnapn
  { 102,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #102 = BPLZnapt
  { 103,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #103 = BPNZapn
  { 104,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #104 = BPNZapt
  { 105,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #105 = BPNZnapn
  { 106,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #106 = BPNZnapt
  { 107,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, ImplicitList1, nullptr, OperandInfo7,0,nullptr },  // Inst #107 = BPXCC
  { 108,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, nullptr, OperandInfo7,0,nullptr },  // Inst #108 = BPXCCA
  { 109,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, nullptr, OperandInfo7,0,nullptr },  // Inst #109 = BPXCCANT
  { 110,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, nullptr, OperandInfo7,0,nullptr },  // Inst #110 = BPXCCNT
  { 111,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #111 = BPZapn
  { 112,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #112 = BPZapt
  { 113,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #113 = BPZnapn
  { 114,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #114 = BPZnapt
  { 115,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #115 = BSHUFFLE
  { 116,	1,	0,	0,	4,	0|(1<<MCID::DelaySlot)|(1<<MCID::Call)|(1<<MCID::Variadic), 0x0ULL, ImplicitList2, nullptr, OperandInfo5,0,nullptr },  // Inst #116 = CALL
  { 117,	2,	0,	0,	4,	0|(1<<MCID::DelaySlot)|(1<<MCID::Call)|(1<<MCID::Variadic), 0x0ULL, ImplicitList2, nullptr, OperandInfo18,0,nullptr },  // Inst #117 = CALLri
  { 118,	2,	0,	0,	4,	0|(1<<MCID::DelaySlot)|(1<<MCID::Call)|(1<<MCID::Variadic), 0x0ULL, ImplicitList2, nullptr, OperandInfo19,0,nullptr },  // Inst #118 = CALLrr
  { 119,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo23,0,nullptr },  // Inst #119 = CASXrr
  { 120,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo24,0,nullptr },  // Inst #120 = CASrr
  { 121,	1,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo25,0,nullptr },  // Inst #121 = CMASK16
  { 122,	1,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo25,0,nullptr },  // Inst #122 = CMASK32
  { 123,	1,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo25,0,nullptr },  // Inst #123 = CMASK8
  { 124,	2,	0,	0,	4,	0, 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #124 = CMPri
  { 125,	2,	0,	0,	4,	0, 0x0ULL, nullptr, ImplicitList1, OperandInfo27,0,nullptr },  // Inst #125 = CMPrr
  { 126,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #126 = EDGE16
  { 127,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #127 = EDGE16L
  { 128,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #128 = EDGE16LN
  { 129,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #129 = EDGE16N
  { 130,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #130 = EDGE32
  { 131,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #131 = EDGE32L
  { 132,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #132 = EDGE32LN
  { 133,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #133 = EDGE32N
  { 134,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #134 = EDGE8
  { 135,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #135 = EDGE8L
  { 136,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #136 = EDGE8LN
  { 137,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #137 = EDGE8N
  { 138,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #138 = FABSD
  { 139,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #139 = FABSQ
  { 140,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #140 = FABSS
  { 141,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #141 = FADDD
  { 142,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #142 = FADDQ
  { 143,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #143 = FADDS
  { 144,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #144 = FALIGNADATA
  { 145,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #145 = FAND
  { 146,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #146 = FANDNOT1
  { 147,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #147 = FANDNOT1S
  { 148,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #148 = FANDNOT2
  { 149,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #149 = FANDNOT2S
  { 150,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #150 = FANDS
  { 151,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, ImplicitList3, nullptr, OperandInfo7,0,nullptr },  // Inst #151 = FBCOND
  { 152,	2,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList3, nullptr, OperandInfo7,0,nullptr },  // Inst #152 = FBCONDA
  { 153,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #153 = FCHKSM16
  { 154,	2,	0,	0,	4,	0, 0x0ULL, nullptr, ImplicitList3, OperandInfo28,0,nullptr },  // Inst #154 = FCMPD
  { 155,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #155 = FCMPEQ16
  { 156,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #156 = FCMPEQ32
  { 157,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #157 = FCMPGT16
  { 158,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #158 = FCMPGT32
  { 159,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #159 = FCMPLE16
  { 160,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #160 = FCMPLE32
  { 161,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #161 = FCMPNE16
  { 162,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #162 = FCMPNE32
  { 163,	2,	0,	0,	4,	0, 0x0ULL, nullptr, ImplicitList3, OperandInfo29,0,nullptr },  // Inst #163 = FCMPQ
  { 164,	2,	0,	0,	4,	0, 0x0ULL, nullptr, ImplicitList3, OperandInfo30,0,nullptr },  // Inst #164 = FCMPS
  { 165,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #165 = FDIVD
  { 166,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #166 = FDIVQ
  { 167,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #167 = FDIVS
  { 168,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #168 = FDMULQ
  { 169,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #169 = FDTOI
  { 170,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo36,0,nullptr },  // Inst #170 = FDTOQ
  { 171,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #171 = FDTOS
  { 172,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #172 = FDTOX
  { 173,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #173 = FEXPAND
  { 174,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #174 = FHADDD
  { 175,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #175 = FHADDS
  { 176,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #176 = FHSUBD
  { 177,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #177 = FHSUBS
  { 178,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo37,0,nullptr },  // Inst #178 = FITOD
  { 179,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo38,0,nullptr },  // Inst #179 = FITOQ
  { 180,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #180 = FITOS
  { 181,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo39,0,nullptr },  // Inst #181 = FLCMPD
  { 182,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo39,0,nullptr },  // Inst #182 = FLCMPS
  { 183,	0,	0,	0,	4,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #183 = FLUSHW
  { 184,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #184 = FMEAN16
  { 185,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #185 = FMOVD
  { 186,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList3, nullptr, OperandInfo40,0,nullptr },  // Inst #186 = FMOVD_FCC
  { 187,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList1, nullptr, OperandInfo40,0,nullptr },  // Inst #187 = FMOVD_ICC
  { 188,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList1, nullptr, OperandInfo40,0,nullptr },  // Inst #188 = FMOVD_XCC
  { 189,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #189 = FMOVQ
  { 190,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList3, nullptr, OperandInfo41,0,nullptr },  // Inst #190 = FMOVQ_FCC
  { 191,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList1, nullptr, OperandInfo41,0,nullptr },  // Inst #191 = FMOVQ_ICC
  { 192,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList1, nullptr, OperandInfo41,0,nullptr },  // Inst #192 = FMOVQ_XCC
  { 193,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,0,nullptr },  // Inst #193 = FMOVRGEZD
  { 194,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,0,nullptr },  // Inst #194 = FMOVRGEZQ
  { 195,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,0,nullptr },  // Inst #195 = FMOVRGEZS
  { 196,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,0,nullptr },  // Inst #196 = FMOVRGZD
  { 197,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,0,nullptr },  // Inst #197 = FMOVRGZQ
  { 198,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,0,nullptr },  // Inst #198 = FMOVRGZS
  { 199,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,0,nullptr },  // Inst #199 = FMOVRLEZD
  { 200,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,0,nullptr },  // Inst #200 = FMOVRLEZQ
  { 201,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,0,nullptr },  // Inst #201 = FMOVRLEZS
  { 202,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,0,nullptr },  // Inst #202 = FMOVRLZD
  { 203,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,0,nullptr },  // Inst #203 = FMOVRLZQ
  { 204,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,0,nullptr },  // Inst #204 = FMOVRLZS
  { 205,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,0,nullptr },  // Inst #205 = FMOVRNZD
  { 206,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,0,nullptr },  // Inst #206 = FMOVRNZQ
  { 207,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,0,nullptr },  // Inst #207 = FMOVRNZS
  { 208,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,0,nullptr },  // Inst #208 = FMOVRZD
  { 209,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,0,nullptr },  // Inst #209 = FMOVRZQ
  { 210,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,0,nullptr },  // Inst #210 = FMOVRZS
  { 211,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #211 = FMOVS
  { 212,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList3, nullptr, OperandInfo43,0,nullptr },  // Inst #212 = FMOVS_FCC
  { 213,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList1, nullptr, OperandInfo43,0,nullptr },  // Inst #213 = FMOVS_ICC
  { 214,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList1, nullptr, OperandInfo43,0,nullptr },  // Inst #214 = FMOVS_XCC
  { 215,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #215 = FMUL8SUX16
  { 216,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #216 = FMUL8ULX16
  { 217,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #217 = FMUL8X16
  { 218,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #218 = FMUL8X16AL
  { 219,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #219 = FMUL8X16AU
  { 220,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #220 = FMULD
  { 221,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #221 = FMULD8SUX16
  { 222,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #222 = FMULD8ULX16
  { 223,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #223 = FMULQ
  { 224,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #224 = FMULS
  { 225,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #225 = FNADDD
  { 226,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #226 = FNADDS
  { 227,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #227 = FNAND
  { 228,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #228 = FNANDS
  { 229,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #229 = FNEGD
  { 230,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #230 = FNEGQ
  { 231,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #231 = FNEGS
  { 232,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #232 = FNHADDD
  { 233,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #233 = FNHADDS
  { 234,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #234 = FNMULD
  { 235,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #235 = FNMULS
  { 236,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #236 = FNOR
  { 237,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #237 = FNORS
  { 238,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #238 = FNOT1
  { 239,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #239 = FNOT1S
  { 240,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #240 = FNOT2
  { 241,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #241 = FNOT2S
  { 242,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #242 = FNSMULD
  { 243,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #243 = FONE
  { 244,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #244 = FONES
  { 245,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #245 = FOR
  { 246,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #246 = FORNOT1
  { 247,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #247 = FORNOT1S
  { 248,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #248 = FORNOT2
  { 249,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #249 = FORNOT2S
  { 250,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #250 = FORS
  { 251,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #251 = FPACK16
  { 252,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #252 = FPACK32
  { 253,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #253 = FPACKFIX
  { 254,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #254 = FPADD16
  { 255,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #255 = FPADD16S
  { 256,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #256 = FPADD32
  { 257,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #257 = FPADD32S
  { 258,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #258 = FPADD64
  { 259,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #259 = FPMERGE
  { 260,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #260 = FPSUB16
  { 261,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #261 = FPSUB16S
  { 262,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #262 = FPSUB32
  { 263,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #263 = FPSUB32S
  { 264,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #264 = FQTOD
  { 265,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo47,0,nullptr },  // Inst #265 = FQTOI
  { 266,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo47,0,nullptr },  // Inst #266 = FQTOS
  { 267,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #267 = FQTOX
  { 268,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #268 = FSLAS16
  { 269,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #269 = FSLAS32
  { 270,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #270 = FSLL16
  { 271,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #271 = FSLL32
  { 272,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo48,0,nullptr },  // Inst #272 = FSMULD
  { 273,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #273 = FSQRTD
  { 274,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #274 = FSQRTQ
  { 275,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #275 = FSQRTS
  { 276,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #276 = FSRA16
  { 277,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #277 = FSRA32
  { 278,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #278 = FSRC1
  { 279,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #279 = FSRC1S
  { 280,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #280 = FSRC2
  { 281,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #281 = FSRC2S
  { 282,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #282 = FSRL16
  { 283,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #283 = FSRL32
  { 284,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo37,0,nullptr },  // Inst #284 = FSTOD
  { 285,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #285 = FSTOI
  { 286,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo38,0,nullptr },  // Inst #286 = FSTOQ
  { 287,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo37,0,nullptr },  // Inst #287 = FSTOX
  { 288,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #288 = FSUBD
  { 289,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #289 = FSUBQ
  { 290,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #290 = FSUBS
  { 291,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #291 = FXNOR
  { 292,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #292 = FXNORS
  { 293,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #293 = FXOR
  { 294,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #294 = FXORS
  { 295,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #295 = FXTOD
  { 296,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo36,0,nullptr },  // Inst #296 = FXTOQ
  { 297,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #297 = FXTOS
  { 298,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #298 = FZERO
  { 299,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #299 = FZEROS
  { 300,	1,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList4, OperandInfo5,0,nullptr },  // Inst #300 = GETPCX
  { 301,	3,	1,	0,	4,	0|(1<<MCID::Barrier)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo49,0,nullptr },  // Inst #301 = JMPLri
  { 302,	3,	1,	0,	4,	0|(1<<MCID::Barrier)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo50,0,nullptr },  // Inst #302 = JMPLrr
  { 303,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo51,0,nullptr },  // Inst #303 = LDDFri
  { 304,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo52,0,nullptr },  // Inst #304 = LDDFrr
  { 305,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo53,0,nullptr },  // Inst #305 = LDFri
  { 306,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo54,0,nullptr },  // Inst #306 = LDFrr
  { 307,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo55,0,nullptr },  // Inst #307 = LDQFri
  { 308,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #308 = LDQFrr
  { 309,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo49,0,nullptr },  // Inst #309 = LDSBri
  { 310,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo50,0,nullptr },  // Inst #310 = LDSBrr
  { 311,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo49,0,nullptr },  // Inst #311 = LDSHri
  { 312,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo50,0,nullptr },  // Inst #312 = LDSHrr
  { 313,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #313 = LDSWri
  { 314,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo58,0,nullptr },  // Inst #314 = LDSWrr
  { 315,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo49,0,nullptr },  // Inst #315 = LDUBri
  { 316,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo50,0,nullptr },  // Inst #316 = LDUBrr
  { 317,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo49,0,nullptr },  // Inst #317 = LDUHri
  { 318,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo50,0,nullptr },  // Inst #318 = LDUHrr
  { 319,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #319 = LDXri
  { 320,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo58,0,nullptr },  // Inst #320 = LDXrr
  { 321,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo49,0,nullptr },  // Inst #321 = LDri
  { 322,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo50,0,nullptr },  // Inst #322 = LDrr
  { 323,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #323 = LEAX_ADDri
  { 324,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo49,0,nullptr },  // Inst #324 = LEA_ADDri
  { 325,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo59,0,nullptr },  // Inst #325 = LZCNT
  { 326,	1,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #326 = MEMBARi
  { 327,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo60,0,nullptr },  // Inst #327 = MOVDTOX
  { 328,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList3, nullptr, OperandInfo61,0,nullptr },  // Inst #328 = MOVFCCri
  { 329,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList3, nullptr, OperandInfo62,0,nullptr },  // Inst #329 = MOVFCCrr
  { 330,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList1, nullptr, OperandInfo61,0,nullptr },  // Inst #330 = MOVICCri
  { 331,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList1, nullptr, OperandInfo62,0,nullptr },  // Inst #331 = MOVICCrr
  { 332,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #332 = MOVRGEZri
  { 333,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #333 = MOVRGEZrr
  { 334,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #334 = MOVRGZri
  { 335,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #335 = MOVRGZrr
  { 336,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #336 = MOVRLEZri
  { 337,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #337 = MOVRLEZrr
  { 338,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #338 = MOVRLZri
  { 339,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #339 = MOVRLZrr
  { 340,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #340 = MOVRNZri
  { 341,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #341 = MOVRNZrr
  { 342,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #342 = MOVRRZri
  { 343,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #343 = MOVRRZrr
  { 344,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo60,0,nullptr },  // Inst #344 = MOVSTOSW
  { 345,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo60,0,nullptr },  // Inst #345 = MOVSTOUW
  { 346,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo64,0,nullptr },  // Inst #346 = MOVWTOS
  { 347,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList1, nullptr, OperandInfo61,0,nullptr },  // Inst #347 = MOVXCCri
  { 348,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList1, nullptr, OperandInfo62,0,nullptr },  // Inst #348 = MOVXCCrr
  { 349,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo64,0,nullptr },  // Inst #349 = MOVXTOD
  { 350,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo65,0,nullptr },  // Inst #350 = MULXri
  { 351,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #351 = MULXrr
  { 352,	0,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #352 = NOP
  { 353,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #353 = ORCCri
  { 354,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #354 = ORCCrr
  { 355,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #355 = ORNCCri
  { 356,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #356 = ORNCCrr
  { 357,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #357 = ORNri
  { 358,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #358 = ORNrr
  { 359,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #359 = ORXNrr
  { 360,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #360 = ORXri
  { 361,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #361 = ORXrr
  { 362,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #362 = ORri
  { 363,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #363 = ORrr
  { 364,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #364 = PDIST
  { 365,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #365 = PDISTN
  { 366,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo27,0,nullptr },  // Inst #366 = POPCrr
  { 367,	1,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList5, nullptr, OperandInfo66,0,nullptr },  // Inst #367 = RDY
  { 368,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #368 = RESTOREri
  { 369,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #369 = RESTORErr
  { 370,	1,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #370 = RET
  { 371,	1,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #371 = RETL
  { 372,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #372 = RETTri
  { 373,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo19,0,nullptr },  // Inst #373 = RETTrr
  { 374,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #374 = SAVEri
  { 375,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #375 = SAVErr
  { 376,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList6, OperandInfo12,0,nullptr },  // Inst #376 = SDIVCCri
  { 377,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList6, OperandInfo13,0,nullptr },  // Inst #377 = SDIVCCrr
  { 378,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo65,0,nullptr },  // Inst #378 = SDIVXri
  { 379,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #379 = SDIVXrr
  { 380,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo12,0,nullptr },  // Inst #380 = SDIVri
  { 381,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo13,0,nullptr },  // Inst #381 = SDIVrr
  { 382,	4,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList3, nullptr, OperandInfo67,0,nullptr },  // Inst #382 = SELECT_CC_DFP_FCC
  { 383,	4,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList1, nullptr, OperandInfo67,0,nullptr },  // Inst #383 = SELECT_CC_DFP_ICC
  { 384,	4,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList3, nullptr, OperandInfo68,0,nullptr },  // Inst #384 = SELECT_CC_FP_FCC
  { 385,	4,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList1, nullptr, OperandInfo68,0,nullptr },  // Inst #385 = SELECT_CC_FP_ICC
  { 386,	4,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList3, nullptr, OperandInfo69,0,nullptr },  // Inst #386 = SELECT_CC_Int_FCC
  { 387,	4,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList1, nullptr, OperandInfo69,0,nullptr },  // Inst #387 = SELECT_CC_Int_ICC
  { 388,	4,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList3, nullptr, OperandInfo70,0,nullptr },  // Inst #388 = SELECT_CC_QFP_FCC
  { 389,	4,	1,	0,	4,	0|(1<<MCID::Pseudo)|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList1, nullptr, OperandInfo70,0,nullptr },  // Inst #389 = SELECT_CC_QFP_ICC
  { 390,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo71,0,nullptr },  // Inst #390 = SETHIXi
  { 391,	2,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo71,0,nullptr },  // Inst #391 = SETHIi
  { 392,	0,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #392 = SHUTDOWN
  { 393,	0,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #393 = SIAM
  { 394,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #394 = SLLXri
  { 395,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #395 = SLLXrr
  { 396,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #396 = SLLri
  { 397,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #397 = SLLrr
  { 398,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList6, OperandInfo12,0,nullptr },  // Inst #398 = SMULCCri
  { 399,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList6, OperandInfo13,0,nullptr },  // Inst #399 = SMULCCrr
  { 400,	3,	1,	0,	4,	0, 0x0ULL, nullptr, ImplicitList5, OperandInfo12,0,nullptr },  // Inst #400 = SMULri
  { 401,	3,	1,	0,	4,	0, 0x0ULL, nullptr, ImplicitList5, OperandInfo13,0,nullptr },  // Inst #401 = SMULrr
  { 402,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #402 = SRAXri
  { 403,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #403 = SRAXrr
  { 404,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #404 = SRAri
  { 405,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #405 = SRArr
  { 406,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #406 = SRLXri
  { 407,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #407 = SRLXrr
  { 408,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #408 = SRLri
  { 409,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #409 = SRLrr
  { 410,	0,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #410 = STBAR
  { 411,	3,	0,	0,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo72,0,nullptr },  // Inst #411 = STBri
  { 412,	3,	0,	0,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo73,0,nullptr },  // Inst #412 = STBrr
  { 413,	3,	0,	0,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo74,0,nullptr },  // Inst #413 = STDFri
  { 414,	3,	0,	0,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo75,0,nullptr },  // Inst #414 = STDFrr
  { 415,	3,	0,	0,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo76,0,nullptr },  // Inst #415 = STFri
  { 416,	3,	0,	0,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo77,0,nullptr },  // Inst #416 = STFrr
  { 417,	3,	0,	0,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo72,0,nullptr },  // Inst #417 = STHri
  { 418,	3,	0,	0,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo73,0,nullptr },  // Inst #418 = STHrr
  { 419,	3,	0,	0,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #419 = STQFri
  { 420,	3,	0,	0,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo79,0,nullptr },  // Inst #420 = STQFrr
  { 421,	3,	0,	0,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo80,0,nullptr },  // Inst #421 = STXri
  { 422,	3,	0,	0,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo81,0,nullptr },  // Inst #422 = STXrr
  { 423,	3,	0,	0,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo72,0,nullptr },  // Inst #423 = STri
  { 424,	3,	0,	0,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo73,0,nullptr },  // Inst #424 = STrr
  { 425,	3,	1,	0,	4,	0, 0x0ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #425 = SUBCCri
  { 426,	3,	1,	0,	4,	0, 0x0ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #426 = SUBCCrr
  { 427,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, nullptr, OperandInfo12,0,nullptr },  // Inst #427 = SUBCri
  { 428,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, nullptr, OperandInfo13,0,nullptr },  // Inst #428 = SUBCrr
  { 429,	3,	1,	0,	4,	0, 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #429 = SUBEri
  { 430,	3,	1,	0,	4,	0, 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #430 = SUBErr
  { 431,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #431 = SUBXri
  { 432,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #432 = SUBXrr
  { 433,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #433 = SUBri
  { 434,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #434 = SUBrr
  { 435,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo82,0,nullptr },  // Inst #435 = SWAPri
  { 436,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #436 = SWAPrr
  { 437,	0,	0,	0,	4,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #437 = TA3
  { 438,	0,	0,	0,	4,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #438 = TA5
  { 439,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #439 = TADDCCTVri
  { 440,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #440 = TADDCCTVrr
  { 441,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #441 = TADDCCri
  { 442,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #442 = TADDCCrr
  { 443,	3,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, nullptr, OperandInfo84,0,nullptr },  // Inst #443 = TICCri
  { 444,	3,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, nullptr, OperandInfo12,0,nullptr },  // Inst #444 = TICCrr
  { 445,	4,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo85,0,nullptr },  // Inst #445 = TLS_ADDXrr
  { 446,	4,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo86,0,nullptr },  // Inst #446 = TLS_ADDrr
  { 447,	2,	0,	0,	4,	0|(1<<MCID::DelaySlot)|(1<<MCID::Call)|(1<<MCID::Variadic), 0x0ULL, ImplicitList2, nullptr, OperandInfo7,0,nullptr },  // Inst #447 = TLS_CALL
  { 448,	4,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo87,0,nullptr },  // Inst #448 = TLS_LDXrr
  { 449,	4,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo87,0,nullptr },  // Inst #449 = TLS_LDrr
  { 450,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #450 = TSUBCCTVri
  { 451,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #451 = TSUBCCTVrr
  { 452,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #452 = TSUBCCri
  { 453,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #453 = TSUBCCrr
  { 454,	3,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, nullptr, OperandInfo84,0,nullptr },  // Inst #454 = TXCCri
  { 455,	3,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, nullptr, OperandInfo12,0,nullptr },  // Inst #455 = TXCCrr
  { 456,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList6, OperandInfo12,0,nullptr },  // Inst #456 = UDIVCCri
  { 457,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList6, OperandInfo13,0,nullptr },  // Inst #457 = UDIVCCrr
  { 458,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo65,0,nullptr },  // Inst #458 = UDIVXri
  { 459,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #459 = UDIVXrr
  { 460,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo12,0,nullptr },  // Inst #460 = UDIVri
  { 461,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo13,0,nullptr },  // Inst #461 = UDIVrr
  { 462,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList6, OperandInfo12,0,nullptr },  // Inst #462 = UMULCCri
  { 463,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList6, OperandInfo13,0,nullptr },  // Inst #463 = UMULCCrr
  { 464,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #464 = UMULXHI
  { 465,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo12,0,nullptr },  // Inst #465 = UMULri
  { 466,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo13,0,nullptr },  // Inst #466 = UMULrr
  { 467,	1,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #467 = UNIMP
  { 468,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo39,0,nullptr },  // Inst #468 = V9FCMPD
  { 469,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo39,0,nullptr },  // Inst #469 = V9FCMPED
  { 470,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #470 = V9FCMPEQ
  { 471,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo89,0,nullptr },  // Inst #471 = V9FCMPES
  { 472,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #472 = V9FCMPQ
  { 473,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo89,0,nullptr },  // Inst #473 = V9FCMPS
  { 474,	5,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90,0,nullptr },  // Inst #474 = V9FMOVD_FCC
  { 475,	5,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo91,0,nullptr },  // Inst #475 = V9FMOVQ_FCC
  { 476,	5,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo92,0,nullptr },  // Inst #476 = V9FMOVS_FCC
  { 477,	5,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo93,0,nullptr },  // Inst #477 = V9MOVFCCri
  { 478,	5,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo94,0,nullptr },  // Inst #478 = V9MOVFCCrr
  { 479,	2,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo26,0,nullptr },  // Inst #479 = WRYri
  { 480,	2,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo27,0,nullptr },  // Inst #480 = WRYrr
  { 481,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #481 = XMULX
  { 482,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #482 = XMULXHI
  { 483,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #483 = XNORCCri
  { 484,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #484 = XNORCCrr
  { 485,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #485 = XNORXrr
  { 486,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #486 = XNORri
  { 487,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #487 = XNORrr
  { 488,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #488 = XORCCri
  { 489,	3,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #489 = XORCCrr
  { 490,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #490 = XORXri
  { 491,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #491 = XORXrr
  { 492,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #492 = XORri
  { 493,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #493 = XORrr
};

extern const char SparcInstrNameData[] = {
  /* 0 */ 'F', 'S', 'R', 'C', '1', 0,
  /* 6 */ 'F', 'A', 'N', 'D', 'N', 'O', 'T', '1', 0,
  /* 15 */ 'F', 'N', 'O', 'T', '1', 0,
  /* 21 */ 'F', 'O', 'R', 'N', 'O', 'T', '1', 0,
  /* 29 */ 'F', 'S', 'R', 'A', '3', '2', 0,
  /* 36 */ 'F', 'P', 'S', 'U', 'B', '3', '2', 0,
  /* 44 */ 'F', 'P', 'A', 'D', 'D', '3', '2', 0,
  /* 52 */ 'E', 'D', 'G', 'E', '3', '2', 0,
  /* 59 */ 'F', 'C', 'M', 'P', 'L', 'E', '3', '2', 0,
  /* 68 */ 'F', 'C', 'M', 'P', 'N', 'E', '3', '2', 0,
  /* 77 */ 'F', 'P', 'A', 'C', 'K', '3', '2', 0,
  /* 85 */ 'C', 'M', 'A', 'S', 'K', '3', '2', 0,
  /* 93 */ 'F', 'S', 'L', 'L', '3', '2', 0,
  /* 100 */ 'F', 'S', 'R', 'L', '3', '2', 0,
  /* 107 */ 'F', 'C', 'M', 'P', 'E', 'Q', '3', '2', 0,
  /* 116 */ 'F', 'S', 'L', 'A', 'S', '3', '2', 0,
  /* 124 */ 'F', 'C', 'M', 'P', 'G', 'T', '3', '2', 0,
  /* 133 */ 'A', 'R', 'R', 'A', 'Y', '3', '2', 0,
  /* 141 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', '3', '2', 0,
  /* 160 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', '3', '2', 0,
  /* 179 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', '3', '2', 0,
  /* 199 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', '3', '2', 0,
  /* 218 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', '3', '2', 0,
  /* 238 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', '3', '2', 0,
  /* 257 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', '3', '2', 0,
  /* 276 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', '3', '2', 0,
  /* 294 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', '3', '2', 0,
  /* 314 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', '3', '2', 0,
  /* 333 */ 'F', 'S', 'R', 'C', '2', 0,
  /* 339 */ 'F', 'A', 'N', 'D', 'N', 'O', 'T', '2', 0,
  /* 348 */ 'F', 'N', 'O', 'T', '2', 0,
  /* 354 */ 'F', 'O', 'R', 'N', 'O', 'T', '2', 0,
  /* 362 */ 'T', 'A', '3', 0,
  /* 366 */ 'F', 'P', 'A', 'D', 'D', '6', '4', 0,
  /* 374 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', '6', '4', 0,
  /* 393 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', '6', '4', 0,
  /* 412 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', '6', '4', 0,
  /* 432 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', '6', '4', 0,
  /* 451 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', '6', '4', 0,
  /* 471 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', '6', '4', 0,
  /* 490 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', '6', '4', 0,
  /* 505 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', '6', '4', 0,
  /* 524 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', '6', '4', 0,
  /* 542 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', '6', '4', 0,
  /* 562 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', '6', '4', 0,
  /* 581 */ 'T', 'A', '5', 0,
  /* 585 */ 'F', 'S', 'R', 'A', '1', '6', 0,
  /* 592 */ 'F', 'P', 'S', 'U', 'B', '1', '6', 0,
  /* 600 */ 'F', 'P', 'A', 'D', 'D', '1', '6', 0,
  /* 608 */ 'E', 'D', 'G', 'E', '1', '6', 0,
  /* 615 */ 'F', 'C', 'M', 'P', 'L', 'E', '1', '6', 0,
  /* 624 */ 'F', 'C', 'M', 'P', 'N', 'E', '1', '6', 0,
  /* 633 */ 'F', 'P', 'A', 'C', 'K', '1', '6', 0,
  /* 641 */ 'C', 'M', 'A', 'S', 'K', '1', '6', 0,
  /* 649 */ 'F', 'S', 'L', 'L', '1', '6', 0,
  /* 656 */ 'F', 'S', 'R', 'L', '1', '6', 0,
  /* 663 */ 'F', 'C', 'H', 'K', 'S', 'M', '1', '6', 0,
  /* 672 */ 'F', 'M', 'E', 'A', 'N', '1', '6', 0,
  /* 680 */ 'F', 'C', 'M', 'P', 'E', 'Q', '1', '6', 0,
  /* 689 */ 'F', 'S', 'L', 'A', 'S', '1', '6', 0,
  /* 697 */ 'F', 'C', 'M', 'P', 'G', 'T', '1', '6', 0,
  /* 706 */ 'F', 'M', 'U', 'L', '8', 'X', '1', '6', 0,
  /* 715 */ 'F', 'M', 'U', 'L', 'D', '8', 'U', 'L', 'X', '1', '6', 0,
  /* 727 */ 'F', 'M', 'U', 'L', '8', 'U', 'L', 'X', '1', '6', 0,
  /* 738 */ 'F', 'M', 'U', 'L', 'D', '8', 'S', 'U', 'X', '1', '6', 0,
  /* 750 */ 'F', 'M', 'U', 'L', '8', 'S', 'U', 'X', '1', '6', 0,
  /* 761 */ 'A', 'R', 'R', 'A', 'Y', '1', '6', 0,
  /* 769 */ 'E', 'D', 'G', 'E', '8', 0,
  /* 775 */ 'C', 'M', 'A', 'S', 'K', '8', 0,
  /* 782 */ 'A', 'R', 'R', 'A', 'Y', '8', 0,
  /* 789 */ 'B', 'A', 0,
  /* 792 */ 'B', 'P', 'F', 'C', 'C', 'A', 0,
  /* 799 */ 'B', 'P', 'I', 'C', 'C', 'A', 0,
  /* 806 */ 'B', 'P', 'X', 'C', 'C', 'A', 0,
  /* 813 */ 'F', 'B', 'C', 'O', 'N', 'D', 'A', 0,
  /* 821 */ 'F', 'A', 'L', 'I', 'G', 'N', 'A', 'D', 'A', 'T', 'A', 0,
  /* 833 */ 'A', 'D', 'D', 'X', 'C', 'C', 'C', 0,
  /* 841 */ 'B', 'P', 'F', 'C', 'C', 0,
  /* 847 */ 'V', '9', 'F', 'M', 'O', 'V', 'D', '_', 'F', 'C', 'C', 0,
  /* 859 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'D', 'F', 'P', '_', 'F', 'C', 'C', 0,
  /* 877 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'F', 'P', '_', 'F', 'C', 'C', 0,
  /* 895 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', 'P', '_', 'F', 'C', 'C', 0,
  /* 912 */ 'V', '9', 'F', 'M', 'O', 'V', 'Q', '_', 'F', 'C', 'C', 0,
  /* 924 */ 'V', '9', 'F', 'M', 'O', 'V', 'S', '_', 'F', 'C', 'C', 0,
  /* 936 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', 'n', 't', '_', 'F', 'C', 'C', 0,
  /* 954 */ 'B', 'P', 'I', 'C', 'C', 0,
  /* 960 */ 'F', 'M', 'O', 'V', 'D', '_', 'I', 'C', 'C', 0,
  /* 970 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'D', 'F', 'P', '_', 'I', 'C', 'C', 0,
  /* 988 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'F', 'P', '_', 'I', 'C', 'C', 0,
  /* 1006 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', 'P', '_', 'I', 'C', 'C', 0,
  /* 1023 */ 'F', 'M', 'O', 'V', 'Q', '_', 'I', 'C', 'C', 0,
  /* 1033 */ 'F', 'M', 'O', 'V', 'S', '_', 'I', 'C', 'C', 0,
  /* 1043 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', 'n', 't', '_', 'I', 'C', 'C', 0,
  /* 1061 */ 'B', 'P', 'X', 'C', 'C', 0,
  /* 1067 */ 'F', 'M', 'O', 'V', 'D', '_', 'X', 'C', 'C', 0,
  /* 1077 */ 'F', 'M', 'O', 'V', 'Q', '_', 'X', 'C', 'C', 0,
  /* 1087 */ 'F', 'M', 'O', 'V', 'S', '_', 'X', 'C', 'C', 0,
  /* 1097 */ 'F', 'R', 'A', 'M', 'E', '_', 'A', 'L', 'L', 'O', 'C', 0,
  /* 1109 */ 'A', 'D', 'D', 'X', 'C', 0,
  /* 1115 */ 'F', 'S', 'U', 'B', 'D', 0,
  /* 1121 */ 'F', 'H', 'S', 'U', 'B', 'D', 0,
  /* 1128 */ 'F', 'A', 'D', 'D', 'D', 0,
  /* 1134 */ 'F', 'H', 'A', 'D', 'D', 'D', 0,
  /* 1141 */ 'F', 'N', 'H', 'A', 'D', 'D', 'D', 0,
  /* 1149 */ 'F', 'N', 'A', 'D', 'D', 'D', 0,
  /* 1156 */ 'V', '9', 'F', 'C', 'M', 'P', 'E', 'D', 0,
  /* 1165 */ 'F', 'N', 'E', 'G', 'D', 0,
  /* 1171 */ 'F', 'M', 'U', 'L', 'D', 0,
  /* 1177 */ 'F', 'N', 'M', 'U', 'L', 'D', 0,
  /* 1184 */ 'F', 'S', 'M', 'U', 'L', 'D', 0,
  /* 1191 */ 'F', 'N', 'S', 'M', 'U', 'L', 'D', 0,
  /* 1199 */ 'F', 'A', 'N', 'D', 0,
  /* 1204 */ 'F', 'N', 'A', 'N', 'D', 0,
  /* 1210 */ 'F', 'E', 'X', 'P', 'A', 'N', 'D', 0,
  /* 1218 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 1231 */ 'F', 'B', 'C', 'O', 'N', 'D', 0,
  /* 1238 */ 'F', 'I', 'T', 'O', 'D', 0,
  /* 1244 */ 'F', 'Q', 'T', 'O', 'D', 0,
  /* 1250 */ 'F', 'S', 'T', 'O', 'D', 0,
  /* 1256 */ 'F', 'X', 'T', 'O', 'D', 0,
  /* 1262 */ 'M', 'O', 'V', 'X', 'T', 'O', 'D', 0,
  /* 1270 */ 'V', '9', 'F', 'C', 'M', 'P', 'D', 0,
  /* 1278 */ 'F', 'L', 'C', 'M', 'P', 'D', 0,
  /* 1285 */ 'L', 'O', 'A', 'D', '_', 'S', 'T', 'A', 'C', 'K', '_', 'G', 'U', 'A', 'R', 'D', 0,
  /* 1302 */ 'F', 'A', 'B', 'S', 'D', 0,
  /* 1308 */ 'F', 'S', 'Q', 'R', 'T', 'D', 0,
  /* 1315 */ 'F', 'D', 'I', 'V', 'D', 0,
  /* 1321 */ 'F', 'M', 'O', 'V', 'D', 0,
  /* 1327 */ 'F', 'M', 'O', 'V', 'R', 'G', 'E', 'Z', 'D', 0,
  /* 1337 */ 'F', 'M', 'O', 'V', 'R', 'L', 'E', 'Z', 'D', 0,
  /* 1347 */ 'F', 'M', 'O', 'V', 'R', 'G', 'Z', 'D', 0,
  /* 1356 */ 'F', 'M', 'O', 'V', 'R', 'L', 'Z', 'D', 0,
  /* 1365 */ 'F', 'M', 'O', 'V', 'R', 'N', 'Z', 'D', 0,
  /* 1374 */ 'F', 'M', 'O', 'V', 'R', 'Z', 'D', 0,
  /* 1382 */ 'R', 'E', 'G', '_', 'S', 'E', 'Q', 'U', 'E', 'N', 'C', 'E', 0,
  /* 1395 */ 'F', 'P', 'M', 'E', 'R', 'G', 'E', 0,
  /* 1403 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 1410 */ 'B', 'S', 'H', 'U', 'F', 'F', 'L', 'E', 0,
  /* 1419 */ 'F', 'O', 'N', 'E', 0,
  /* 1424 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 1434 */ 'I', 'M', 'P', 'L', 'I', 'C', 'I', 'T', '_', 'D', 'E', 'F', 0,
  /* 1447 */ 'E', 'X', 'T', 'R', 'A', 'C', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 1462 */ 'I', 'N', 'S', 'E', 'R', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 1476 */ 'S', 'U', 'B', 'R', 'E', 'G', '_', 'T', 'O', '_', 'R', 'E', 'G', 0,
  /* 1490 */ 'P', 'H', 'I', 0,
  /* 1494 */ 'U', 'M', 'U', 'L', 'X', 'H', 'I', 0,
  /* 1502 */ 'X', 'M', 'U', 'L', 'X', 'H', 'I', 0,
  /* 1510 */ 'F', 'D', 'T', 'O', 'I', 0,
  /* 1516 */ 'F', 'Q', 'T', 'O', 'I', 0,
  /* 1522 */ 'F', 'S', 'T', 'O', 'I', 0,
  /* 1528 */ 'B', 'M', 'A', 'S', 'K', 0,
  /* 1534 */ 'E', 'D', 'G', 'E', '3', '2', 'L', 0,
  /* 1542 */ 'E', 'D', 'G', 'E', '1', '6', 'L', 0,
  /* 1550 */ 'E', 'D', 'G', 'E', '8', 'L', 0,
  /* 1557 */ 'F', 'M', 'U', 'L', '8', 'X', '1', '6', 'A', 'L', 0,
  /* 1568 */ 'G', 'C', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 1577 */ 'E', 'H', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 1586 */ 'T', 'L', 'S', '_', 'C', 'A', 'L', 'L', 0,
  /* 1595 */ 'K', 'I', 'L', 'L', 0,
  /* 1600 */ 'A', 'L', 'I', 'G', 'N', 'A', 'D', 'D', 'R', 'L', 0,
  /* 1611 */ 'R', 'E', 'T', 'L', 0,
  /* 1616 */ 'S', 'I', 'A', 'M', 0,
  /* 1621 */ 'I', 'N', 'L', 'I', 'N', 'E', 'A', 'S', 'M', 0,
  /* 1631 */ 'E', 'D', 'G', 'E', '3', '2', 'N', 0,
  /* 1639 */ 'E', 'D', 'G', 'E', '1', '6', 'N', 0,
  /* 1647 */ 'E', 'D', 'G', 'E', '8', 'N', 0,
  /* 1654 */ 'E', 'D', 'G', 'E', '3', '2', 'L', 'N', 0,
  /* 1663 */ 'E', 'D', 'G', 'E', '1', '6', 'L', 'N', 0,
  /* 1672 */ 'E', 'D', 'G', 'E', '8', 'L', 'N', 0,
  /* 1680 */ 'C', 'F', 'I', '_', 'I', 'N', 'S', 'T', 'R', 'U', 'C', 'T', 'I', 'O', 'N', 0,
  /* 1696 */ 'P', 'D', 'I', 'S', 'T', 'N', 0,
  /* 1703 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 0,
  /* 1720 */ 'S', 'H', 'U', 'T', 'D', 'O', 'W', 'N', 0,
  /* 1729 */ 'F', 'Z', 'E', 'R', 'O', 0,
  /* 1735 */ 'S', 'T', 'A', 'C', 'K', 'M', 'A', 'P', 0,
  /* 1744 */ 'U', 'N', 'I', 'M', 'P', 0,
  /* 1750 */ 'N', 'O', 'P', 0,
  /* 1754 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 0,
  /* 1769 */ 'F', 'S', 'U', 'B', 'Q', 0,
  /* 1775 */ 'F', 'A', 'D', 'D', 'Q', 0,
  /* 1781 */ 'V', '9', 'F', 'C', 'M', 'P', 'E', 'Q', 0,
  /* 1790 */ 'F', 'N', 'E', 'G', 'Q', 0,
  /* 1796 */ 'F', 'D', 'M', 'U', 'L', 'Q', 0,
  /* 1803 */ 'F', 'M', 'U', 'L', 'Q', 0,
  /* 1809 */ 'F', 'D', 'T', 'O', 'Q', 0,
  /* 1815 */ 'F', 'I', 'T', 'O', 'Q', 0,
  /* 1821 */ 'F', 'S', 'T', 'O', 'Q', 0,
  /* 1827 */ 'F', 'X', 'T', 'O', 'Q', 0,
  /* 1833 */ 'V', '9', 'F', 'C', 'M', 'P', 'Q', 0,
  /* 1841 */ 'F', 'A', 'B', 'S', 'Q', 0,
  /* 1847 */ 'F', 'S', 'Q', 'R', 'T', 'Q', 0,
  /* 1854 */ 'F', 'D', 'I', 'V', 'Q', 0,
  /* 1860 */ 'F', 'M', 'O', 'V', 'Q', 0,
  /* 1866 */ 'F', 'M', 'O', 'V', 'R', 'G', 'E', 'Z', 'Q', 0,
  /* 1876 */ 'F', 'M', 'O', 'V', 'R', 'L', 'E', 'Z', 'Q', 0,
  /* 1886 */ 'F', 'M', 'O', 'V', 'R', 'G', 'Z', 'Q', 0,
  /* 1895 */ 'F', 'M', 'O', 'V', 'R', 'L', 'Z', 'Q', 0,
  /* 1904 */ 'F', 'M', 'O', 'V', 'R', 'N', 'Z', 'Q', 0,
  /* 1913 */ 'F', 'M', 'O', 'V', 'R', 'Z', 'Q', 0,
  /* 1921 */ 'S', 'T', 'B', 'A', 'R', 0,
  /* 1927 */ 'A', 'L', 'I', 'G', 'N', 'A', 'D', 'D', 'R', 0,
  /* 1937 */ 'F', 'O', 'R', 0,
  /* 1941 */ 'F', 'N', 'O', 'R', 0,
  /* 1946 */ 'F', 'X', 'N', 'O', 'R', 0,
  /* 1952 */ 'F', 'X', 'O', 'R', 0,
  /* 1957 */ 'F', 'S', 'R', 'C', '1', 'S', 0,
  /* 1964 */ 'F', 'A', 'N', 'D', 'N', 'O', 'T', '1', 'S', 0,
  /* 1974 */ 'F', 'N', 'O', 'T', '1', 'S', 0,
  /* 1981 */ 'F', 'O', 'R', 'N', 'O', 'T', '1', 'S', 0,
  /* 1990 */ 'F', 'P', 'S', 'U', 'B', '3', '2', 'S', 0,
  /* 1999 */ 'F', 'P', 'A', 'D', 'D', '3', '2', 'S', 0,
  /* 2008 */ 'F', 'S', 'R', 'C', '2', 'S', 0,
  /* 2015 */ 'F', 'A', 'N', 'D', 'N', 'O', 'T', '2', 'S', 0,
  /* 2025 */ 'F', 'N', 'O', 'T', '2', 'S', 0,
  /* 2032 */ 'F', 'O', 'R', 'N', 'O', 'T', '2', 'S', 0,
  /* 2041 */ 'F', 'P', 'S', 'U', 'B', '1', '6', 'S', 0,
  /* 2050 */ 'F', 'P', 'A', 'D', 'D', '1', '6', 'S', 0,
  /* 2059 */ 'F', 'S', 'U', 'B', 'S', 0,
  /* 2065 */ 'F', 'H', 'S', 'U', 'B', 'S', 0,
  /* 2072 */ 'F', 'A', 'D', 'D', 'S', 0,
  /* 2078 */ 'F', 'H', 'A', 'D', 'D', 'S', 0,
  /* 2085 */ 'F', 'N', 'H', 'A', 'D', 'D', 'S', 0,
  /* 2093 */ 'F', 'N', 'A', 'D', 'D', 'S', 0,
  /* 2100 */ 'F', 'A', 'N', 'D', 'S', 0,
  /* 2106 */ 'F', 'N', 'A', 'N', 'D', 'S', 0,
  /* 2113 */ 'F', 'O', 'N', 'E', 'S', 0,
  /* 2119 */ 'V', '9', 'F', 'C', 'M', 'P', 'E', 'S', 0,
  /* 2128 */ 'F', 'N', 'E', 'G', 'S', 0,
  /* 2134 */ 'F', 'M', 'U', 'L', 'S', 0,
  /* 2140 */ 'F', 'N', 'M', 'U', 'L', 'S', 0,
  /* 2147 */ 'F', 'Z', 'E', 'R', 'O', 'S', 0,
  /* 2154 */ 'F', 'D', 'T', 'O', 'S', 0,
  /* 2160 */ 'F', 'I', 'T', 'O', 'S', 0,
  /* 2166 */ 'F', 'Q', 'T', 'O', 'S', 0,
  /* 2172 */ 'M', 'O', 'V', 'W', 'T', 'O', 'S', 0,
  /* 2180 */ 'F', 'X', 'T', 'O', 'S', 0,
  /* 2186 */ 'V', '9', 'F', 'C', 'M', 'P', 'S', 0,
  /* 2194 */ 'F', 'L', 'C', 'M', 'P', 'S', 0,
  /* 2201 */ 'F', 'O', 'R', 'S', 0,
  /* 2206 */ 'F', 'N', 'O', 'R', 'S', 0,
  /* 2212 */ 'F', 'X', 'N', 'O', 'R', 'S', 0,
  /* 2219 */ 'F', 'X', 'O', 'R', 'S', 0,
  /* 2225 */ 'C', 'O', 'P', 'Y', '_', 'T', 'O', '_', 'R', 'E', 'G', 'C', 'L', 'A', 'S', 'S', 0,
  /* 2242 */ 'F', 'A', 'B', 'S', 'S', 0,
  /* 2248 */ 'F', 'S', 'Q', 'R', 'T', 'S', 0,
  /* 2255 */ 'F', 'D', 'I', 'V', 'S', 0,
  /* 2261 */ 'F', 'M', 'O', 'V', 'S', 0,
  /* 2267 */ 'F', 'M', 'O', 'V', 'R', 'G', 'E', 'Z', 'S', 0,
  /* 2277 */ 'F', 'M', 'O', 'V', 'R', 'L', 'E', 'Z', 'S', 0,
  /* 2287 */ 'F', 'M', 'O', 'V', 'R', 'G', 'Z', 'S', 0,
  /* 2296 */ 'F', 'M', 'O', 'V', 'R', 'L', 'Z', 'S', 0,
  /* 2305 */ 'F', 'M', 'O', 'V', 'R', 'N', 'Z', 'S', 0,
  /* 2314 */ 'F', 'M', 'O', 'V', 'R', 'Z', 'S', 0,
  /* 2322 */ 'R', 'E', 'T', 0,
  /* 2326 */ 'B', 'P', 'F', 'C', 'C', 'A', 'N', 'T', 0,
  /* 2335 */ 'B', 'P', 'I', 'C', 'C', 'A', 'N', 'T', 0,
  /* 2344 */ 'B', 'P', 'X', 'C', 'C', 'A', 'N', 'T', 0,
  /* 2353 */ 'B', 'P', 'F', 'C', 'C', 'N', 'T', 0,
  /* 2361 */ 'B', 'P', 'I', 'C', 'C', 'N', 'T', 0,
  /* 2369 */ 'B', 'P', 'X', 'C', 'C', 'N', 'T', 0,
  /* 2377 */ 'L', 'Z', 'C', 'N', 'T', 0,
  /* 2383 */ 'S', 'T', 'A', 'T', 'E', 'P', 'O', 'I', 'N', 'T', 0,
  /* 2394 */ 'P', 'A', 'T', 'C', 'H', 'P', 'O', 'I', 'N', 'T', 0,
  /* 2405 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 2420 */ 'P', 'D', 'I', 'S', 'T', 0,
  /* 2426 */ 'F', 'M', 'U', 'L', '8', 'X', '1', '6', 'A', 'U', 0,
  /* 2437 */ 'F', 'L', 'U', 'S', 'H', 'W', 0,
  /* 2444 */ 'M', 'O', 'V', 'S', 'T', 'O', 'S', 'W', 0,
  /* 2453 */ 'M', 'O', 'V', 'S', 'T', 'O', 'U', 'W', 0,
  /* 2462 */ 'G', 'E', 'T', 'P', 'C', 'X', 0,
  /* 2469 */ 'F', 'P', 'A', 'C', 'K', 'F', 'I', 'X', 0,
  /* 2478 */ 'X', 'M', 'U', 'L', 'X', 0,
  /* 2484 */ 'F', 'D', 'T', 'O', 'X', 0,
  /* 2490 */ 'M', 'O', 'V', 'D', 'T', 'O', 'X', 0,
  /* 2498 */ 'F', 'Q', 'T', 'O', 'X', 0,
  /* 2504 */ 'F', 'S', 'T', 'O', 'X', 0,
  /* 2510 */ 'R', 'D', 'Y', 0,
  /* 2514 */ 'C', 'O', 'P', 'Y', 0,
  /* 2519 */ 'S', 'E', 'T', 'H', 'I', 'i', 0,
  /* 2526 */ 'M', 'E', 'M', 'B', 'A', 'R', 'i', 0,
  /* 2534 */ 'S', 'E', 'T', 'H', 'I', 'X', 'i', 0,
  /* 2542 */ 'S', 'R', 'A', 'r', 'i', 0,
  /* 2548 */ 'L', 'D', 'S', 'B', 'r', 'i', 0,
  /* 2555 */ 'S', 'T', 'B', 'r', 'i', 0,
  /* 2561 */ 'L', 'D', 'U', 'B', 'r', 'i', 0,
  /* 2568 */ 'S', 'U', 'B', 'r', 'i', 0,
  /* 2574 */ 'S', 'U', 'B', 'C', 'r', 'i', 0,
  /* 2581 */ 'T', 'S', 'U', 'B', 'C', 'C', 'r', 'i', 0,
  /* 2590 */ 'T', 'A', 'D', 'D', 'C', 'C', 'r', 'i', 0,
  /* 2599 */ 'A', 'N', 'D', 'C', 'C', 'r', 'i', 0,
  /* 2607 */ 'V', '9', 'M', 'O', 'V', 'F', 'C', 'C', 'r', 'i', 0,
  /* 2618 */ 'T', 'I', 'C', 'C', 'r', 'i', 0,
  /* 2625 */ 'M', 'O', 'V', 'I', 'C', 'C', 'r', 'i', 0,
  /* 2634 */ 'S', 'M', 'U', 'L', 'C', 'C', 'r', 'i', 0,
  /* 2643 */ 'U', 'M', 'U', 'L', 'C', 'C', 'r', 'i', 0,
  /* 2652 */ 'A', 'N', 'D', 'N', 'C', 'C', 'r', 'i', 0,
  /* 2661 */ 'O', 'R', 'N', 'C', 'C', 'r', 'i', 0,
  /* 2669 */ 'X', 'N', 'O', 'R', 'C', 'C', 'r', 'i', 0,
  /* 2678 */ 'X', 'O', 'R', 'C', 'C', 'r', 'i', 0,
  /* 2686 */ 'S', 'D', 'I', 'V', 'C', 'C', 'r', 'i', 0,
  /* 2695 */ 'U', 'D', 'I', 'V', 'C', 'C', 'r', 'i', 0,
  /* 2704 */ 'T', 'X', 'C', 'C', 'r', 'i', 0,
  /* 2711 */ 'M', 'O', 'V', 'X', 'C', 'C', 'r', 'i', 0,
  /* 2720 */ 'A', 'D', 'D', 'C', 'r', 'i', 0,
  /* 2727 */ 'L', 'E', 'A', '_', 'A', 'D', 'D', 'r', 'i', 0,
  /* 2737 */ 'L', 'E', 'A', 'X', '_', 'A', 'D', 'D', 'r', 'i', 0,
  /* 2748 */ 'L', 'D', 'r', 'i', 0,
  /* 2753 */ 'A', 'N', 'D', 'r', 'i', 0,
  /* 2759 */ 'B', 'I', 'N', 'D', 'r', 'i', 0,
  /* 2766 */ 'S', 'U', 'B', 'E', 'r', 'i', 0,
  /* 2773 */ 'A', 'D', 'D', 'E', 'r', 'i', 0,
  /* 2780 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', 'r', 'i', 0,
  /* 2790 */ 'S', 'A', 'V', 'E', 'r', 'i', 0,
  /* 2797 */ 'L', 'D', 'D', 'F', 'r', 'i', 0,
  /* 2804 */ 'L', 'D', 'F', 'r', 'i', 0,
  /* 2810 */ 'S', 'T', 'D', 'F', 'r', 'i', 0,
  /* 2817 */ 'L', 'D', 'Q', 'F', 'r', 'i', 0,
  /* 2824 */ 'S', 'T', 'Q', 'F', 'r', 'i', 0,
  /* 2831 */ 'S', 'T', 'F', 'r', 'i', 0,
  /* 2837 */ 'L', 'D', 'S', 'H', 'r', 'i', 0,
  /* 2844 */ 'S', 'T', 'H', 'r', 'i', 0,
  /* 2850 */ 'L', 'D', 'U', 'H', 'r', 'i', 0,
  /* 2857 */ 'C', 'A', 'L', 'L', 'r', 'i', 0,
  /* 2864 */ 'S', 'L', 'L', 'r', 'i', 0,
  /* 2870 */ 'J', 'M', 'P', 'L', 'r', 'i', 0,
  /* 2877 */ 'S', 'R', 'L', 'r', 'i', 0,
  /* 2883 */ 'S', 'M', 'U', 'L', 'r', 'i', 0,
  /* 2890 */ 'U', 'M', 'U', 'L', 'r', 'i', 0,
  /* 2897 */ 'A', 'N', 'D', 'N', 'r', 'i', 0,
  /* 2904 */ 'O', 'R', 'N', 'r', 'i', 0,
  /* 2910 */ 'S', 'W', 'A', 'P', 'r', 'i', 0,
  /* 2917 */ 'C', 'M', 'P', 'r', 'i', 0,
  /* 2923 */ 'X', 'N', 'O', 'R', 'r', 'i', 0,
  /* 2930 */ 'X', 'O', 'R', 'r', 'i', 0,
  /* 2936 */ 'S', 'T', 'r', 'i', 0,
  /* 2941 */ 'R', 'E', 'T', 'T', 'r', 'i', 0,
  /* 2948 */ 'S', 'D', 'I', 'V', 'r', 'i', 0,
  /* 2955 */ 'U', 'D', 'I', 'V', 'r', 'i', 0,
  /* 2962 */ 'T', 'S', 'U', 'B', 'C', 'C', 'T', 'V', 'r', 'i', 0,
  /* 2973 */ 'T', 'A', 'D', 'D', 'C', 'C', 'T', 'V', 'r', 'i', 0,
  /* 2984 */ 'L', 'D', 'S', 'W', 'r', 'i', 0,
  /* 2991 */ 'S', 'R', 'A', 'X', 'r', 'i', 0,
  /* 2998 */ 'S', 'U', 'B', 'X', 'r', 'i', 0,
  /* 3005 */ 'A', 'D', 'D', 'X', 'r', 'i', 0,
  /* 3012 */ 'L', 'D', 'X', 'r', 'i', 0,
  /* 3018 */ 'A', 'N', 'D', 'X', 'r', 'i', 0,
  /* 3025 */ 'S', 'L', 'L', 'X', 'r', 'i', 0,
  /* 3032 */ 'S', 'R', 'L', 'X', 'r', 'i', 0,
  /* 3039 */ 'M', 'U', 'L', 'X', 'r', 'i', 0,
  /* 3046 */ 'X', 'O', 'R', 'X', 'r', 'i', 0,
  /* 3053 */ 'S', 'T', 'X', 'r', 'i', 0,
  /* 3059 */ 'S', 'D', 'I', 'V', 'X', 'r', 'i', 0,
  /* 3067 */ 'U', 'D', 'I', 'V', 'X', 'r', 'i', 0,
  /* 3075 */ 'W', 'R', 'Y', 'r', 'i', 0,
  /* 3081 */ 'M', 'O', 'V', 'R', 'G', 'E', 'Z', 'r', 'i', 0,
  /* 3091 */ 'M', 'O', 'V', 'R', 'L', 'E', 'Z', 'r', 'i', 0,
  /* 3101 */ 'M', 'O', 'V', 'R', 'G', 'Z', 'r', 'i', 0,
  /* 3110 */ 'M', 'O', 'V', 'R', 'L', 'Z', 'r', 'i', 0,
  /* 3119 */ 'M', 'O', 'V', 'R', 'N', 'Z', 'r', 'i', 0,
  /* 3128 */ 'M', 'O', 'V', 'R', 'R', 'Z', 'r', 'i', 0,
  /* 3137 */ 'B', 'P', 'G', 'E', 'Z', 'a', 'p', 'n', 0,
  /* 3146 */ 'B', 'P', 'L', 'E', 'Z', 'a', 'p', 'n', 0,
  /* 3155 */ 'B', 'P', 'G', 'Z', 'a', 'p', 'n', 0,
  /* 3163 */ 'B', 'P', 'L', 'Z', 'a', 'p', 'n', 0,
  /* 3171 */ 'B', 'P', 'N', 'Z', 'a', 'p', 'n', 0,
  /* 3179 */ 'B', 'P', 'Z', 'a', 'p', 'n', 0,
  /* 3186 */ 'B', 'P', 'G', 'E', 'Z', 'n', 'a', 'p', 'n', 0,
  /* 3196 */ 'B', 'P', 'L', 'E', 'Z', 'n', 'a', 'p', 'n', 0,
  /* 3206 */ 'B', 'P', 'G', 'Z', 'n', 'a', 'p', 'n', 0,
  /* 3215 */ 'B', 'P', 'L', 'Z', 'n', 'a', 'p', 'n', 0,
  /* 3224 */ 'B', 'P', 'N', 'Z', 'n', 'a', 'p', 'n', 0,
  /* 3233 */ 'B', 'P', 'Z', 'n', 'a', 'p', 'n', 0,
  /* 3241 */ 'S', 'R', 'A', 'r', 'r', 0,
  /* 3247 */ 'L', 'D', 'S', 'B', 'r', 'r', 0,
  /* 3254 */ 'S', 'T', 'B', 'r', 'r', 0,
  /* 3260 */ 'L', 'D', 'U', 'B', 'r', 'r', 0,
  /* 3267 */ 'S', 'U', 'B', 'r', 'r', 0,
  /* 3273 */ 'S', 'U', 'B', 'C', 'r', 'r', 0,
  /* 3280 */ 'T', 'S', 'U', 'B', 'C', 'C', 'r', 'r', 0,
  /* 3289 */ 'T', 'A', 'D', 'D', 'C', 'C', 'r', 'r', 0,
  /* 3298 */ 'A', 'N', 'D', 'C', 'C', 'r', 'r', 0,
  /* 3306 */ 'V', '9', 'M', 'O', 'V', 'F', 'C', 'C', 'r', 'r', 0,
  /* 3317 */ 'T', 'I', 'C', 'C', 'r', 'r', 0,
  /* 3324 */ 'M', 'O', 'V', 'I', 'C', 'C', 'r', 'r', 0,
  /* 3333 */ 'S', 'M', 'U', 'L', 'C', 'C', 'r', 'r', 0,
  /* 3342 */ 'U', 'M', 'U', 'L', 'C', 'C', 'r', 'r', 0,
  /* 3351 */ 'A', 'N', 'D', 'N', 'C', 'C', 'r', 'r', 0,
  /* 3360 */ 'O', 'R', 'N', 'C', 'C', 'r', 'r', 0,
  /* 3368 */ 'X', 'N', 'O', 'R', 'C', 'C', 'r', 'r', 0,
  /* 3377 */ 'X', 'O', 'R', 'C', 'C', 'r', 'r', 0,
  /* 3385 */ 'S', 'D', 'I', 'V', 'C', 'C', 'r', 'r', 0,
  /* 3394 */ 'U', 'D', 'I', 'V', 'C', 'C', 'r', 'r', 0,
  /* 3403 */ 'T', 'X', 'C', 'C', 'r', 'r', 0,
  /* 3410 */ 'M', 'O', 'V', 'X', 'C', 'C', 'r', 'r', 0,
  /* 3419 */ 'A', 'D', 'D', 'C', 'r', 'r', 0,
  /* 3426 */ 'P', 'O', 'P', 'C', 'r', 'r', 0,
  /* 3433 */ 'T', 'L', 'S', '_', 'A', 'D', 'D', 'r', 'r', 0,
  /* 3443 */ 'T', 'L', 'S', '_', 'L', 'D', 'r', 'r', 0,
  /* 3452 */ 'A', 'N', 'D', 'r', 'r', 0,
  /* 3458 */ 'B', 'I', 'N', 'D', 'r', 'r', 0,
  /* 3465 */ 'S', 'U', 'B', 'E', 'r', 'r', 0,
  /* 3472 */ 'A', 'D', 'D', 'E', 'r', 'r', 0,
  /* 3479 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', 'r', 'r', 0,
  /* 3489 */ 'S', 'A', 'V', 'E', 'r', 'r', 0,
  /* 3496 */ 'L', 'D', 'D', 'F', 'r', 'r', 0,
  /* 3503 */ 'L', 'D', 'F', 'r', 'r', 0,
  /* 3509 */ 'S', 'T', 'D', 'F', 'r', 'r', 0,
  /* 3516 */ 'L', 'D', 'Q', 'F', 'r', 'r', 0,
  /* 3523 */ 'S', 'T', 'Q', 'F', 'r', 'r', 0,
  /* 3530 */ 'S', 'T', 'F', 'r', 'r', 0,
  /* 3536 */ 'L', 'D', 'S', 'H', 'r', 'r', 0,
  /* 3543 */ 'S', 'T', 'H', 'r', 'r', 0,
  /* 3549 */ 'L', 'D', 'U', 'H', 'r', 'r', 0,
  /* 3556 */ 'C', 'A', 'L', 'L', 'r', 'r', 0,
  /* 3563 */ 'S', 'L', 'L', 'r', 'r', 0,
  /* 3569 */ 'J', 'M', 'P', 'L', 'r', 'r', 0,
  /* 3576 */ 'S', 'R', 'L', 'r', 'r', 0,
  /* 3582 */ 'S', 'M', 'U', 'L', 'r', 'r', 0,
  /* 3589 */ 'U', 'M', 'U', 'L', 'r', 'r', 0,
  /* 3596 */ 'A', 'N', 'D', 'N', 'r', 'r', 0,
  /* 3603 */ 'O', 'R', 'N', 'r', 'r', 0,
  /* 3609 */ 'A', 'N', 'D', 'X', 'N', 'r', 'r', 0,
  /* 3617 */ 'O', 'R', 'X', 'N', 'r', 'r', 0,
  /* 3624 */ 'S', 'W', 'A', 'P', 'r', 'r', 0,
  /* 3631 */ 'C', 'M', 'P', 'r', 'r', 0,
  /* 3637 */ 'X', 'N', 'O', 'R', 'r', 'r', 0,
  /* 3644 */ 'X', 'O', 'R', 'r', 'r', 0,
  /* 3650 */ 'C', 'A', 'S', 'r', 'r', 0,
  /* 3656 */ 'S', 'T', 'r', 'r', 0,
  /* 3661 */ 'R', 'E', 'T', 'T', 'r', 'r', 0,
  /* 3668 */ 'S', 'D', 'I', 'V', 'r', 'r', 0,
  /* 3675 */ 'U', 'D', 'I', 'V', 'r', 'r', 0,
  /* 3682 */ 'T', 'S', 'U', 'B', 'C', 'C', 'T', 'V', 'r', 'r', 0,
  /* 3693 */ 'T', 'A', 'D', 'D', 'C', 'C', 'T', 'V', 'r', 'r', 0,
  /* 3704 */ 'L', 'D', 'S', 'W', 'r', 'r', 0,
  /* 3711 */ 'S', 'R', 'A', 'X', 'r', 'r', 0,
  /* 3718 */ 'S', 'U', 'B', 'X', 'r', 'r', 0,
  /* 3725 */ 'T', 'L', 'S', '_', 'A', 'D', 'D', 'X', 'r', 'r', 0,
  /* 3736 */ 'T', 'L', 'S', '_', 'L', 'D', 'X', 'r', 'r', 0,
  /* 3746 */ 'A', 'N', 'D', 'X', 'r', 'r', 0,
  /* 3753 */ 'S', 'L', 'L', 'X', 'r', 'r', 0,
  /* 3760 */ 'S', 'R', 'L', 'X', 'r', 'r', 0,
  /* 3767 */ 'M', 'U', 'L', 'X', 'r', 'r', 0,
  /* 3774 */ 'X', 'N', 'O', 'R', 'X', 'r', 'r', 0,
  /* 3782 */ 'X', 'O', 'R', 'X', 'r', 'r', 0,
  /* 3789 */ 'C', 'A', 'S', 'X', 'r', 'r', 0,
  /* 3796 */ 'S', 'T', 'X', 'r', 'r', 0,
  /* 3802 */ 'S', 'D', 'I', 'V', 'X', 'r', 'r', 0,
  /* 3810 */ 'U', 'D', 'I', 'V', 'X', 'r', 'r', 0,
  /* 3818 */ 'W', 'R', 'Y', 'r', 'r', 0,
  /* 3824 */ 'M', 'O', 'V', 'R', 'G', 'E', 'Z', 'r', 'r', 0,
  /* 3834 */ 'M', 'O', 'V', 'R', 'L', 'E', 'Z', 'r', 'r', 0,
  /* 3844 */ 'M', 'O', 'V', 'R', 'G', 'Z', 'r', 'r', 0,
  /* 3853 */ 'M', 'O', 'V', 'R', 'L', 'Z', 'r', 'r', 0,
  /* 3862 */ 'M', 'O', 'V', 'R', 'N', 'Z', 'r', 'r', 0,
  /* 3871 */ 'M', 'O', 'V', 'R', 'R', 'Z', 'r', 'r', 0,
  /* 3880 */ 'B', 'P', 'G', 'E', 'Z', 'a', 'p', 't', 0,
  /* 3889 */ 'B', 'P', 'L', 'E', 'Z', 'a', 'p', 't', 0,
  /* 3898 */ 'B', 'P', 'G', 'Z', 'a', 'p', 't', 0,
  /* 3906 */ 'B', 'P', 'L', 'Z', 'a', 'p', 't', 0,
  /* 3914 */ 'B', 'P', 'N', 'Z', 'a', 'p', 't', 0,
  /* 3922 */ 'B', 'P', 'Z', 'a', 'p', 't', 0,
  /* 3929 */ 'B', 'P', 'G', 'E', 'Z', 'n', 'a', 'p', 't', 0,
  /* 3939 */ 'B', 'P', 'L', 'E', 'Z', 'n', 'a', 'p', 't', 0,
  /* 3949 */ 'B', 'P', 'G', 'Z', 'n', 'a', 'p', 't', 0,
  /* 3958 */ 'B', 'P', 'L', 'Z', 'n', 'a', 'p', 't', 0,
  /* 3967 */ 'B', 'P', 'N', 'Z', 'n', 'a', 'p', 't', 0,
  /* 3976 */ 'B', 'P', 'Z', 'n', 'a', 'p', 't', 0,
};

extern const unsigned SparcInstrNameIndices[] = {
    1490U, 1621U, 1680U, 1577U, 1568U, 1595U, 1447U, 1462U, 
    1434U, 1476U, 2225U, 1424U, 1382U, 2514U, 1403U, 2405U, 
    1218U, 1735U, 2394U, 1285U, 2383U, 1097U, 2591U, 3290U, 
    2720U, 3419U, 2773U, 3472U, 1109U, 833U, 3005U, 3729U, 
    2731U, 3437U, 1703U, 1754U, 1927U, 1600U, 2599U, 3298U, 
    2652U, 3351U, 2897U, 3596U, 3609U, 3018U, 3746U, 2753U, 
    3452U, 761U, 133U, 782U, 160U, 393U, 199U, 432U, 
    314U, 562U, 238U, 471U, 179U, 412U, 276U, 524U, 
    141U, 374U, 294U, 542U, 218U, 451U, 257U, 505U, 
    490U, 789U, 1232U, 814U, 2759U, 3458U, 1528U, 841U, 
    792U, 2326U, 2353U, 3137U, 3880U, 3186U, 3929U, 3155U, 
    3898U, 3206U, 3949U, 954U, 799U, 2335U, 2361U, 3146U, 
    3889U, 3196U, 3939U, 3163U, 3906U, 3215U, 3958U, 3171U, 
    3914U, 3224U, 3967U, 1061U, 806U, 2344U, 2369U, 3179U, 
    3922U, 3233U, 3976U, 1410U, 1590U, 2857U, 3556U, 3789U, 
    3650U, 641U, 85U, 775U, 2917U, 3631U, 608U, 1542U, 
    1663U, 1639U, 52U, 1534U, 1654U, 1631U, 769U, 1550U, 
    1672U, 1647U, 1302U, 1841U, 2242U, 1128U, 1775U, 2072U, 
    821U, 1199U, 6U, 1964U, 339U, 2015U, 2100U, 1231U, 
    813U, 663U, 1272U, 680U, 107U, 697U, 124U, 615U, 
    59U, 624U, 68U, 1835U, 2188U, 1315U, 1854U, 2255U, 
    1796U, 1510U, 1809U, 2154U, 2484U, 1210U, 1134U, 2078U, 
    1121U, 2065U, 1238U, 1815U, 2160U, 1278U, 2194U, 2437U, 
    672U, 1321U, 849U, 960U, 1067U, 1860U, 914U, 1023U, 
    1077U, 1327U, 1866U, 2267U, 1347U, 1886U, 2287U, 1337U, 
    1876U, 2277U, 1356U, 1895U, 2296U, 1365U, 1904U, 2305U, 
    1374U, 1913U, 2314U, 2261U, 926U, 1033U, 1087U, 750U, 
    727U, 706U, 1557U, 2426U, 1171U, 738U, 715U, 1803U, 
    2134U, 1149U, 2093U, 1204U, 2106U, 1165U, 1790U, 2128U, 
    1141U, 2085U, 1177U, 2140U, 1941U, 2206U, 15U, 1974U, 
    348U, 2025U, 1191U, 1419U, 2113U, 1937U, 21U, 1981U, 
    354U, 2032U, 2201U, 633U, 77U, 2469U, 600U, 2050U, 
    44U, 1999U, 366U, 1395U, 592U, 2041U, 36U, 1990U, 
    1244U, 1516U, 2166U, 2498U, 689U, 116U, 649U, 93U, 
    1184U, 1308U, 1847U, 2248U, 585U, 29U, 0U, 1957U, 
    333U, 2008U, 656U, 100U, 1250U, 1522U, 1821U, 2504U, 
    1115U, 1769U, 2059U, 1946U, 2212U, 1952U, 2219U, 1256U, 
    1827U, 2180U, 1729U, 2147U, 2462U, 2870U, 3569U, 2797U, 
    3496U, 2804U, 3503U, 2817U, 3516U, 2548U, 3247U, 2837U, 
    3536U, 2984U, 3704U, 2561U, 3260U, 2850U, 3549U, 3012U, 
    3740U, 2748U, 3447U, 2737U, 2727U, 2377U, 2526U, 2490U, 
    2609U, 3308U, 2625U, 3324U, 3081U, 3824U, 3101U, 3844U, 
    3091U, 3834U, 3110U, 3853U, 3119U, 3862U, 3128U, 3871U, 
    2444U, 2453U, 2172U, 2711U, 3410U, 1262U, 3039U, 3767U, 
    1750U, 2671U, 3370U, 2661U, 3360U, 2904U, 3603U, 3617U, 
    3047U, 3776U, 2925U, 3639U, 2420U, 1696U, 3426U, 2510U, 
    2780U, 3479U, 2322U, 1611U, 2941U, 3661U, 2790U, 3489U, 
    2686U, 3385U, 3059U, 3802U, 2948U, 3668U, 859U, 970U, 
    895U, 1006U, 936U, 1043U, 877U, 988U, 2534U, 2519U, 
    1720U, 1616U, 3025U, 3753U, 2864U, 3563U, 2634U, 3333U, 
    2883U, 3582U, 2991U, 3711U, 2542U, 3241U, 3032U, 3760U, 
    2877U, 3576U, 1921U, 2555U, 3254U, 2810U, 3509U, 2831U, 
    3530U, 2844U, 3543U, 2824U, 3523U, 3053U, 3796U, 2936U, 
    3656U, 2582U, 3281U, 2574U, 3273U, 2766U, 3465U, 2998U, 
    3718U, 2568U, 3267U, 2910U, 3624U, 362U, 581U, 2973U, 
    3693U, 2590U, 3289U, 2618U, 3317U, 3725U, 3433U, 1586U, 
    3736U, 3443U, 2962U, 3682U, 2581U, 3280U, 2704U, 3403U, 
    2695U, 3394U, 3067U, 3810U, 2955U, 3675U, 2643U, 3342U, 
    1494U, 2890U, 3589U, 1744U, 1270U, 1156U, 1781U, 2119U, 
    1833U, 2186U, 847U, 912U, 924U, 2607U, 3306U, 3075U, 
    3818U, 2478U, 1502U, 2669U, 3368U, 3774U, 2923U, 3637U, 
    2678U, 3377U, 3046U, 3782U, 2930U, 3644U, 
};

static inline void InitSparcMCInstrInfo(MCInstrInfo *II) {
  II->InitMCInstrInfo(SparcInsts, SparcInstrNameIndices, SparcInstrNameData, 494);
}

} // End llvm namespace 
#endif // GET_INSTRINFO_MC_DESC


#ifdef GET_INSTRINFO_HEADER
#undef GET_INSTRINFO_HEADER
namespace llvm {
struct SparcGenInstrInfo : public TargetInstrInfo {
  explicit SparcGenInstrInfo(int SO = -1, int DO = -1);
  virtual ~SparcGenInstrInfo();
};
} // End llvm namespace 
#endif // GET_INSTRINFO_HEADER


#ifdef GET_INSTRINFO_CTOR_DTOR
#undef GET_INSTRINFO_CTOR_DTOR
namespace llvm {
extern const MCInstrDesc SparcInsts[];
extern const unsigned SparcInstrNameIndices[];
extern const char SparcInstrNameData[];
SparcGenInstrInfo::SparcGenInstrInfo(int SO, int DO)
  : TargetInstrInfo(SO, DO) {
  InitMCInstrInfo(SparcInsts, SparcInstrNameIndices, SparcInstrNameData, 494);
}
SparcGenInstrInfo::~SparcGenInstrInfo() {}
} // End llvm namespace 
#endif // GET_INSTRINFO_CTOR_DTOR

#ifdef GET_INSTRINFO_OPERAND_ENUM
#undef GET_INSTRINFO_OPERAND_ENUM
namespace llvm {namespace SP {
namespace OpName { 
enum {
OPERAND_LAST
};
} // End namespace OpName
} // End namespace SP
} // End namespace llvm
#endif //GET_INSTRINFO_OPERAND_ENUM
#ifdef GET_INSTRINFO_NAMED_OPS
#undef GET_INSTRINFO_NAMED_OPS
namespace llvm {namespace SP {
LLVM_READONLY
int16_t getNamedOperandIdx(uint16_t Opcode, uint16_t NamedIdx) {
  return -1;
}
} // End namespace SP
} // End namespace llvm
#endif //GET_INSTRINFO_NAMED_OPS

#ifdef GET_INSTRINFO_OPERAND_TYPES_ENUM
#undef GET_INSTRINFO_OPERAND_TYPES_ENUM
namespace llvm {namespace SP {
namespace OpTypes { 
enum OperandType {
  CCOp = 0,
  MEMri = 1,
  MEMrr = 2,
  TLSSym = 3,
  bprtarget = 4,
  bprtarget16 = 5,
  brtarget = 6,
  calltarget = 7,
  f32imm = 8,
  f64imm = 9,
  getPCX = 10,
  i16imm = 11,
  i1imm = 12,
  i32imm = 13,
  i64imm = 14,
  i8imm = 15,
  simm13Op = 16,
  OPERAND_TYPE_LIST_END
};
} // End namespace OpTypes
} // End namespace SP
} // End namespace llvm
#endif // GET_INSTRINFO_OPERAND_TYPES_ENUM
