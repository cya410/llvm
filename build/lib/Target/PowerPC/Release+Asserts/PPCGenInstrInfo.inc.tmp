/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Enum Values                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_ENUM
#undef GET_INSTRINFO_ENUM
namespace llvm {

namespace PPC {
  enum {
    PHI	= 0,
    INLINEASM	= 1,
    CFI_INSTRUCTION	= 2,
    EH_LABEL	= 3,
    GC_LABEL	= 4,
    KILL	= 5,
    EXTRACT_SUBREG	= 6,
    INSERT_SUBREG	= 7,
    IMPLICIT_DEF	= 8,
    SUBREG_TO_REG	= 9,
    COPY_TO_REGCLASS	= 10,
    DBG_VALUE	= 11,
    REG_SEQUENCE	= 12,
    COPY	= 13,
    BUNDLE	= 14,
    LIFETIME_START	= 15,
    LIFETIME_END	= 16,
    STACKMAP	= 17,
    PATCHPOINT	= 18,
    LOAD_STACK_GUARD	= 19,
    STATEPOINT	= 20,
    FRAME_ALLOC	= 21,
    ADD4	= 22,
    ADD4TLS	= 23,
    ADD4o	= 24,
    ADD8	= 25,
    ADD8TLS	= 26,
    ADD8TLS_	= 27,
    ADD8o	= 28,
    ADDC	= 29,
    ADDC8	= 30,
    ADDC8o	= 31,
    ADDCo	= 32,
    ADDE	= 33,
    ADDE8	= 34,
    ADDE8o	= 35,
    ADDEo	= 36,
    ADDI	= 37,
    ADDI8	= 38,
    ADDIC	= 39,
    ADDIC8	= 40,
    ADDICo	= 41,
    ADDIS	= 42,
    ADDIS8	= 43,
    ADDISdtprelHA	= 44,
    ADDISdtprelHA32	= 45,
    ADDISgotTprelHA	= 46,
    ADDIStlsgdHA	= 47,
    ADDIStlsldHA	= 48,
    ADDIStocHA	= 49,
    ADDIdtprelL	= 50,
    ADDIdtprelL32	= 51,
    ADDItlsgdL	= 52,
    ADDItlsgdL32	= 53,
    ADDItlsgdLADDR	= 54,
    ADDItlsgdLADDR32	= 55,
    ADDItlsldL	= 56,
    ADDItlsldL32	= 57,
    ADDItlsldLADDR	= 58,
    ADDItlsldLADDR32	= 59,
    ADDItocL	= 60,
    ADDME	= 61,
    ADDME8	= 62,
    ADDME8o	= 63,
    ADDMEo	= 64,
    ADDZE	= 65,
    ADDZE8	= 66,
    ADDZE8o	= 67,
    ADDZEo	= 68,
    ADJCALLSTACKDOWN	= 69,
    ADJCALLSTACKUP	= 70,
    AND	= 71,
    AND8	= 72,
    AND8o	= 73,
    ANDC	= 74,
    ANDC8	= 75,
    ANDC8o	= 76,
    ANDCo	= 77,
    ANDISo	= 78,
    ANDISo8	= 79,
    ANDIo	= 80,
    ANDIo8	= 81,
    ANDIo_1_EQ_BIT	= 82,
    ANDIo_1_EQ_BIT8	= 83,
    ANDIo_1_GT_BIT	= 84,
    ANDIo_1_GT_BIT8	= 85,
    ANDo	= 86,
    ATOMIC_CMP_SWAP_I16	= 87,
    ATOMIC_CMP_SWAP_I32	= 88,
    ATOMIC_CMP_SWAP_I64	= 89,
    ATOMIC_CMP_SWAP_I8	= 90,
    ATOMIC_LOAD_ADD_I16	= 91,
    ATOMIC_LOAD_ADD_I32	= 92,
    ATOMIC_LOAD_ADD_I64	= 93,
    ATOMIC_LOAD_ADD_I8	= 94,
    ATOMIC_LOAD_AND_I16	= 95,
    ATOMIC_LOAD_AND_I32	= 96,
    ATOMIC_LOAD_AND_I64	= 97,
    ATOMIC_LOAD_AND_I8	= 98,
    ATOMIC_LOAD_NAND_I16	= 99,
    ATOMIC_LOAD_NAND_I32	= 100,
    ATOMIC_LOAD_NAND_I64	= 101,
    ATOMIC_LOAD_NAND_I8	= 102,
    ATOMIC_LOAD_OR_I16	= 103,
    ATOMIC_LOAD_OR_I32	= 104,
    ATOMIC_LOAD_OR_I64	= 105,
    ATOMIC_LOAD_OR_I8	= 106,
    ATOMIC_LOAD_SUB_I16	= 107,
    ATOMIC_LOAD_SUB_I32	= 108,
    ATOMIC_LOAD_SUB_I64	= 109,
    ATOMIC_LOAD_SUB_I8	= 110,
    ATOMIC_LOAD_XOR_I16	= 111,
    ATOMIC_LOAD_XOR_I32	= 112,
    ATOMIC_LOAD_XOR_I64	= 113,
    ATOMIC_LOAD_XOR_I8	= 114,
    ATOMIC_SWAP_I16	= 115,
    ATOMIC_SWAP_I32	= 116,
    ATOMIC_SWAP_I64	= 117,
    ATOMIC_SWAP_I8	= 118,
    ATTN	= 119,
    B	= 120,
    BA	= 121,
    BC	= 122,
    BCC	= 123,
    BCCA	= 124,
    BCCCTR	= 125,
    BCCCTR8	= 126,
    BCCCTRL	= 127,
    BCCCTRL8	= 128,
    BCCL	= 129,
    BCCLA	= 130,
    BCCLR	= 131,
    BCCLRL	= 132,
    BCCTR	= 133,
    BCCTR8	= 134,
    BCCTR8n	= 135,
    BCCTRL	= 136,
    BCCTRL8	= 137,
    BCCTRL8n	= 138,
    BCCTRLn	= 139,
    BCCTRn	= 140,
    BCL	= 141,
    BCLR	= 142,
    BCLRL	= 143,
    BCLRLn	= 144,
    BCLRn	= 145,
    BCLalways	= 146,
    BCLn	= 147,
    BCTR	= 148,
    BCTR8	= 149,
    BCTRL	= 150,
    BCTRL8	= 151,
    BCTRL8_LDinto_toc	= 152,
    BCn	= 153,
    BDNZ	= 154,
    BDNZ8	= 155,
    BDNZA	= 156,
    BDNZAm	= 157,
    BDNZAp	= 158,
    BDNZL	= 159,
    BDNZLA	= 160,
    BDNZLAm	= 161,
    BDNZLAp	= 162,
    BDNZLR	= 163,
    BDNZLR8	= 164,
    BDNZLRL	= 165,
    BDNZLRLm	= 166,
    BDNZLRLp	= 167,
    BDNZLRm	= 168,
    BDNZLRp	= 169,
    BDNZLm	= 170,
    BDNZLp	= 171,
    BDNZm	= 172,
    BDNZp	= 173,
    BDZ	= 174,
    BDZ8	= 175,
    BDZA	= 176,
    BDZAm	= 177,
    BDZAp	= 178,
    BDZL	= 179,
    BDZLA	= 180,
    BDZLAm	= 181,
    BDZLAp	= 182,
    BDZLR	= 183,
    BDZLR8	= 184,
    BDZLRL	= 185,
    BDZLRLm	= 186,
    BDZLRLp	= 187,
    BDZLRm	= 188,
    BDZLRp	= 189,
    BDZLm	= 190,
    BDZLp	= 191,
    BDZm	= 192,
    BDZp	= 193,
    BL	= 194,
    BL8	= 195,
    BL8_NOP	= 196,
    BL8_NOP_TLS	= 197,
    BL8_TLS	= 198,
    BL8_TLS_	= 199,
    BLA	= 200,
    BLA8	= 201,
    BLA8_NOP	= 202,
    BLR	= 203,
    BLR8	= 204,
    BLRL	= 205,
    BL_TLS	= 206,
    BRINC	= 207,
    CLRLSLDI	= 208,
    CLRLSLDIo	= 209,
    CLRLSLWI	= 210,
    CLRLSLWIo	= 211,
    CLRRDI	= 212,
    CLRRDIo	= 213,
    CLRRWI	= 214,
    CLRRWIo	= 215,
    CMPB	= 216,
    CMPB8	= 217,
    CMPD	= 218,
    CMPDI	= 219,
    CMPLD	= 220,
    CMPLDI	= 221,
    CMPLW	= 222,
    CMPLWI	= 223,
    CMPW	= 224,
    CMPWI	= 225,
    CNTLZD	= 226,
    CNTLZDo	= 227,
    CNTLZW	= 228,
    CNTLZW8	= 229,
    CNTLZW8o	= 230,
    CNTLZWo	= 231,
    CR6SET	= 232,
    CR6UNSET	= 233,
    CRAND	= 234,
    CRANDC	= 235,
    CREQV	= 236,
    CRNAND	= 237,
    CRNOR	= 238,
    CROR	= 239,
    CRORC	= 240,
    CRSET	= 241,
    CRUNSET	= 242,
    CRXOR	= 243,
    DCBA	= 244,
    DCBF	= 245,
    DCBI	= 246,
    DCBST	= 247,
    DCBT	= 248,
    DCBTST	= 249,
    DCBZ	= 250,
    DCBZL	= 251,
    DCCCI	= 252,
    DIVD	= 253,
    DIVDU	= 254,
    DIVDUo	= 255,
    DIVDo	= 256,
    DIVW	= 257,
    DIVWU	= 258,
    DIVWUo	= 259,
    DIVWo	= 260,
    DSS	= 261,
    DSSALL	= 262,
    DST	= 263,
    DST64	= 264,
    DSTST	= 265,
    DSTST64	= 266,
    DSTSTT	= 267,
    DSTSTT64	= 268,
    DSTT	= 269,
    DSTT64	= 270,
    DYNALLOC	= 271,
    DYNALLOC8	= 272,
    EH_SjLj_LongJmp32	= 273,
    EH_SjLj_LongJmp64	= 274,
    EH_SjLj_SetJmp32	= 275,
    EH_SjLj_SetJmp64	= 276,
    EH_SjLj_Setup	= 277,
    EQV	= 278,
    EQV8	= 279,
    EQV8o	= 280,
    EQVo	= 281,
    EVABS	= 282,
    EVADDIW	= 283,
    EVADDSMIAAW	= 284,
    EVADDSSIAAW	= 285,
    EVADDUMIAAW	= 286,
    EVADDUSIAAW	= 287,
    EVADDW	= 288,
    EVAND	= 289,
    EVANDC	= 290,
    EVCMPEQ	= 291,
    EVCMPGTS	= 292,
    EVCMPGTU	= 293,
    EVCMPLTS	= 294,
    EVCMPLTU	= 295,
    EVCNTLSW	= 296,
    EVCNTLZW	= 297,
    EVDIVWS	= 298,
    EVDIVWU	= 299,
    EVEQV	= 300,
    EVEXTSB	= 301,
    EVEXTSH	= 302,
    EVLDD	= 303,
    EVLDDX	= 304,
    EVLDH	= 305,
    EVLDHX	= 306,
    EVLDW	= 307,
    EVLDWX	= 308,
    EVLHHESPLAT	= 309,
    EVLHHESPLATX	= 310,
    EVLHHOSSPLAT	= 311,
    EVLHHOSSPLATX	= 312,
    EVLHHOUSPLAT	= 313,
    EVLHHOUSPLATX	= 314,
    EVLWHE	= 315,
    EVLWHEX	= 316,
    EVLWHOS	= 317,
    EVLWHOSX	= 318,
    EVLWHOU	= 319,
    EVLWHOUX	= 320,
    EVLWHSPLAT	= 321,
    EVLWHSPLATX	= 322,
    EVLWWSPLAT	= 323,
    EVLWWSPLATX	= 324,
    EVMERGEHI	= 325,
    EVMERGEHILO	= 326,
    EVMERGELO	= 327,
    EVMERGELOHI	= 328,
    EVMHEGSMFAA	= 329,
    EVMHEGSMFAN	= 330,
    EVMHEGSMIAA	= 331,
    EVMHEGSMIAN	= 332,
    EVMHEGUMIAA	= 333,
    EVMHEGUMIAN	= 334,
    EVMHESMF	= 335,
    EVMHESMFA	= 336,
    EVMHESMFAAW	= 337,
    EVMHESMFANW	= 338,
    EVMHESMI	= 339,
    EVMHESMIA	= 340,
    EVMHESMIAAW	= 341,
    EVMHESMIANW	= 342,
    EVMHESSF	= 343,
    EVMHESSFA	= 344,
    EVMHESSFAAW	= 345,
    EVMHESSFANW	= 346,
    EVMHESSIAAW	= 347,
    EVMHESSIANW	= 348,
    EVMHEUMI	= 349,
    EVMHEUMIA	= 350,
    EVMHEUMIAAW	= 351,
    EVMHEUMIANW	= 352,
    EVMHEUSIAAW	= 353,
    EVMHEUSIANW	= 354,
    EVMHOGSMFAA	= 355,
    EVMHOGSMFAN	= 356,
    EVMHOGSMIAA	= 357,
    EVMHOGSMIAN	= 358,
    EVMHOGUMIAA	= 359,
    EVMHOGUMIAN	= 360,
    EVMHOSMF	= 361,
    EVMHOSMFA	= 362,
    EVMHOSMFAAW	= 363,
    EVMHOSMFANW	= 364,
    EVMHOSMI	= 365,
    EVMHOSMIA	= 366,
    EVMHOSMIAAW	= 367,
    EVMHOSMIANW	= 368,
    EVMHOSSF	= 369,
    EVMHOSSFA	= 370,
    EVMHOSSFAAW	= 371,
    EVMHOSSFANW	= 372,
    EVMHOSSIAAW	= 373,
    EVMHOSSIANW	= 374,
    EVMHOUMI	= 375,
    EVMHOUMIA	= 376,
    EVMHOUMIAAW	= 377,
    EVMHOUMIANW	= 378,
    EVMHOUSIAAW	= 379,
    EVMHOUSIANW	= 380,
    EVMRA	= 381,
    EVMWHSMF	= 382,
    EVMWHSMFA	= 383,
    EVMWHSMI	= 384,
    EVMWHSMIA	= 385,
    EVMWHSSF	= 386,
    EVMWHSSFA	= 387,
    EVMWHUMI	= 388,
    EVMWHUMIA	= 389,
    EVMWLSMIAAW	= 390,
    EVMWLSMIANW	= 391,
    EVMWLSSIAAW	= 392,
    EVMWLSSIANW	= 393,
    EVMWLUMI	= 394,
    EVMWLUMIA	= 395,
    EVMWLUMIAAW	= 396,
    EVMWLUMIANW	= 397,
    EVMWLUSIAAW	= 398,
    EVMWLUSIANW	= 399,
    EVMWSMF	= 400,
    EVMWSMFA	= 401,
    EVMWSMFAA	= 402,
    EVMWSMFAN	= 403,
    EVMWSMI	= 404,
    EVMWSMIA	= 405,
    EVMWSMIAA	= 406,
    EVMWSMIAN	= 407,
    EVMWSSF	= 408,
    EVMWSSFA	= 409,
    EVMWSSFAA	= 410,
    EVMWSSFAN	= 411,
    EVMWUMI	= 412,
    EVMWUMIA	= 413,
    EVMWUMIAA	= 414,
    EVMWUMIAN	= 415,
    EVNAND	= 416,
    EVNEG	= 417,
    EVNOR	= 418,
    EVOR	= 419,
    EVORC	= 420,
    EVRLW	= 421,
    EVRLWI	= 422,
    EVRNDW	= 423,
    EVSLW	= 424,
    EVSLWI	= 425,
    EVSPLATFI	= 426,
    EVSPLATI	= 427,
    EVSRWIS	= 428,
    EVSRWIU	= 429,
    EVSRWS	= 430,
    EVSRWU	= 431,
    EVSTDD	= 432,
    EVSTDDX	= 433,
    EVSTDH	= 434,
    EVSTDHX	= 435,
    EVSTDW	= 436,
    EVSTDWX	= 437,
    EVSTWHE	= 438,
    EVSTWHEX	= 439,
    EVSTWHO	= 440,
    EVSTWHOX	= 441,
    EVSTWWE	= 442,
    EVSTWWEX	= 443,
    EVSTWWO	= 444,
    EVSTWWOX	= 445,
    EVSUBFSMIAAW	= 446,
    EVSUBFSSIAAW	= 447,
    EVSUBFUMIAAW	= 448,
    EVSUBFUSIAAW	= 449,
    EVSUBFW	= 450,
    EVSUBIFW	= 451,
    EVXOR	= 452,
    EXTLDI	= 453,
    EXTLDIo	= 454,
    EXTLWI	= 455,
    EXTLWIo	= 456,
    EXTRDI	= 457,
    EXTRDIo	= 458,
    EXTRWI	= 459,
    EXTRWIo	= 460,
    EXTSB	= 461,
    EXTSB8	= 462,
    EXTSB8_32_64	= 463,
    EXTSB8o	= 464,
    EXTSBo	= 465,
    EXTSH	= 466,
    EXTSH8	= 467,
    EXTSH8_32_64	= 468,
    EXTSH8o	= 469,
    EXTSHo	= 470,
    EXTSW	= 471,
    EXTSW_32_64	= 472,
    EXTSW_32_64o	= 473,
    EXTSWo	= 474,
    EnforceIEIO	= 475,
    FABSD	= 476,
    FABSDo	= 477,
    FABSS	= 478,
    FABSSo	= 479,
    FADD	= 480,
    FADDS	= 481,
    FADDSo	= 482,
    FADDo	= 483,
    FADDrtz	= 484,
    FCFID	= 485,
    FCFIDS	= 486,
    FCFIDSo	= 487,
    FCFIDU	= 488,
    FCFIDUS	= 489,
    FCFIDUSo	= 490,
    FCFIDUo	= 491,
    FCFIDo	= 492,
    FCMPUD	= 493,
    FCMPUS	= 494,
    FCPSGND	= 495,
    FCPSGNDo	= 496,
    FCPSGNS	= 497,
    FCPSGNSo	= 498,
    FCTID	= 499,
    FCTIDUZ	= 500,
    FCTIDUZo	= 501,
    FCTIDZ	= 502,
    FCTIDZo	= 503,
    FCTIDo	= 504,
    FCTIW	= 505,
    FCTIWUZ	= 506,
    FCTIWUZo	= 507,
    FCTIWZ	= 508,
    FCTIWZo	= 509,
    FCTIWo	= 510,
    FDIV	= 511,
    FDIVS	= 512,
    FDIVSo	= 513,
    FDIVo	= 514,
    FMADD	= 515,
    FMADDS	= 516,
    FMADDSo	= 517,
    FMADDo	= 518,
    FMR	= 519,
    FMRo	= 520,
    FMSUB	= 521,
    FMSUBS	= 522,
    FMSUBSo	= 523,
    FMSUBo	= 524,
    FMUL	= 525,
    FMULS	= 526,
    FMULSo	= 527,
    FMULo	= 528,
    FNABSD	= 529,
    FNABSDo	= 530,
    FNABSS	= 531,
    FNABSSo	= 532,
    FNEGD	= 533,
    FNEGDo	= 534,
    FNEGS	= 535,
    FNEGSo	= 536,
    FNMADD	= 537,
    FNMADDS	= 538,
    FNMADDSo	= 539,
    FNMADDo	= 540,
    FNMSUB	= 541,
    FNMSUBS	= 542,
    FNMSUBSo	= 543,
    FNMSUBo	= 544,
    FRE	= 545,
    FRES	= 546,
    FRESo	= 547,
    FREo	= 548,
    FRIMD	= 549,
    FRIMDo	= 550,
    FRIMS	= 551,
    FRIMSo	= 552,
    FRIND	= 553,
    FRINDo	= 554,
    FRINS	= 555,
    FRINSo	= 556,
    FRIPD	= 557,
    FRIPDo	= 558,
    FRIPS	= 559,
    FRIPSo	= 560,
    FRIZD	= 561,
    FRIZDo	= 562,
    FRIZS	= 563,
    FRIZSo	= 564,
    FRSP	= 565,
    FRSPo	= 566,
    FRSQRTE	= 567,
    FRSQRTES	= 568,
    FRSQRTESo	= 569,
    FRSQRTEo	= 570,
    FSELD	= 571,
    FSELDo	= 572,
    FSELS	= 573,
    FSELSo	= 574,
    FSQRT	= 575,
    FSQRTS	= 576,
    FSQRTSo	= 577,
    FSQRTo	= 578,
    FSUB	= 579,
    FSUBS	= 580,
    FSUBSo	= 581,
    FSUBo	= 582,
    GETtlsADDR	= 583,
    GETtlsADDR32	= 584,
    GETtlsldADDR	= 585,
    GETtlsldADDR32	= 586,
    ICBI	= 587,
    ICBT	= 588,
    ICCCI	= 589,
    INSLWI	= 590,
    INSLWIo	= 591,
    INSRDI	= 592,
    INSRDIo	= 593,
    INSRWI	= 594,
    INSRWIo	= 595,
    ISEL	= 596,
    ISEL8	= 597,
    ISYNC	= 598,
    LA	= 599,
    LAx	= 600,
    LBZ	= 601,
    LBZ8	= 602,
    LBZCIX	= 603,
    LBZU	= 604,
    LBZU8	= 605,
    LBZUX	= 606,
    LBZUX8	= 607,
    LBZX	= 608,
    LBZX8	= 609,
    LD	= 610,
    LDARX	= 611,
    LDBRX	= 612,
    LDCIX	= 613,
    LDU	= 614,
    LDUX	= 615,
    LDX	= 616,
    LDgotTprelL	= 617,
    LDgotTprelL32	= 618,
    LDtoc	= 619,
    LDtocBA	= 620,
    LDtocCPT	= 621,
    LDtocJTI	= 622,
    LDtocL	= 623,
    LFD	= 624,
    LFDU	= 625,
    LFDUX	= 626,
    LFDX	= 627,
    LFIWAX	= 628,
    LFIWZX	= 629,
    LFS	= 630,
    LFSU	= 631,
    LFSUX	= 632,
    LFSX	= 633,
    LHA	= 634,
    LHA8	= 635,
    LHAU	= 636,
    LHAU8	= 637,
    LHAUX	= 638,
    LHAUX8	= 639,
    LHAX	= 640,
    LHAX8	= 641,
    LHBRX	= 642,
    LHBRX8	= 643,
    LHZ	= 644,
    LHZ8	= 645,
    LHZCIX	= 646,
    LHZU	= 647,
    LHZU8	= 648,
    LHZUX	= 649,
    LHZUX8	= 650,
    LHZX	= 651,
    LHZX8	= 652,
    LI	= 653,
    LI8	= 654,
    LIS	= 655,
    LIS8	= 656,
    LMW	= 657,
    LSWI	= 658,
    LVEBX	= 659,
    LVEHX	= 660,
    LVEWX	= 661,
    LVSL	= 662,
    LVSR	= 663,
    LVX	= 664,
    LVXL	= 665,
    LWA	= 666,
    LWARX	= 667,
    LWAUX	= 668,
    LWAX	= 669,
    LWAX_32	= 670,
    LWA_32	= 671,
    LWBRX	= 672,
    LWBRX8	= 673,
    LWZ	= 674,
    LWZ8	= 675,
    LWZCIX	= 676,
    LWZU	= 677,
    LWZU8	= 678,
    LWZUX	= 679,
    LWZUX8	= 680,
    LWZX	= 681,
    LWZX8	= 682,
    LWZtoc	= 683,
    LXSDX	= 684,
    LXVD2X	= 685,
    LXVDSX	= 686,
    LXVW4X	= 687,
    MBAR	= 688,
    MCRF	= 689,
    MCRFS	= 690,
    MFCR	= 691,
    MFCR8	= 692,
    MFCTR	= 693,
    MFCTR8	= 694,
    MFDCR	= 695,
    MFFS	= 696,
    MFFSo	= 697,
    MFLR	= 698,
    MFLR8	= 699,
    MFMSR	= 700,
    MFOCRF	= 701,
    MFOCRF8	= 702,
    MFSPR	= 703,
    MFSR	= 704,
    MFSRIN	= 705,
    MFTB	= 706,
    MFTB8	= 707,
    MFVRSAVE	= 708,
    MFVRSAVEv	= 709,
    MFVSCR	= 710,
    MSYNC	= 711,
    MTCRF	= 712,
    MTCRF8	= 713,
    MTCTR	= 714,
    MTCTR8	= 715,
    MTCTR8loop	= 716,
    MTCTRloop	= 717,
    MTDCR	= 718,
    MTFSB0	= 719,
    MTFSB1	= 720,
    MTFSF	= 721,
    MTFSFI	= 722,
    MTFSFIo	= 723,
    MTFSFb	= 724,
    MTFSFo	= 725,
    MTLR	= 726,
    MTLR8	= 727,
    MTMSR	= 728,
    MTMSRD	= 729,
    MTOCRF	= 730,
    MTOCRF8	= 731,
    MTSPR	= 732,
    MTSR	= 733,
    MTSRIN	= 734,
    MTVRSAVE	= 735,
    MTVRSAVEv	= 736,
    MTVSCR	= 737,
    MULHD	= 738,
    MULHDU	= 739,
    MULHDUo	= 740,
    MULHDo	= 741,
    MULHW	= 742,
    MULHWU	= 743,
    MULHWUo	= 744,
    MULHWo	= 745,
    MULLD	= 746,
    MULLDo	= 747,
    MULLI	= 748,
    MULLI8	= 749,
    MULLW	= 750,
    MULLWo	= 751,
    MoveGOTtoLR	= 752,
    MovePCtoLR	= 753,
    MovePCtoLR8	= 754,
    NAND	= 755,
    NAND8	= 756,
    NAND8o	= 757,
    NANDo	= 758,
    NEG	= 759,
    NEG8	= 760,
    NEG8o	= 761,
    NEGo	= 762,
    NOP	= 763,
    NOP_GT_PWR6	= 764,
    NOP_GT_PWR7	= 765,
    NOR	= 766,
    NOR8	= 767,
    NOR8o	= 768,
    NORo	= 769,
    OR	= 770,
    OR8	= 771,
    OR8o	= 772,
    ORC	= 773,
    ORC8	= 774,
    ORC8o	= 775,
    ORCo	= 776,
    ORI	= 777,
    ORI8	= 778,
    ORIS	= 779,
    ORIS8	= 780,
    ORo	= 781,
    POPCNTD	= 782,
    POPCNTW	= 783,
    PPC32GOT	= 784,
    PPC32PICGOT	= 785,
    RESTORE_CR	= 786,
    RESTORE_CRBIT	= 787,
    RESTORE_VRSAVE	= 788,
    RFCI	= 789,
    RFDI	= 790,
    RFI	= 791,
    RFID	= 792,
    RFMCI	= 793,
    RLDCL	= 794,
    RLDCLo	= 795,
    RLDCR	= 796,
    RLDCRo	= 797,
    RLDIC	= 798,
    RLDICL	= 799,
    RLDICL_32_64	= 800,
    RLDICLo	= 801,
    RLDICR	= 802,
    RLDICRo	= 803,
    RLDICo	= 804,
    RLDIMI	= 805,
    RLDIMIo	= 806,
    RLWIMI	= 807,
    RLWIMI8	= 808,
    RLWIMI8o	= 809,
    RLWIMIo	= 810,
    RLWINM	= 811,
    RLWINM8	= 812,
    RLWINM8o	= 813,
    RLWINMo	= 814,
    RLWNM	= 815,
    RLWNM8	= 816,
    RLWNM8o	= 817,
    RLWNMo	= 818,
    ROTRDI	= 819,
    ROTRDIo	= 820,
    ROTRWI	= 821,
    ROTRWIo	= 822,
    ReadTB	= 823,
    SC	= 824,
    SELECT_CC_F4	= 825,
    SELECT_CC_F8	= 826,
    SELECT_CC_I4	= 827,
    SELECT_CC_I8	= 828,
    SELECT_CC_VRRC	= 829,
    SELECT_CC_VSFRC	= 830,
    SELECT_CC_VSRC	= 831,
    SELECT_F4	= 832,
    SELECT_F8	= 833,
    SELECT_I4	= 834,
    SELECT_I8	= 835,
    SELECT_VRRC	= 836,
    SELECT_VSFRC	= 837,
    SELECT_VSRC	= 838,
    SLBIA	= 839,
    SLBIE	= 840,
    SLBMFEE	= 841,
    SLBMTE	= 842,
    SLD	= 843,
    SLDI	= 844,
    SLDIo	= 845,
    SLDo	= 846,
    SLW	= 847,
    SLW8	= 848,
    SLW8o	= 849,
    SLWI	= 850,
    SLWIo	= 851,
    SLWo	= 852,
    SPILL_CR	= 853,
    SPILL_CRBIT	= 854,
    SPILL_VRSAVE	= 855,
    SRAD	= 856,
    SRADI	= 857,
    SRADIo	= 858,
    SRADo	= 859,
    SRAW	= 860,
    SRAWI	= 861,
    SRAWIo	= 862,
    SRAWo	= 863,
    SRD	= 864,
    SRDI	= 865,
    SRDIo	= 866,
    SRDo	= 867,
    SRW	= 868,
    SRW8	= 869,
    SRW8o	= 870,
    SRWI	= 871,
    SRWIo	= 872,
    SRWo	= 873,
    STB	= 874,
    STB8	= 875,
    STBCIX	= 876,
    STBU	= 877,
    STBU8	= 878,
    STBUX	= 879,
    STBUX8	= 880,
    STBX	= 881,
    STBX8	= 882,
    STD	= 883,
    STDBRX	= 884,
    STDCIX	= 885,
    STDCX	= 886,
    STDU	= 887,
    STDUX	= 888,
    STDX	= 889,
    STFD	= 890,
    STFDU	= 891,
    STFDUX	= 892,
    STFDX	= 893,
    STFIWX	= 894,
    STFS	= 895,
    STFSU	= 896,
    STFSUX	= 897,
    STFSX	= 898,
    STH	= 899,
    STH8	= 900,
    STHBRX	= 901,
    STHCIX	= 902,
    STHU	= 903,
    STHU8	= 904,
    STHUX	= 905,
    STHUX8	= 906,
    STHX	= 907,
    STHX8	= 908,
    STMW	= 909,
    STSWI	= 910,
    STVEBX	= 911,
    STVEHX	= 912,
    STVEWX	= 913,
    STVX	= 914,
    STVXL	= 915,
    STW	= 916,
    STW8	= 917,
    STWBRX	= 918,
    STWCIX	= 919,
    STWCX	= 920,
    STWU	= 921,
    STWU8	= 922,
    STWUX	= 923,
    STWUX8	= 924,
    STWX	= 925,
    STWX8	= 926,
    STXSDX	= 927,
    STXVD2X	= 928,
    STXVW4X	= 929,
    SUBF	= 930,
    SUBF8	= 931,
    SUBF8o	= 932,
    SUBFC	= 933,
    SUBFC8	= 934,
    SUBFC8o	= 935,
    SUBFCo	= 936,
    SUBFE	= 937,
    SUBFE8	= 938,
    SUBFE8o	= 939,
    SUBFEo	= 940,
    SUBFIC	= 941,
    SUBFIC8	= 942,
    SUBFME	= 943,
    SUBFME8	= 944,
    SUBFME8o	= 945,
    SUBFMEo	= 946,
    SUBFZE	= 947,
    SUBFZE8	= 948,
    SUBFZE8o	= 949,
    SUBFZEo	= 950,
    SUBFo	= 951,
    SUBI	= 952,
    SUBIC	= 953,
    SUBICo	= 954,
    SUBIS	= 955,
    SYNC	= 956,
    TAILB	= 957,
    TAILB8	= 958,
    TAILBA	= 959,
    TAILBA8	= 960,
    TAILBCTR	= 961,
    TAILBCTR8	= 962,
    TCRETURNai	= 963,
    TCRETURNai8	= 964,
    TCRETURNdi	= 965,
    TCRETURNdi8	= 966,
    TCRETURNri	= 967,
    TCRETURNri8	= 968,
    TD	= 969,
    TDI	= 970,
    TLBIA	= 971,
    TLBIE	= 972,
    TLBIEL	= 973,
    TLBIVAX	= 974,
    TLBLD	= 975,
    TLBLI	= 976,
    TLBRE	= 977,
    TLBRE2	= 978,
    TLBSX	= 979,
    TLBSX2	= 980,
    TLBSX2D	= 981,
    TLBSYNC	= 982,
    TLBWE	= 983,
    TLBWE2	= 984,
    TRAP	= 985,
    TW	= 986,
    TWI	= 987,
    UPDATE_VRSAVE	= 988,
    UpdateGBR	= 989,
    VADDCUW	= 990,
    VADDFP	= 991,
    VADDSBS	= 992,
    VADDSHS	= 993,
    VADDSWS	= 994,
    VADDUBM	= 995,
    VADDUBS	= 996,
    VADDUHM	= 997,
    VADDUHS	= 998,
    VADDUWM	= 999,
    VADDUWS	= 1000,
    VAND	= 1001,
    VANDC	= 1002,
    VAVGSB	= 1003,
    VAVGSH	= 1004,
    VAVGSW	= 1005,
    VAVGUB	= 1006,
    VAVGUH	= 1007,
    VAVGUW	= 1008,
    VCFSX	= 1009,
    VCFSX_0	= 1010,
    VCFUX	= 1011,
    VCFUX_0	= 1012,
    VCLZB	= 1013,
    VCLZD	= 1014,
    VCLZH	= 1015,
    VCLZW	= 1016,
    VCMPBFP	= 1017,
    VCMPBFPo	= 1018,
    VCMPEQFP	= 1019,
    VCMPEQFPo	= 1020,
    VCMPEQUB	= 1021,
    VCMPEQUBo	= 1022,
    VCMPEQUH	= 1023,
    VCMPEQUHo	= 1024,
    VCMPEQUW	= 1025,
    VCMPEQUWo	= 1026,
    VCMPGEFP	= 1027,
    VCMPGEFPo	= 1028,
    VCMPGTFP	= 1029,
    VCMPGTFPo	= 1030,
    VCMPGTSB	= 1031,
    VCMPGTSBo	= 1032,
    VCMPGTSH	= 1033,
    VCMPGTSHo	= 1034,
    VCMPGTSW	= 1035,
    VCMPGTSWo	= 1036,
    VCMPGTUB	= 1037,
    VCMPGTUBo	= 1038,
    VCMPGTUH	= 1039,
    VCMPGTUHo	= 1040,
    VCMPGTUW	= 1041,
    VCMPGTUWo	= 1042,
    VCTSXS	= 1043,
    VCTSXS_0	= 1044,
    VCTUXS	= 1045,
    VCTUXS_0	= 1046,
    VEQV	= 1047,
    VEXPTEFP	= 1048,
    VLOGEFP	= 1049,
    VMADDFP	= 1050,
    VMAXFP	= 1051,
    VMAXSB	= 1052,
    VMAXSH	= 1053,
    VMAXSW	= 1054,
    VMAXUB	= 1055,
    VMAXUH	= 1056,
    VMAXUW	= 1057,
    VMHADDSHS	= 1058,
    VMHRADDSHS	= 1059,
    VMINFP	= 1060,
    VMINSB	= 1061,
    VMINSH	= 1062,
    VMINSW	= 1063,
    VMINUB	= 1064,
    VMINUH	= 1065,
    VMINUW	= 1066,
    VMLADDUHM	= 1067,
    VMRGHB	= 1068,
    VMRGHH	= 1069,
    VMRGHW	= 1070,
    VMRGLB	= 1071,
    VMRGLH	= 1072,
    VMRGLW	= 1073,
    VMSUMMBM	= 1074,
    VMSUMSHM	= 1075,
    VMSUMSHS	= 1076,
    VMSUMUBM	= 1077,
    VMSUMUHM	= 1078,
    VMSUMUHS	= 1079,
    VMULESB	= 1080,
    VMULESH	= 1081,
    VMULEUB	= 1082,
    VMULEUH	= 1083,
    VMULOSB	= 1084,
    VMULOSH	= 1085,
    VMULOUB	= 1086,
    VMULOUH	= 1087,
    VNAND	= 1088,
    VNMSUBFP	= 1089,
    VNOR	= 1090,
    VOR	= 1091,
    VORC	= 1092,
    VPERM	= 1093,
    VPKPX	= 1094,
    VPKSHSS	= 1095,
    VPKSHUS	= 1096,
    VPKSWSS	= 1097,
    VPKSWUS	= 1098,
    VPKUHUM	= 1099,
    VPKUHUS	= 1100,
    VPKUWUM	= 1101,
    VPKUWUS	= 1102,
    VPOPCNTB	= 1103,
    VPOPCNTD	= 1104,
    VPOPCNTH	= 1105,
    VPOPCNTW	= 1106,
    VREFP	= 1107,
    VRFIM	= 1108,
    VRFIN	= 1109,
    VRFIP	= 1110,
    VRFIZ	= 1111,
    VRLB	= 1112,
    VRLH	= 1113,
    VRLW	= 1114,
    VRSQRTEFP	= 1115,
    VSEL	= 1116,
    VSL	= 1117,
    VSLB	= 1118,
    VSLDOI	= 1119,
    VSLH	= 1120,
    VSLO	= 1121,
    VSLW	= 1122,
    VSPLTB	= 1123,
    VSPLTH	= 1124,
    VSPLTISB	= 1125,
    VSPLTISH	= 1126,
    VSPLTISW	= 1127,
    VSPLTW	= 1128,
    VSR	= 1129,
    VSRAB	= 1130,
    VSRAH	= 1131,
    VSRAW	= 1132,
    VSRB	= 1133,
    VSRH	= 1134,
    VSRO	= 1135,
    VSRW	= 1136,
    VSUBCUW	= 1137,
    VSUBFP	= 1138,
    VSUBSBS	= 1139,
    VSUBSHS	= 1140,
    VSUBSWS	= 1141,
    VSUBUBM	= 1142,
    VSUBUBS	= 1143,
    VSUBUHM	= 1144,
    VSUBUHS	= 1145,
    VSUBUWM	= 1146,
    VSUBUWS	= 1147,
    VSUM2SWS	= 1148,
    VSUM4SBS	= 1149,
    VSUM4SHS	= 1150,
    VSUM4UBS	= 1151,
    VSUMSWS	= 1152,
    VUPKHPX	= 1153,
    VUPKHSB	= 1154,
    VUPKHSH	= 1155,
    VUPKLPX	= 1156,
    VUPKLSB	= 1157,
    VUPKLSH	= 1158,
    VXOR	= 1159,
    V_SET0	= 1160,
    V_SET0B	= 1161,
    V_SET0H	= 1162,
    V_SETALLONES	= 1163,
    V_SETALLONESB	= 1164,
    V_SETALLONESH	= 1165,
    WAIT	= 1166,
    WRTEE	= 1167,
    WRTEEI	= 1168,
    XOR	= 1169,
    XOR8	= 1170,
    XOR8o	= 1171,
    XORI	= 1172,
    XORI8	= 1173,
    XORIS	= 1174,
    XORIS8	= 1175,
    XORo	= 1176,
    XSABSDP	= 1177,
    XSADDDP	= 1178,
    XSCMPODP	= 1179,
    XSCMPUDP	= 1180,
    XSCPSGNDP	= 1181,
    XSCVDPSP	= 1182,
    XSCVDPSXDS	= 1183,
    XSCVDPSXWS	= 1184,
    XSCVDPUXDS	= 1185,
    XSCVDPUXWS	= 1186,
    XSCVSPDP	= 1187,
    XSCVSXDDP	= 1188,
    XSCVUXDDP	= 1189,
    XSDIVDP	= 1190,
    XSMADDADP	= 1191,
    XSMADDMDP	= 1192,
    XSMAXDP	= 1193,
    XSMINDP	= 1194,
    XSMSUBADP	= 1195,
    XSMSUBMDP	= 1196,
    XSMULDP	= 1197,
    XSNABSDP	= 1198,
    XSNEGDP	= 1199,
    XSNMADDADP	= 1200,
    XSNMADDMDP	= 1201,
    XSNMSUBADP	= 1202,
    XSNMSUBMDP	= 1203,
    XSRDPI	= 1204,
    XSRDPIC	= 1205,
    XSRDPIM	= 1206,
    XSRDPIP	= 1207,
    XSRDPIZ	= 1208,
    XSREDP	= 1209,
    XSRSQRTEDP	= 1210,
    XSSQRTDP	= 1211,
    XSSUBDP	= 1212,
    XSTDIVDP	= 1213,
    XSTSQRTDP	= 1214,
    XVABSDP	= 1215,
    XVABSSP	= 1216,
    XVADDDP	= 1217,
    XVADDSP	= 1218,
    XVCMPEQDP	= 1219,
    XVCMPEQDPo	= 1220,
    XVCMPEQSP	= 1221,
    XVCMPEQSPo	= 1222,
    XVCMPGEDP	= 1223,
    XVCMPGEDPo	= 1224,
    XVCMPGESP	= 1225,
    XVCMPGESPo	= 1226,
    XVCMPGTDP	= 1227,
    XVCMPGTDPo	= 1228,
    XVCMPGTSP	= 1229,
    XVCMPGTSPo	= 1230,
    XVCPSGNDP	= 1231,
    XVCPSGNSP	= 1232,
    XVCVDPSP	= 1233,
    XVCVDPSXDS	= 1234,
    XVCVDPSXWS	= 1235,
    XVCVDPUXDS	= 1236,
    XVCVDPUXWS	= 1237,
    XVCVSPDP	= 1238,
    XVCVSPSXDS	= 1239,
    XVCVSPSXWS	= 1240,
    XVCVSPUXDS	= 1241,
    XVCVSPUXWS	= 1242,
    XVCVSXDDP	= 1243,
    XVCVSXDSP	= 1244,
    XVCVSXWDP	= 1245,
    XVCVSXWSP	= 1246,
    XVCVUXDDP	= 1247,
    XVCVUXDSP	= 1248,
    XVCVUXWDP	= 1249,
    XVCVUXWSP	= 1250,
    XVDIVDP	= 1251,
    XVDIVSP	= 1252,
    XVMADDADP	= 1253,
    XVMADDASP	= 1254,
    XVMADDMDP	= 1255,
    XVMADDMSP	= 1256,
    XVMAXDP	= 1257,
    XVMAXSP	= 1258,
    XVMINDP	= 1259,
    XVMINSP	= 1260,
    XVMSUBADP	= 1261,
    XVMSUBASP	= 1262,
    XVMSUBMDP	= 1263,
    XVMSUBMSP	= 1264,
    XVMULDP	= 1265,
    XVMULSP	= 1266,
    XVNABSDP	= 1267,
    XVNABSSP	= 1268,
    XVNEGDP	= 1269,
    XVNEGSP	= 1270,
    XVNMADDADP	= 1271,
    XVNMADDASP	= 1272,
    XVNMADDMDP	= 1273,
    XVNMADDMSP	= 1274,
    XVNMSUBADP	= 1275,
    XVNMSUBASP	= 1276,
    XVNMSUBMDP	= 1277,
    XVNMSUBMSP	= 1278,
    XVRDPI	= 1279,
    XVRDPIC	= 1280,
    XVRDPIM	= 1281,
    XVRDPIP	= 1282,
    XVRDPIZ	= 1283,
    XVREDP	= 1284,
    XVRESP	= 1285,
    XVRSPI	= 1286,
    XVRSPIC	= 1287,
    XVRSPIM	= 1288,
    XVRSPIP	= 1289,
    XVRSPIZ	= 1290,
    XVRSQRTEDP	= 1291,
    XVRSQRTESP	= 1292,
    XVSQRTDP	= 1293,
    XVSQRTSP	= 1294,
    XVSUBDP	= 1295,
    XVSUBSP	= 1296,
    XVTDIVDP	= 1297,
    XVTDIVSP	= 1298,
    XVTSQRTDP	= 1299,
    XVTSQRTSP	= 1300,
    XXLAND	= 1301,
    XXLANDC	= 1302,
    XXLNOR	= 1303,
    XXLOR	= 1304,
    XXLORf	= 1305,
    XXLXOR	= 1306,
    XXMRGHW	= 1307,
    XXMRGLW	= 1308,
    XXPERMDI	= 1309,
    XXSEL	= 1310,
    XXSLDWI	= 1311,
    XXSPLTW	= 1312,
    gBC	= 1313,
    gBCA	= 1314,
    gBCCTR	= 1315,
    gBCCTRL	= 1316,
    gBCL	= 1317,
    gBCLA	= 1318,
    gBCLR	= 1319,
    gBCLRL	= 1320,
    INSTRUCTION_LIST_END = 1321
  };

namespace Sched {
  enum {
    NoInstrModel	= 0,
    IIC_IntSimple	= 1,
    IIC_IntGeneral	= 2,
    IIC_BrB	= 3,
    IIC_VecFP	= 4,
    IIC_IntCompare	= 5,
    IIC_BrCR	= 6,
    IIC_LdStDCBF	= 7,
    IIC_LdStLoad	= 8,
    IIC_IntDivD	= 9,
    IIC_IntDivW	= 10,
    IIC_FPGeneral	= 11,
    IIC_FPAddSub	= 12,
    IIC_FPCompare	= 13,
    IIC_FPDivD	= 14,
    IIC_FPDivS	= 15,
    IIC_FPFused	= 16,
    IIC_FPSqrtD	= 17,
    IIC_FPSqrtS	= 18,
    IIC_LdStICBI	= 19,
    IIC_IntISEL	= 20,
    IIC_SprISYNC	= 21,
    IIC_LdStLoadUpd	= 22,
    IIC_LdStLoadUpdX	= 23,
    IIC_LdStLD	= 24,
    IIC_LdStLDARX	= 25,
    IIC_LdStLDU	= 26,
    IIC_LdStLDUX	= 27,
    IIC_LdStLFD	= 28,
    IIC_LdStLFDU	= 29,
    IIC_LdStLFDUX	= 30,
    IIC_LdStLHA	= 31,
    IIC_LdStLHAU	= 32,
    IIC_LdStLHAUX	= 33,
    IIC_LdStLMW	= 34,
    IIC_LdStLWA	= 35,
    IIC_LdStLWARX	= 36,
    IIC_BrMCR	= 37,
    IIC_SprMFCR	= 38,
    IIC_SprMFSPR	= 39,
    IIC_IntMFFS	= 40,
    IIC_SprMFMSR	= 41,
    IIC_SprMFCRF	= 42,
    IIC_SprMFSR	= 43,
    IIC_SprMFTB	= 44,
    IIC_LdStStore	= 45,
    IIC_LdStSync	= 46,
    IIC_BrMCRX	= 47,
    IIC_SprMTSPR	= 48,
    IIC_IntMTFSB0	= 49,
    IIC_SprMTMSR	= 50,
    IIC_SprMTMSRD	= 51,
    IIC_SprMTSR	= 52,
    IIC_IntMulHW	= 53,
    IIC_IntMulHWU	= 54,
    IIC_IntMulHD	= 55,
    IIC_IntMulLI	= 56,
    IIC_SprRFI	= 57,
    IIC_IntRFID	= 58,
    IIC_IntRotateD	= 59,
    IIC_IntRotateDI	= 60,
    IIC_IntRotate	= 61,
    IIC_SprSLBIA	= 62,
    IIC_SprSLBIE	= 63,
    IIC_SprSLBMFEE	= 64,
    IIC_SprSLBMTE	= 65,
    IIC_IntShift	= 66,
    IIC_LdStStoreUpd	= 67,
    IIC_LdStSTD	= 68,
    IIC_LdStSTDCX	= 69,
    IIC_LdStSTDU	= 70,
    IIC_LdStSTDUX	= 71,
    IIC_LdStSTFD	= 72,
    IIC_LdStSTFDU	= 73,
    IIC_LdStSTWCX	= 74,
    IIC_IntTrapD	= 75,
    IIC_SprTLBIA	= 76,
    IIC_SprTLBIE	= 77,
    IIC_SprTLBIEL	= 78,
    IIC_SprTLBSYNC	= 79,
    IIC_IntTrapW	= 80,
    IIC_VecGeneral	= 81,
    IIC_VecFPCompare	= 82,
    IIC_VecPerm	= 83,
    SCHED_LIST_END = 84
  };
} // End Sched namespace
} // End PPC namespace
} // End llvm namespace 
#endif // GET_INSTRINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Descriptors                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_MC_DESC
#undef GET_INSTRINFO_MC_DESC
namespace llvm {

static const uint16_t ImplicitList1[] = { PPC::CR0, 0 };
static const uint16_t ImplicitList2[] = { PPC::CARRY, 0 };
static const uint16_t ImplicitList3[] = { PPC::CARRY, PPC::CR0, 0 };
static const uint16_t ImplicitList4[] = { PPC::X0, PPC::X3, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X11, PPC::X12, PPC::LR8, PPC::CTR8, PPC::CR0, PPC::CR1, PPC::CR5, PPC::CR6, PPC::CR7, 0 };
static const uint16_t ImplicitList5[] = { PPC::R0, PPC::R3, PPC::R4, PPC::R5, PPC::R6, PPC::R7, PPC::R8, PPC::R9, PPC::R10, PPC::R11, PPC::R12, PPC::LR, PPC::CTR, PPC::CR0, PPC::CR1, PPC::CR5, PPC::CR6, PPC::CR7, 0 };
static const uint16_t ImplicitList6[] = { PPC::R1, 0 };
static const uint16_t ImplicitList7[] = { PPC::CTR, 0 };
static const uint16_t ImplicitList8[] = { PPC::CTR8, 0 };
static const uint16_t ImplicitList9[] = { PPC::CTR, PPC::RM, 0 };
static const uint16_t ImplicitList10[] = { PPC::LR, 0 };
static const uint16_t ImplicitList11[] = { PPC::CTR8, PPC::RM, 0 };
static const uint16_t ImplicitList12[] = { PPC::LR8, 0 };
static const uint16_t ImplicitList13[] = { PPC::RM, 0 };
static const uint16_t ImplicitList14[] = { PPC::LR, PPC::RM, 0 };
static const uint16_t ImplicitList15[] = { PPC::LR8, PPC::X2, 0 };
static const uint16_t ImplicitList16[] = { PPC::CTR, PPC::LR, PPC::RM, 0 };
static const uint16_t ImplicitList17[] = { PPC::CTR8, PPC::LR8, PPC::RM, 0 };
static const uint16_t ImplicitList18[] = { PPC::LR8, PPC::RM, 0 };
static const uint16_t ImplicitList19[] = { PPC::CR1EQ, 0 };
static const uint16_t ImplicitList20[] = { PPC::X1, 0 };
static const uint16_t ImplicitList21[] = { PPC::CR1, 0 };
static const uint16_t ImplicitList22[] = { PPC::X0, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X11, PPC::X12, PPC::LR8, PPC::CTR8, PPC::CR0, PPC::CR1, PPC::CR5, PPC::CR6, PPC::CR7, 0 };
static const uint16_t ImplicitList23[] = { PPC::R0, PPC::R4, PPC::R5, PPC::R6, PPC::R7, PPC::R8, PPC::R9, PPC::R10, PPC::R11, PPC::R12, PPC::LR, PPC::CTR, PPC::CR0, PPC::CR1, PPC::CR5, PPC::CR6, PPC::CR7, 0 };
static const uint16_t ImplicitList24[] = { PPC::CR6, 0 };
static const uint16_t ImplicitList25[] = { PPC::LR, PPC::CTR, 0 };

static const MCOperandInfo OperandInfo2[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo3[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo4[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo5[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo6[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo7[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo8[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo9[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo10[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo11[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo12[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo13[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo14[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo15[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo16[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo17[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo18[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo19[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo20[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo21[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo22[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo23[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo24[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo25[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo26[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo27[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo28[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo29[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo30[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo31[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo32[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo33[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo34[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo35[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo36[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo37[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo38[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo39[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo40[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo41[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo42[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo43[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo44[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo45[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo46[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo47[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo48[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo49[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo50[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo51[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo52[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo53[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo54[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo55[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo56[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo57[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo58[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo59[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo60[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo61[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo62[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo63[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo64[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo65[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo66[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo67[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo68[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo69[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo70[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo71[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo72[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo73[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo74[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo75[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo76[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo77[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo78[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo79[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo80[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo81[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo82[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo83[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo84[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo85[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo86[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo87[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo88[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo89[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo90[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo91[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo92[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo93[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo94[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo95[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo96[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo97[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo98[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo99[] = { { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo100[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo101[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo102[] = { { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo103[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo104[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo105[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo106[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo107[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo108[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo109[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo110[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo111[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo112[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo113[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo114[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo115[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo116[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo117[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo118[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo119[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo120[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo121[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo122[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo123[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo124[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo125[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo126[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo127[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo128[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo129[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo130[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo131[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo132[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo133[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo134[] = { { PPC::CTRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo135[] = { { PPC::CTRRC8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo136[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo137[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo138[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo139[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo140[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo141[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo142[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo143[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo144[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo145[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo146[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo147[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo148[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo149[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo150[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo151[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo152[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo153[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo154[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo155[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo156[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo157[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo158[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo159[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo160[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };

extern const MCInstrDesc PPCInsts[] = {
  { 0,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #0 = PHI
  { 1,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #1 = INLINEASM
  { 2,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #2 = CFI_INSTRUCTION
  { 3,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #3 = EH_LABEL
  { 4,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #4 = GC_LABEL
  { 5,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #5 = KILL
  { 6,	3,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo3,0,nullptr },  // Inst #6 = EXTRACT_SUBREG
  { 7,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo4,0,nullptr },  // Inst #7 = INSERT_SUBREG
  { 8,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #8 = IMPLICIT_DEF
  { 9,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo6,0,nullptr },  // Inst #9 = SUBREG_TO_REG
  { 10,	3,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo3,0,nullptr },  // Inst #10 = COPY_TO_REGCLASS
  { 11,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #11 = DBG_VALUE
  { 12,	2,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo7,0,nullptr },  // Inst #12 = REG_SEQUENCE
  { 13,	2,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo7,0,nullptr },  // Inst #13 = COPY
  { 14,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #14 = BUNDLE
  { 15,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #15 = LIFETIME_START
  { 16,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #16 = LIFETIME_END
  { 17,	2,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Call)|(1<<MCID::MayLoad)|(1<<MCID::UsesCustomInserter)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo8,0,nullptr },  // Inst #17 = STACKMAP
  { 18,	6,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Call)|(1<<MCID::MayLoad)|(1<<MCID::UsesCustomInserter)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo9,0,nullptr },  // Inst #18 = PATCHPOINT
  { 19,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::Rematerializable), 0x0ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #19 = LOAD_STACK_GUARD
  { 20,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Call)|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #20 = STATEPOINT
  { 21,	2,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #21 = FRAME_ALLOC
  { 22,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #22 = ADD4
  { 23,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #23 = ADD4TLS
  { 24,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #24 = ADD4o
  { 25,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #25 = ADD8
  { 26,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #26 = ADD8TLS
  { 27,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #27 = ADD8TLS_
  { 28,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #28 = ADD8o
  { 29,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList2, OperandInfo12,0,nullptr },  // Inst #29 = ADDC
  { 30,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList2, OperandInfo14,0,nullptr },  // Inst #30 = ADDC8
  { 31,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList3, OperandInfo14,0,nullptr },  // Inst #31 = ADDC8o
  { 32,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList3, OperandInfo12,0,nullptr },  // Inst #32 = ADDCo
  { 33,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo12,0,nullptr },  // Inst #33 = ADDE
  { 34,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo14,0,nullptr },  // Inst #34 = ADDE8
  { 35,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo14,0,nullptr },  // Inst #35 = ADDE8o
  { 36,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo12,0,nullptr },  // Inst #36 = ADDEo
  { 37,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #37 = ADDI
  { 38,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #38 = ADDI8
  { 39,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList2, OperandInfo13,0,nullptr },  // Inst #39 = ADDIC
  { 40,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo15,0,nullptr },  // Inst #40 = ADDIC8
  { 41,	3,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, ImplicitList3, OperandInfo13,0,nullptr },  // Inst #41 = ADDICo
  { 42,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #42 = ADDIS
  { 43,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #43 = ADDIS8
  { 44,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #44 = ADDISdtprelHA
  { 45,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #45 = ADDISdtprelHA32
  { 46,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #46 = ADDISgotTprelHA
  { 47,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #47 = ADDIStlsgdHA
  { 48,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #48 = ADDIStlsldHA
  { 49,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #49 = ADDIStocHA
  { 50,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #50 = ADDIdtprelL
  { 51,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #51 = ADDIdtprelL32
  { 52,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #52 = ADDItlsgdL
  { 53,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #53 = ADDItlsgdL32
  { 54,	4,	1,	0,	4,	0|(1<<MCID::ExtraSrcRegAllocReq)|(1<<MCID::ExtraDefRegAllocReq), 0x0ULL, nullptr, ImplicitList4, OperandInfo18,0,nullptr },  // Inst #54 = ADDItlsgdLADDR
  { 55,	4,	1,	0,	4,	0|(1<<MCID::ExtraSrcRegAllocReq)|(1<<MCID::ExtraDefRegAllocReq), 0x0ULL, nullptr, ImplicitList5, OperandInfo19,0,nullptr },  // Inst #55 = ADDItlsgdLADDR32
  { 56,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #56 = ADDItlsldL
  { 57,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #57 = ADDItlsldL32
  { 58,	4,	1,	0,	4,	0|(1<<MCID::ExtraSrcRegAllocReq)|(1<<MCID::ExtraDefRegAllocReq), 0x0ULL, nullptr, ImplicitList4, OperandInfo18,0,nullptr },  // Inst #58 = ADDItlsldLADDR
  { 59,	4,	1,	0,	4,	0|(1<<MCID::ExtraSrcRegAllocReq)|(1<<MCID::ExtraDefRegAllocReq), 0x0ULL, nullptr, ImplicitList5, OperandInfo19,0,nullptr },  // Inst #59 = ADDItlsldLADDR32
  { 60,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #60 = ADDItocL
  { 61,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo20,0,nullptr },  // Inst #61 = ADDME
  { 62,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo21,0,nullptr },  // Inst #62 = ADDME8
  { 63,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo21,0,nullptr },  // Inst #63 = ADDME8o
  { 64,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo20,0,nullptr },  // Inst #64 = ADDMEo
  { 65,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo20,0,nullptr },  // Inst #65 = ADDZE
  { 66,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo21,0,nullptr },  // Inst #66 = ADDZE8
  { 67,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo21,0,nullptr },  // Inst #67 = ADDZE8o
  { 68,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo20,0,nullptr },  // Inst #68 = ADDZEo
  { 69,	1,	0,	0,	4,	0, 0x0ULL, ImplicitList6, ImplicitList6, OperandInfo5,0,nullptr },  // Inst #69 = ADJCALLSTACKDOWN
  { 70,	2,	0,	0,	4,	0, 0x0ULL, ImplicitList6, ImplicitList6, OperandInfo7,0,nullptr },  // Inst #70 = ADJCALLSTACKUP
  { 71,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #71 = AND
  { 72,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #72 = AND8
  { 73,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #73 = AND8o
  { 74,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #74 = ANDC
  { 75,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #75 = ANDC8
  { 76,	3,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #76 = ANDC8o
  { 77,	3,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #77 = ANDCo
  { 78,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #78 = ANDISo
  { 79,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo15,0,nullptr },  // Inst #79 = ANDISo8
  { 80,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #80 = ANDIo
  { 81,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo15,0,nullptr },  // Inst #81 = ANDIo8
  { 82,	2,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #82 = ANDIo_1_EQ_BIT
  { 83,	2,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo23,0,nullptr },  // Inst #83 = ANDIo_1_EQ_BIT8
  { 84,	2,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo22,0,nullptr },  // Inst #84 = ANDIo_1_GT_BIT
  { 85,	2,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo23,0,nullptr },  // Inst #85 = ANDIo_1_GT_BIT8
  { 86,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #86 = ANDo
  { 87,	5,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #87 = ATOMIC_CMP_SWAP_I16
  { 88,	5,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #88 = ATOMIC_CMP_SWAP_I32
  { 89,	5,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo25,0,nullptr },  // Inst #89 = ATOMIC_CMP_SWAP_I64
  { 90,	5,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #90 = ATOMIC_CMP_SWAP_I8
  { 91,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #91 = ATOMIC_LOAD_ADD_I16
  { 92,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #92 = ATOMIC_LOAD_ADD_I32
  { 93,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo27,0,nullptr },  // Inst #93 = ATOMIC_LOAD_ADD_I64
  { 94,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #94 = ATOMIC_LOAD_ADD_I8
  { 95,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #95 = ATOMIC_LOAD_AND_I16
  { 96,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #96 = ATOMIC_LOAD_AND_I32
  { 97,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo27,0,nullptr },  // Inst #97 = ATOMIC_LOAD_AND_I64
  { 98,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #98 = ATOMIC_LOAD_AND_I8
  { 99,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #99 = ATOMIC_LOAD_NAND_I16
  { 100,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #100 = ATOMIC_LOAD_NAND_I32
  { 101,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo27,0,nullptr },  // Inst #101 = ATOMIC_LOAD_NAND_I64
  { 102,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #102 = ATOMIC_LOAD_NAND_I8
  { 103,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #103 = ATOMIC_LOAD_OR_I16
  { 104,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #104 = ATOMIC_LOAD_OR_I32
  { 105,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo27,0,nullptr },  // Inst #105 = ATOMIC_LOAD_OR_I64
  { 106,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #106 = ATOMIC_LOAD_OR_I8
  { 107,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #107 = ATOMIC_LOAD_SUB_I16
  { 108,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #108 = ATOMIC_LOAD_SUB_I32
  { 109,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo27,0,nullptr },  // Inst #109 = ATOMIC_LOAD_SUB_I64
  { 110,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #110 = ATOMIC_LOAD_SUB_I8
  { 111,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #111 = ATOMIC_LOAD_XOR_I16
  { 112,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #112 = ATOMIC_LOAD_XOR_I32
  { 113,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo27,0,nullptr },  // Inst #113 = ATOMIC_LOAD_XOR_I64
  { 114,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #114 = ATOMIC_LOAD_XOR_I8
  { 115,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #115 = ATOMIC_SWAP_I16
  { 116,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #116 = ATOMIC_SWAP_I32
  { 117,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo27,0,nullptr },  // Inst #117 = ATOMIC_SWAP_I64
  { 118,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo26,0,nullptr },  // Inst #118 = ATOMIC_SWAP_I8
  { 119,	0,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #119 = ATTN
  { 120,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x38ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #120 = B
  { 121,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #121 = BA
  { 122,	2,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator), 0x38ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #122 = BC
  { 123,	3,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #123 = BCC
  { 124,	3,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #124 = BCCA
  { 125,	2,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, nullptr, OperandInfo30,0,nullptr },  // Inst #125 = BCCCTR
  { 126,	2,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList8, nullptr, OperandInfo30,0,nullptr },  // Inst #126 = BCCCTR8
  { 127,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList10, OperandInfo30,0,nullptr },  // Inst #127 = BCCCTRL
  { 128,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList12, OperandInfo30,0,nullptr },  // Inst #128 = BCCCTRL8
  { 129,	3,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList10, OperandInfo29,0,nullptr },  // Inst #129 = BCCL
  { 130,	3,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList10, OperandInfo29,0,nullptr },  // Inst #130 = BCCLA
  { 131,	2,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, nullptr, OperandInfo30,0,nullptr },  // Inst #131 = BCCLR
  { 132,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList10, OperandInfo30,0,nullptr },  // Inst #132 = BCCLRL
  { 133,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, nullptr, OperandInfo31,0,nullptr },  // Inst #133 = BCCTR
  { 134,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList8, nullptr, OperandInfo31,0,nullptr },  // Inst #134 = BCCTR8
  { 135,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList8, nullptr, OperandInfo31,0,nullptr },  // Inst #135 = BCCTR8n
  { 136,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList10, OperandInfo31,0,nullptr },  // Inst #136 = BCCTRL
  { 137,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList12, OperandInfo31,0,nullptr },  // Inst #137 = BCCTRL8
  { 138,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList12, OperandInfo31,0,nullptr },  // Inst #138 = BCCTRL8n
  { 139,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList10, OperandInfo31,0,nullptr },  // Inst #139 = BCCTRLn
  { 140,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, nullptr, OperandInfo31,0,nullptr },  // Inst #140 = BCCTRn
  { 141,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList10, OperandInfo28,0,nullptr },  // Inst #141 = BCL
  { 142,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, nullptr, OperandInfo31,0,nullptr },  // Inst #142 = BCLR
  { 143,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList10, OperandInfo31,0,nullptr },  // Inst #143 = BCLRL
  { 144,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList10, OperandInfo31,0,nullptr },  // Inst #144 = BCLRLn
  { 145,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #145 = BCLRn
  { 146,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList10, OperandInfo5,0,nullptr },  // Inst #146 = BCLalways
  { 147,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList10, OperandInfo28,0,nullptr },  // Inst #147 = BCLn
  { 148,	0,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, nullptr, nullptr,0,nullptr },  // Inst #148 = BCTR
  { 149,	0,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList8, nullptr, nullptr,0,nullptr },  // Inst #149 = BCTR8
  { 150,	0,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList9, ImplicitList10, nullptr,0,nullptr },  // Inst #150 = BCTRL
  { 151,	0,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList12, nullptr,0,nullptr },  // Inst #151 = BCTRL8
  { 152,	2,	0,	3,	8,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList15, OperandInfo32,0,nullptr },  // Inst #152 = BCTRL8_LDinto_toc
  { 153,	2,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator), 0x38ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #153 = BCn
  { 154,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #154 = BDNZ
  { 155,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList8, ImplicitList8, OperandInfo5,0,nullptr },  // Inst #155 = BDNZ8
  { 156,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #156 = BDNZA
  { 157,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #157 = BDNZAm
  { 158,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #158 = BDNZAp
  { 159,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #159 = BDNZL
  { 160,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #160 = BDNZLA
  { 161,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #161 = BDNZLAm
  { 162,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #162 = BDNZLAp
  { 163,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList16, ImplicitList7, nullptr,0,nullptr },  // Inst #163 = BDNZLR
  { 164,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList17, ImplicitList8, nullptr,0,nullptr },  // Inst #164 = BDNZLR8
  { 165,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList16, ImplicitList7, nullptr,0,nullptr },  // Inst #165 = BDNZLRL
  { 166,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList16, ImplicitList7, nullptr,0,nullptr },  // Inst #166 = BDNZLRLm
  { 167,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList16, ImplicitList7, nullptr,0,nullptr },  // Inst #167 = BDNZLRLp
  { 168,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList16, ImplicitList7, nullptr,0,nullptr },  // Inst #168 = BDNZLRm
  { 169,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList16, ImplicitList7, nullptr,0,nullptr },  // Inst #169 = BDNZLRp
  { 170,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #170 = BDNZLm
  { 171,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #171 = BDNZLp
  { 172,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #172 = BDNZm
  { 173,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #173 = BDNZp
  { 174,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #174 = BDZ
  { 175,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList8, ImplicitList8, OperandInfo5,0,nullptr },  // Inst #175 = BDZ8
  { 176,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #176 = BDZA
  { 177,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #177 = BDZAm
  { 178,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #178 = BDZAp
  { 179,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #179 = BDZL
  { 180,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #180 = BDZLA
  { 181,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #181 = BDZLAm
  { 182,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #182 = BDZLAp
  { 183,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList16, ImplicitList7, nullptr,0,nullptr },  // Inst #183 = BDZLR
  { 184,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList17, ImplicitList8, nullptr,0,nullptr },  // Inst #184 = BDZLR8
  { 185,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList16, ImplicitList7, nullptr,0,nullptr },  // Inst #185 = BDZLRL
  { 186,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList16, ImplicitList7, nullptr,0,nullptr },  // Inst #186 = BDZLRLm
  { 187,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList16, ImplicitList7, nullptr,0,nullptr },  // Inst #187 = BDZLRLp
  { 188,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList16, ImplicitList7, nullptr,0,nullptr },  // Inst #188 = BDZLRm
  { 189,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList16, ImplicitList7, nullptr,0,nullptr },  // Inst #189 = BDZLRp
  { 190,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #190 = BDZLm
  { 191,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #191 = BDZLp
  { 192,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #192 = BDZm
  { 193,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,nullptr },  // Inst #193 = BDZp
  { 194,	1,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList13, ImplicitList10, OperandInfo5,0,nullptr },  // Inst #194 = BL
  { 195,	1,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList13, ImplicitList12, OperandInfo5,0,nullptr },  // Inst #195 = BL8
  { 196,	1,	0,	3,	8,	0|(1<<MCID::Call), 0x38ULL, ImplicitList13, ImplicitList12, OperandInfo5,0,nullptr },  // Inst #196 = BL8_NOP
  { 197,	2,	0,	3,	8,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList12, OperandInfo7,0,nullptr },  // Inst #197 = BL8_NOP_TLS
  { 198,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList12, OperandInfo7,0,nullptr },  // Inst #198 = BL8_TLS
  { 199,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList12, OperandInfo7,0,nullptr },  // Inst #199 = BL8_TLS_
  { 200,	1,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList13, ImplicitList10, OperandInfo5,0,nullptr },  // Inst #200 = BLA
  { 201,	1,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList13, ImplicitList12, OperandInfo5,0,nullptr },  // Inst #201 = BLA8
  { 202,	1,	0,	3,	8,	0|(1<<MCID::Call), 0x38ULL, ImplicitList13, ImplicitList12, OperandInfo5,0,nullptr },  // Inst #202 = BLA8_NOP
  { 203,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x38ULL, ImplicitList14, nullptr, nullptr,0,nullptr },  // Inst #203 = BLR
  { 204,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x38ULL, ImplicitList18, nullptr, nullptr,0,nullptr },  // Inst #204 = BLR8
  { 205,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList10, nullptr,0,nullptr },  // Inst #205 = BLRL
  { 206,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList10, OperandInfo7,0,nullptr },  // Inst #206 = BL_TLS
  { 207,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #207 = BRINC
  { 208,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #208 = CLRLSLDI
  { 209,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #209 = CLRLSLDIo
  { 210,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #210 = CLRLSLWI
  { 211,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #211 = CLRLSLWIo
  { 212,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #212 = CLRRDI
  { 213,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #213 = CLRRDIo
  { 214,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #214 = CLRRWI
  { 215,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #215 = CLRRWIo
  { 216,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #216 = CMPB
  { 217,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #217 = CMPB8
  { 218,	3,	1,	5,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #218 = CMPD
  { 219,	3,	1,	5,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo36,0,nullptr },  // Inst #219 = CMPDI
  { 220,	3,	1,	5,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #220 = CMPLD
  { 221,	3,	1,	5,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo36,0,nullptr },  // Inst #221 = CMPLDI
  { 222,	3,	1,	5,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo37,0,nullptr },  // Inst #222 = CMPLW
  { 223,	3,	1,	5,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo38,0,nullptr },  // Inst #223 = CMPLWI
  { 224,	3,	1,	5,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo37,0,nullptr },  // Inst #224 = CMPW
  { 225,	3,	1,	5,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo38,0,nullptr },  // Inst #225 = CMPWI
  { 226,	2,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #226 = CNTLZD
  { 227,	2,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo21,0,nullptr },  // Inst #227 = CNTLZDo
  { 228,	2,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #228 = CNTLZW
  { 229,	2,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #229 = CNTLZW8
  { 230,	2,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo21,0,nullptr },  // Inst #230 = CNTLZW8o
  { 231,	2,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo20,0,nullptr },  // Inst #231 = CNTLZWo
  { 232,	0,	0,	6,	4,	0, 0x0ULL, nullptr, ImplicitList19, nullptr,0,nullptr },  // Inst #232 = CR6SET
  { 233,	0,	0,	6,	4,	0, 0x0ULL, nullptr, ImplicitList19, nullptr,0,nullptr },  // Inst #233 = CR6UNSET
  { 234,	3,	1,	6,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo39,0,nullptr },  // Inst #234 = CRAND
  { 235,	3,	1,	6,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo39,0,nullptr },  // Inst #235 = CRANDC
  { 236,	3,	1,	6,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo39,0,nullptr },  // Inst #236 = CREQV
  { 237,	3,	1,	6,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo39,0,nullptr },  // Inst #237 = CRNAND
  { 238,	3,	1,	6,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo39,0,nullptr },  // Inst #238 = CRNOR
  { 239,	3,	1,	6,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo39,0,nullptr },  // Inst #239 = CROR
  { 240,	3,	1,	6,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo39,0,nullptr },  // Inst #240 = CRORC
  { 241,	1,	1,	6,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #241 = CRSET
  { 242,	1,	1,	6,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #242 = CRUNSET
  { 243,	3,	1,	6,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo39,0,nullptr },  // Inst #243 = CRXOR
  { 244,	2,	0,	7,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo40,0,nullptr },  // Inst #244 = DCBA
  { 245,	2,	0,	7,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo40,0,nullptr },  // Inst #245 = DCBF
  { 246,	2,	0,	7,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo40,0,nullptr },  // Inst #246 = DCBI
  { 247,	2,	0,	7,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo40,0,nullptr },  // Inst #247 = DCBST
  { 248,	2,	0,	7,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x2ULL, nullptr, nullptr, OperandInfo40,0,nullptr },  // Inst #248 = DCBT
  { 249,	2,	0,	7,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo40,0,nullptr },  // Inst #249 = DCBTST
  { 250,	2,	0,	7,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo40,0,nullptr },  // Inst #250 = DCBZ
  { 251,	2,	0,	7,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo40,0,nullptr },  // Inst #251 = DCBZL
  { 252,	2,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #252 = DCCCI
  { 253,	3,	1,	9,	4,	0, 0xdULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #253 = DIVD
  { 254,	3,	1,	9,	4,	0, 0xdULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #254 = DIVDU
  { 255,	3,	1,	9,	4,	0, 0xdULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #255 = DIVDUo
  { 256,	3,	1,	9,	4,	0, 0xdULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #256 = DIVDo
  { 257,	3,	1,	10,	4,	0, 0xdULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #257 = DIVW
  { 258,	3,	1,	10,	4,	0, 0xdULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #258 = DIVWU
  { 259,	3,	1,	10,	4,	0, 0xdULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #259 = DIVWUo
  { 260,	3,	1,	10,	4,	0, 0xdULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #260 = DIVWo
  { 261,	1,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo5,PPC::DeprecatedDST,nullptr },  // Inst #261 = DSS
  { 262,	0,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,PPC::DeprecatedDST,nullptr },  // Inst #262 = DSSALL
  { 263,	3,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo41,PPC::DeprecatedDST,nullptr },  // Inst #263 = DST
  { 264,	3,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,PPC::DeprecatedDST,nullptr },  // Inst #264 = DST64
  { 265,	3,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo41,PPC::DeprecatedDST,nullptr },  // Inst #265 = DSTST
  { 266,	3,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,PPC::DeprecatedDST,nullptr },  // Inst #266 = DSTST64
  { 267,	3,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo41,PPC::DeprecatedDST,nullptr },  // Inst #267 = DSTSTT
  { 268,	3,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,PPC::DeprecatedDST,nullptr },  // Inst #268 = DSTSTT64
  { 269,	3,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo41,PPC::DeprecatedDST,nullptr },  // Inst #269 = DSTT
  { 270,	3,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42,PPC::DeprecatedDST,nullptr },  // Inst #270 = DSTT64
  { 271,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList6, ImplicitList6, OperandInfo43,0,nullptr },  // Inst #271 = DYNALLOC
  { 272,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList20, ImplicitList20, OperandInfo44,0,nullptr },  // Inst #272 = DYNALLOC8
  { 273,	1,	0,	0,	4,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #273 = EH_SjLj_LongJmp32
  { 274,	1,	0,	0,	4,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #274 = EH_SjLj_LongJmp64
  { 275,	2,	1,	0,	4,	0|(1<<MCID::Barrier)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList7, OperandInfo45,0,nullptr },  // Inst #275 = EH_SjLj_SetJmp32
  { 276,	2,	1,	0,	4,	0|(1<<MCID::Barrier)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList8, OperandInfo45,0,nullptr },  // Inst #276 = EH_SjLj_SetJmp64
  { 277,	1,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #277 = EH_SjLj_Setup
  { 278,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #278 = EQV
  { 279,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #279 = EQV8
  { 280,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #280 = EQV8o
  { 281,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #281 = EQVo
  { 282,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #282 = EVABS
  { 283,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #283 = EVADDIW
  { 284,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #284 = EVADDSMIAAW
  { 285,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #285 = EVADDSSIAAW
  { 286,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #286 = EVADDUMIAAW
  { 287,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #287 = EVADDUSIAAW
  { 288,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #288 = EVADDW
  { 289,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #289 = EVAND
  { 290,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #290 = EVANDC
  { 291,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37,0,nullptr },  // Inst #291 = EVCMPEQ
  { 292,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37,0,nullptr },  // Inst #292 = EVCMPGTS
  { 293,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37,0,nullptr },  // Inst #293 = EVCMPGTU
  { 294,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37,0,nullptr },  // Inst #294 = EVCMPLTS
  { 295,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37,0,nullptr },  // Inst #295 = EVCMPLTU
  { 296,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #296 = EVCNTLSW
  { 297,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #297 = EVCNTLZW
  { 298,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #298 = EVDIVWS
  { 299,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #299 = EVDIVWU
  { 300,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #300 = EVEQV
  { 301,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #301 = EVEXTSB
  { 302,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #302 = EVEXTSH
  { 303,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #303 = EVLDD
  { 304,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #304 = EVLDDX
  { 305,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #305 = EVLDH
  { 306,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #306 = EVLDHX
  { 307,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #307 = EVLDW
  { 308,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #308 = EVLDWX
  { 309,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #309 = EVLHHESPLAT
  { 310,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #310 = EVLHHESPLATX
  { 311,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #311 = EVLHHOSSPLAT
  { 312,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #312 = EVLHHOSSPLATX
  { 313,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #313 = EVLHHOUSPLAT
  { 314,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #314 = EVLHHOUSPLATX
  { 315,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #315 = EVLWHE
  { 316,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #316 = EVLWHEX
  { 317,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #317 = EVLWHOS
  { 318,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #318 = EVLWHOSX
  { 319,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #319 = EVLWHOU
  { 320,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #320 = EVLWHOUX
  { 321,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #321 = EVLWHSPLAT
  { 322,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #322 = EVLWHSPLATX
  { 323,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #323 = EVLWWSPLAT
  { 324,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #324 = EVLWWSPLATX
  { 325,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #325 = EVMERGEHI
  { 326,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #326 = EVMERGEHILO
  { 327,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #327 = EVMERGELO
  { 328,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #328 = EVMERGELOHI
  { 329,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #329 = EVMHEGSMFAA
  { 330,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #330 = EVMHEGSMFAN
  { 331,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #331 = EVMHEGSMIAA
  { 332,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #332 = EVMHEGSMIAN
  { 333,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #333 = EVMHEGUMIAA
  { 334,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #334 = EVMHEGUMIAN
  { 335,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #335 = EVMHESMF
  { 336,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #336 = EVMHESMFA
  { 337,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #337 = EVMHESMFAAW
  { 338,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #338 = EVMHESMFANW
  { 339,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #339 = EVMHESMI
  { 340,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #340 = EVMHESMIA
  { 341,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #341 = EVMHESMIAAW
  { 342,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #342 = EVMHESMIANW
  { 343,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #343 = EVMHESSF
  { 344,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #344 = EVMHESSFA
  { 345,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #345 = EVMHESSFAAW
  { 346,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #346 = EVMHESSFANW
  { 347,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #347 = EVMHESSIAAW
  { 348,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #348 = EVMHESSIANW
  { 349,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #349 = EVMHEUMI
  { 350,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #350 = EVMHEUMIA
  { 351,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #351 = EVMHEUMIAAW
  { 352,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #352 = EVMHEUMIANW
  { 353,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #353 = EVMHEUSIAAW
  { 354,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #354 = EVMHEUSIANW
  { 355,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #355 = EVMHOGSMFAA
  { 356,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #356 = EVMHOGSMFAN
  { 357,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #357 = EVMHOGSMIAA
  { 358,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #358 = EVMHOGSMIAN
  { 359,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #359 = EVMHOGUMIAA
  { 360,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #360 = EVMHOGUMIAN
  { 361,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #361 = EVMHOSMF
  { 362,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #362 = EVMHOSMFA
  { 363,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #363 = EVMHOSMFAAW
  { 364,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #364 = EVMHOSMFANW
  { 365,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #365 = EVMHOSMI
  { 366,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #366 = EVMHOSMIA
  { 367,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #367 = EVMHOSMIAAW
  { 368,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #368 = EVMHOSMIANW
  { 369,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #369 = EVMHOSSF
  { 370,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #370 = EVMHOSSFA
  { 371,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #371 = EVMHOSSFAAW
  { 372,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #372 = EVMHOSSFANW
  { 373,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #373 = EVMHOSSIAAW
  { 374,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #374 = EVMHOSSIANW
  { 375,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #375 = EVMHOUMI
  { 376,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #376 = EVMHOUMIA
  { 377,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #377 = EVMHOUMIAAW
  { 378,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #378 = EVMHOUMIANW
  { 379,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #379 = EVMHOUSIAAW
  { 380,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #380 = EVMHOUSIANW
  { 381,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #381 = EVMRA
  { 382,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #382 = EVMWHSMF
  { 383,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #383 = EVMWHSMFA
  { 384,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #384 = EVMWHSMI
  { 385,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #385 = EVMWHSMIA
  { 386,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #386 = EVMWHSSF
  { 387,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #387 = EVMWHSSFA
  { 388,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #388 = EVMWHUMI
  { 389,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #389 = EVMWHUMIA
  { 390,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #390 = EVMWLSMIAAW
  { 391,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #391 = EVMWLSMIANW
  { 392,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #392 = EVMWLSSIAAW
  { 393,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #393 = EVMWLSSIANW
  { 394,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #394 = EVMWLUMI
  { 395,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #395 = EVMWLUMIA
  { 396,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #396 = EVMWLUMIAAW
  { 397,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #397 = EVMWLUMIANW
  { 398,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #398 = EVMWLUSIAAW
  { 399,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #399 = EVMWLUSIANW
  { 400,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #400 = EVMWSMF
  { 401,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #401 = EVMWSMFA
  { 402,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #402 = EVMWSMFAA
  { 403,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #403 = EVMWSMFAN
  { 404,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #404 = EVMWSMI
  { 405,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #405 = EVMWSMIA
  { 406,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #406 = EVMWSMIAA
  { 407,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #407 = EVMWSMIAN
  { 408,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #408 = EVMWSSF
  { 409,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #409 = EVMWSSFA
  { 410,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #410 = EVMWSSFAA
  { 411,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #411 = EVMWSSFAN
  { 412,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #412 = EVMWUMI
  { 413,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #413 = EVMWUMIA
  { 414,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #414 = EVMWUMIAA
  { 415,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #415 = EVMWUMIAN
  { 416,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #416 = EVNAND
  { 417,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #417 = EVNEG
  { 418,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #418 = EVNOR
  { 419,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #419 = EVOR
  { 420,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #420 = EVORC
  { 421,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #421 = EVRLW
  { 422,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #422 = EVRLWI
  { 423,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #423 = EVRNDW
  { 424,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #424 = EVSLW
  { 425,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #425 = EVSLWI
  { 426,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo47,0,nullptr },  // Inst #426 = EVSPLATFI
  { 427,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo47,0,nullptr },  // Inst #427 = EVSPLATI
  { 428,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #428 = EVSRWIS
  { 429,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #429 = EVSRWIU
  { 430,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #430 = EVSRWS
  { 431,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #431 = EVSRWU
  { 432,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #432 = EVSTDD
  { 433,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #433 = EVSTDDX
  { 434,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #434 = EVSTDH
  { 435,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #435 = EVSTDHX
  { 436,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #436 = EVSTDW
  { 437,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #437 = EVSTDWX
  { 438,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #438 = EVSTWHE
  { 439,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #439 = EVSTWHEX
  { 440,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #440 = EVSTWHO
  { 441,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #441 = EVSTWHOX
  { 442,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #442 = EVSTWWE
  { 443,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #443 = EVSTWWEX
  { 444,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #444 = EVSTWWO
  { 445,	3,	0,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #445 = EVSTWWOX
  { 446,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #446 = EVSUBFSMIAAW
  { 447,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #447 = EVSUBFSSIAAW
  { 448,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #448 = EVSUBFUMIAAW
  { 449,	2,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #449 = EVSUBFUSIAAW
  { 450,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #450 = EVSUBFW
  { 451,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo48,0,nullptr },  // Inst #451 = EVSUBIFW
  { 452,	3,	1,	4,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #452 = EVXOR
  { 453,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #453 = EXTLDI
  { 454,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #454 = EXTLDIo
  { 455,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #455 = EXTLWI
  { 456,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #456 = EXTLWIo
  { 457,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #457 = EXTRDI
  { 458,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #458 = EXTRDIo
  { 459,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #459 = EXTRWI
  { 460,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #460 = EXTRWIo
  { 461,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #461 = EXTSB
  { 462,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #462 = EXTSB8
  { 463,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo49,0,nullptr },  // Inst #463 = EXTSB8_32_64
  { 464,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo21,0,nullptr },  // Inst #464 = EXTSB8o
  { 465,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo20,0,nullptr },  // Inst #465 = EXTSBo
  { 466,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #466 = EXTSH
  { 467,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #467 = EXTSH8
  { 468,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo49,0,nullptr },  // Inst #468 = EXTSH8_32_64
  { 469,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo21,0,nullptr },  // Inst #469 = EXTSH8o
  { 470,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo20,0,nullptr },  // Inst #470 = EXTSHo
  { 471,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #471 = EXTSW
  { 472,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo49,0,nullptr },  // Inst #472 = EXTSW_32_64
  { 473,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo49,0,nullptr },  // Inst #473 = EXTSW_32_64o
  { 474,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo21,0,nullptr },  // Inst #474 = EXTSWo
  { 475,	0,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #475 = EnforceIEIO
  { 476,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo50,0,nullptr },  // Inst #476 = FABSD
  { 477,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList21, OperandInfo50,0,nullptr },  // Inst #477 = FABSDo
  { 478,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo51,0,nullptr },  // Inst #478 = FABSS
  { 479,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList21, OperandInfo51,0,nullptr },  // Inst #479 = FABSSo
  { 480,	3,	1,	12,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, nullptr, OperandInfo52,0,nullptr },  // Inst #480 = FADD
  { 481,	3,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, nullptr, OperandInfo53,0,nullptr },  // Inst #481 = FADDS
  { 482,	3,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo53,0,nullptr },  // Inst #482 = FADDSo
  { 483,	3,	1,	12,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo52,0,nullptr },  // Inst #483 = FADDo
  { 484,	3,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList13, nullptr, OperandInfo52,0,nullptr },  // Inst #484 = FADDrtz
  { 485,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo50,0,nullptr },  // Inst #485 = FCFID
  { 486,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo54,0,nullptr },  // Inst #486 = FCFIDS
  { 487,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo54,0,nullptr },  // Inst #487 = FCFIDSo
  { 488,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo50,0,nullptr },  // Inst #488 = FCFIDU
  { 489,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo54,0,nullptr },  // Inst #489 = FCFIDUS
  { 490,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo54,0,nullptr },  // Inst #490 = FCFIDUSo
  { 491,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo50,0,nullptr },  // Inst #491 = FCFIDUo
  { 492,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo50,0,nullptr },  // Inst #492 = FCFIDo
  { 493,	3,	1,	13,	4,	0|(1<<MCID::Compare), 0x18ULL, nullptr, nullptr, OperandInfo55,0,nullptr },  // Inst #493 = FCMPUD
  { 494,	3,	1,	13,	4,	0|(1<<MCID::Compare), 0x18ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #494 = FCMPUS
  { 495,	3,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo52,0,nullptr },  // Inst #495 = FCPSGND
  { 496,	3,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList21, OperandInfo52,0,nullptr },  // Inst #496 = FCPSGNDo
  { 497,	3,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo53,0,nullptr },  // Inst #497 = FCPSGNS
  { 498,	3,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList21, OperandInfo53,0,nullptr },  // Inst #498 = FCPSGNSo
  { 499,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo50,0,nullptr },  // Inst #499 = FCTID
  { 500,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo50,0,nullptr },  // Inst #500 = FCTIDUZ
  { 501,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo50,0,nullptr },  // Inst #501 = FCTIDUZo
  { 502,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo50,0,nullptr },  // Inst #502 = FCTIDZ
  { 503,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo50,0,nullptr },  // Inst #503 = FCTIDZo
  { 504,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo50,0,nullptr },  // Inst #504 = FCTIDo
  { 505,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo50,0,nullptr },  // Inst #505 = FCTIW
  { 506,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo50,0,nullptr },  // Inst #506 = FCTIWUZ
  { 507,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo50,0,nullptr },  // Inst #507 = FCTIWUZo
  { 508,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo50,0,nullptr },  // Inst #508 = FCTIWZ
  { 509,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo50,0,nullptr },  // Inst #509 = FCTIWZo
  { 510,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo50,0,nullptr },  // Inst #510 = FCTIWo
  { 511,	3,	1,	14,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo52,0,nullptr },  // Inst #511 = FDIV
  { 512,	3,	1,	15,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo53,0,nullptr },  // Inst #512 = FDIVS
  { 513,	3,	1,	15,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo53,0,nullptr },  // Inst #513 = FDIVSo
  { 514,	3,	1,	14,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo52,0,nullptr },  // Inst #514 = FDIVo
  { 515,	4,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, nullptr, OperandInfo57,0,nullptr },  // Inst #515 = FMADD
  { 516,	4,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, nullptr, OperandInfo58,0,nullptr },  // Inst #516 = FMADDS
  { 517,	4,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo58,0,nullptr },  // Inst #517 = FMADDSo
  { 518,	4,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo57,0,nullptr },  // Inst #518 = FMADDo
  { 519,	2,	1,	11,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo51,0,nullptr },  // Inst #519 = FMR
  { 520,	2,	1,	11,	4,	0, 0x0ULL, nullptr, ImplicitList21, OperandInfo51,0,nullptr },  // Inst #520 = FMRo
  { 521,	4,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, nullptr, OperandInfo57,0,nullptr },  // Inst #521 = FMSUB
  { 522,	4,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, nullptr, OperandInfo58,0,nullptr },  // Inst #522 = FMSUBS
  { 523,	4,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo58,0,nullptr },  // Inst #523 = FMSUBSo
  { 524,	4,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo57,0,nullptr },  // Inst #524 = FMSUBo
  { 525,	3,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, nullptr, OperandInfo52,0,nullptr },  // Inst #525 = FMUL
  { 526,	3,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, nullptr, OperandInfo53,0,nullptr },  // Inst #526 = FMULS
  { 527,	3,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo53,0,nullptr },  // Inst #527 = FMULSo
  { 528,	3,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo52,0,nullptr },  // Inst #528 = FMULo
  { 529,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo50,0,nullptr },  // Inst #529 = FNABSD
  { 530,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList21, OperandInfo50,0,nullptr },  // Inst #530 = FNABSDo
  { 531,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo51,0,nullptr },  // Inst #531 = FNABSS
  { 532,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList21, OperandInfo51,0,nullptr },  // Inst #532 = FNABSSo
  { 533,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo50,0,nullptr },  // Inst #533 = FNEGD
  { 534,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList21, OperandInfo50,0,nullptr },  // Inst #534 = FNEGDo
  { 535,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo51,0,nullptr },  // Inst #535 = FNEGS
  { 536,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList21, OperandInfo51,0,nullptr },  // Inst #536 = FNEGSo
  { 537,	4,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, nullptr, OperandInfo57,0,nullptr },  // Inst #537 = FNMADD
  { 538,	4,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, nullptr, OperandInfo58,0,nullptr },  // Inst #538 = FNMADDS
  { 539,	4,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo58,0,nullptr },  // Inst #539 = FNMADDSo
  { 540,	4,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo57,0,nullptr },  // Inst #540 = FNMADDo
  { 541,	4,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, nullptr, OperandInfo57,0,nullptr },  // Inst #541 = FNMSUB
  { 542,	4,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, nullptr, OperandInfo58,0,nullptr },  // Inst #542 = FNMSUBS
  { 543,	4,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo58,0,nullptr },  // Inst #543 = FNMSUBSo
  { 544,	4,	1,	16,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo57,0,nullptr },  // Inst #544 = FNMSUBo
  { 545,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo50,0,nullptr },  // Inst #545 = FRE
  { 546,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo51,0,nullptr },  // Inst #546 = FRES
  { 547,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList21, OperandInfo51,0,nullptr },  // Inst #547 = FRESo
  { 548,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList21, OperandInfo50,0,nullptr },  // Inst #548 = FREo
  { 549,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo50,0,nullptr },  // Inst #549 = FRIMD
  { 550,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo50,0,nullptr },  // Inst #550 = FRIMDo
  { 551,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo51,0,nullptr },  // Inst #551 = FRIMS
  { 552,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo51,0,nullptr },  // Inst #552 = FRIMSo
  { 553,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo50,0,nullptr },  // Inst #553 = FRIND
  { 554,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo50,0,nullptr },  // Inst #554 = FRINDo
  { 555,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo51,0,nullptr },  // Inst #555 = FRINS
  { 556,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo51,0,nullptr },  // Inst #556 = FRINSo
  { 557,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo50,0,nullptr },  // Inst #557 = FRIPD
  { 558,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo50,0,nullptr },  // Inst #558 = FRIPDo
  { 559,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo51,0,nullptr },  // Inst #559 = FRIPS
  { 560,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo51,0,nullptr },  // Inst #560 = FRIPSo
  { 561,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo50,0,nullptr },  // Inst #561 = FRIZD
  { 562,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo50,0,nullptr },  // Inst #562 = FRIZDo
  { 563,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo51,0,nullptr },  // Inst #563 = FRIZS
  { 564,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo51,0,nullptr },  // Inst #564 = FRIZSo
  { 565,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo54,0,nullptr },  // Inst #565 = FRSP
  { 566,	2,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo54,0,nullptr },  // Inst #566 = FRSPo
  { 567,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo50,0,nullptr },  // Inst #567 = FRSQRTE
  { 568,	2,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo51,0,nullptr },  // Inst #568 = FRSQRTES
  { 569,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList21, OperandInfo51,0,nullptr },  // Inst #569 = FRSQRTESo
  { 570,	2,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList21, OperandInfo50,0,nullptr },  // Inst #570 = FRSQRTEo
  { 571,	4,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #571 = FSELD
  { 572,	4,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList21, OperandInfo57,0,nullptr },  // Inst #572 = FSELDo
  { 573,	4,	1,	11,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo59,0,nullptr },  // Inst #573 = FSELS
  { 574,	4,	1,	11,	4,	0, 0x18ULL, nullptr, ImplicitList21, OperandInfo59,0,nullptr },  // Inst #574 = FSELSo
  { 575,	2,	1,	17,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo50,0,nullptr },  // Inst #575 = FSQRT
  { 576,	2,	1,	18,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo51,0,nullptr },  // Inst #576 = FSQRTS
  { 577,	2,	1,	18,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo51,0,nullptr },  // Inst #577 = FSQRTSo
  { 578,	2,	1,	17,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo50,0,nullptr },  // Inst #578 = FSQRTo
  { 579,	3,	1,	12,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo52,0,nullptr },  // Inst #579 = FSUB
  { 580,	3,	1,	11,	4,	0, 0x18ULL, ImplicitList13, nullptr, OperandInfo53,0,nullptr },  // Inst #580 = FSUBS
  { 581,	3,	1,	11,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo53,0,nullptr },  // Inst #581 = FSUBSo
  { 582,	3,	1,	12,	4,	0, 0x18ULL, ImplicitList13, ImplicitList21, OperandInfo52,0,nullptr },  // Inst #582 = FSUBo
  { 583,	3,	1,	0,	4,	0|(1<<MCID::ExtraSrcRegAllocReq)|(1<<MCID::ExtraDefRegAllocReq), 0x0ULL, nullptr, ImplicitList22, OperandInfo15,0,nullptr },  // Inst #583 = GETtlsADDR
  { 584,	3,	1,	0,	4,	0|(1<<MCID::ExtraSrcRegAllocReq)|(1<<MCID::ExtraDefRegAllocReq), 0x0ULL, nullptr, ImplicitList23, OperandInfo13,0,nullptr },  // Inst #584 = GETtlsADDR32
  { 585,	3,	1,	0,	4,	0|(1<<MCID::ExtraSrcRegAllocReq)|(1<<MCID::ExtraDefRegAllocReq), 0x0ULL, nullptr, ImplicitList22, OperandInfo15,0,nullptr },  // Inst #585 = GETtlsldADDR
  { 586,	3,	1,	0,	4,	0|(1<<MCID::ExtraSrcRegAllocReq)|(1<<MCID::ExtraDefRegAllocReq), 0x0ULL, nullptr, ImplicitList23, OperandInfo13,0,nullptr },  // Inst #586 = GETtlsldADDR32
  { 587,	2,	0,	19,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo40,0,nullptr },  // Inst #587 = ICBI
  { 588,	3,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo60,0,nullptr },  // Inst #588 = ICBT
  { 589,	2,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #589 = ICCCI
  { 590,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #590 = INSLWI
  { 591,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #591 = INSLWIo
  { 592,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #592 = INSRDI
  { 593,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #593 = INSRDIo
  { 594,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #594 = INSRWI
  { 595,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #595 = INSRWIo
  { 596,	4,	1,	20,	4,	0|(1<<MCID::Select), 0x8ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #596 = ISEL
  { 597,	4,	1,	20,	4,	0|(1<<MCID::Select), 0x8ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #597 = ISEL8
  { 598,	0,	0,	21,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #598 = ISYNC
  { 599,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #599 = LA
  { 600,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #600 = LAx
  { 601,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #601 = LBZ
  { 602,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #602 = LBZ8
  { 603,	3,	1,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #603 = LBZCIX
  { 604,	4,	2,	22,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo64,0,nullptr },  // Inst #604 = LBZU
  { 605,	4,	2,	22,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo65,0,nullptr },  // Inst #605 = LBZU8
  { 606,	4,	2,	23,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo66,0,nullptr },  // Inst #606 = LBZUX
  { 607,	4,	2,	23,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #607 = LBZUX8
  { 608,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo68,0,nullptr },  // Inst #608 = LBZX
  { 609,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo69,0,nullptr },  // Inst #609 = LBZX8
  { 610,	3,	1,	24,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #610 = LD
  { 611,	3,	1,	25,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo69,0,nullptr },  // Inst #611 = LDARX
  { 612,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo69,0,nullptr },  // Inst #612 = LDBRX
  { 613,	3,	1,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #613 = LDCIX
  { 614,	4,	2,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo65,0,nullptr },  // Inst #614 = LDU
  { 615,	4,	2,	27,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #615 = LDUX
  { 616,	3,	1,	24,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo69,0,nullptr },  // Inst #616 = LDX
  { 617,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo70,0,nullptr },  // Inst #617 = LDgotTprelL
  { 618,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo71,0,nullptr },  // Inst #618 = LDgotTprelL32
  { 619,	3,	1,	0,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo72,0,nullptr },  // Inst #619 = LDtoc
  { 620,	3,	1,	0,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo72,0,nullptr },  // Inst #620 = LDtocBA
  { 621,	3,	1,	0,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo72,0,nullptr },  // Inst #621 = LDtocCPT
  { 622,	3,	1,	0,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo72,0,nullptr },  // Inst #622 = LDtocJTI
  { 623,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo70,0,nullptr },  // Inst #623 = LDtocL
  { 624,	3,	1,	28,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo73,0,nullptr },  // Inst #624 = LFD
  { 625,	4,	2,	29,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo74,0,nullptr },  // Inst #625 = LFDU
  { 626,	4,	2,	30,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo75,0,nullptr },  // Inst #626 = LFDUX
  { 627,	3,	1,	28,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo76,0,nullptr },  // Inst #627 = LFDX
  { 628,	3,	1,	28,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo76,0,nullptr },  // Inst #628 = LFIWAX
  { 629,	3,	1,	28,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo76,0,nullptr },  // Inst #629 = LFIWZX
  { 630,	3,	1,	28,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo77,0,nullptr },  // Inst #630 = LFS
  { 631,	4,	2,	29,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #631 = LFSU
  { 632,	4,	2,	30,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo79,0,nullptr },  // Inst #632 = LFSUX
  { 633,	3,	1,	28,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo80,0,nullptr },  // Inst #633 = LFSX
  { 634,	3,	1,	31,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #634 = LHA
  { 635,	3,	1,	31,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #635 = LHA8
  { 636,	4,	2,	32,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo64,0,nullptr },  // Inst #636 = LHAU
  { 637,	4,	2,	32,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo65,0,nullptr },  // Inst #637 = LHAU8
  { 638,	4,	2,	33,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo66,0,nullptr },  // Inst #638 = LHAUX
  { 639,	4,	2,	33,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #639 = LHAUX8
  { 640,	3,	1,	31,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo68,0,nullptr },  // Inst #640 = LHAX
  { 641,	3,	1,	31,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo69,0,nullptr },  // Inst #641 = LHAX8
  { 642,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo68,0,nullptr },  // Inst #642 = LHBRX
  { 643,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo69,0,nullptr },  // Inst #643 = LHBRX8
  { 644,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #644 = LHZ
  { 645,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #645 = LHZ8
  { 646,	3,	1,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #646 = LHZCIX
  { 647,	4,	2,	22,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo64,0,nullptr },  // Inst #647 = LHZU
  { 648,	4,	2,	22,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo65,0,nullptr },  // Inst #648 = LHZU8
  { 649,	4,	2,	23,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo66,0,nullptr },  // Inst #649 = LHZUX
  { 650,	4,	2,	23,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #650 = LHZUX8
  { 651,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo68,0,nullptr },  // Inst #651 = LHZX
  { 652,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo69,0,nullptr },  // Inst #652 = LHZX8
  { 653,	2,	1,	1,	4,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo81,0,nullptr },  // Inst #653 = LI
  { 654,	2,	1,	1,	4,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo82,0,nullptr },  // Inst #654 = LI8
  { 655,	2,	1,	1,	4,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo81,0,nullptr },  // Inst #655 = LIS
  { 656,	2,	1,	1,	4,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo82,0,nullptr },  // Inst #656 = LIS8
  { 657,	3,	1,	34,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #657 = LMW
  { 658,	3,	1,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #658 = LSWI
  { 659,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #659 = LVEBX
  { 660,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #660 = LVEHX
  { 661,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #661 = LVEWX
  { 662,	3,	1,	8,	4,	0, 0x10ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #662 = LVSL
  { 663,	3,	1,	8,	4,	0, 0x10ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #663 = LVSR
  { 664,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #664 = LVX
  { 665,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #665 = LVXL
  { 666,	3,	1,	35,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #666 = LWA
  { 667,	3,	1,	36,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo68,0,nullptr },  // Inst #667 = LWARX
  { 668,	4,	2,	33,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #668 = LWAUX
  { 669,	3,	1,	31,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo69,0,nullptr },  // Inst #669 = LWAX
  { 670,	3,	1,	31,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x14ULL, nullptr, nullptr, OperandInfo68,0,nullptr },  // Inst #670 = LWAX_32
  { 671,	3,	1,	35,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x14ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #671 = LWA_32
  { 672,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo68,0,nullptr },  // Inst #672 = LWBRX
  { 673,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo69,0,nullptr },  // Inst #673 = LWBRX8
  { 674,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #674 = LWZ
  { 675,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #675 = LWZ8
  { 676,	3,	1,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #676 = LWZCIX
  { 677,	4,	2,	22,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo64,0,nullptr },  // Inst #677 = LWZU
  { 678,	4,	2,	22,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo65,0,nullptr },  // Inst #678 = LWZU8
  { 679,	4,	2,	23,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo66,0,nullptr },  // Inst #679 = LWZUX
  { 680,	4,	2,	23,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #680 = LWZUX8
  { 681,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo68,0,nullptr },  // Inst #681 = LWZX
  { 682,	3,	1,	8,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo69,0,nullptr },  // Inst #682 = LWZX8
  { 683,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo48,0,nullptr },  // Inst #683 = LWZtoc
  { 684,	3,	1,	28,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x0ULL, ImplicitList13, nullptr, OperandInfo84,0,nullptr },  // Inst #684 = LXSDX
  { 685,	3,	1,	28,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x0ULL, ImplicitList13, nullptr, OperandInfo85,0,nullptr },  // Inst #685 = LXVD2X
  { 686,	3,	1,	28,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x0ULL, ImplicitList13, nullptr, OperandInfo85,0,nullptr },  // Inst #686 = LXVDSX
  { 687,	3,	1,	28,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x0ULL, ImplicitList13, nullptr, OperandInfo85,0,nullptr },  // Inst #687 = LXVW4X
  { 688,	1,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #688 = MBAR
  { 689,	2,	1,	37,	4,	0, 0x21ULL, nullptr, nullptr, OperandInfo86,0,nullptr },  // Inst #689 = MCRF
  { 690,	2,	1,	37,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86,0,nullptr },  // Inst #690 = MCRFS
  { 691,	1,	1,	38,	4,	0, 0x20ULL, nullptr, nullptr, OperandInfo87,0,nullptr },  // Inst #691 = MFCR
  { 692,	1,	1,	38,	4,	0, 0x20ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #692 = MFCR8
  { 693,	1,	1,	39,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList7, nullptr, OperandInfo87,0,nullptr },  // Inst #693 = MFCTR
  { 694,	1,	1,	39,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList8, nullptr, OperandInfo88,0,nullptr },  // Inst #694 = MFCTR8
  { 695,	2,	1,	39,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo47,0,nullptr },  // Inst #695 = MFDCR
  { 696,	1,	1,	40,	4,	0, 0x1aULL, ImplicitList13, nullptr, OperandInfo89,0,nullptr },  // Inst #696 = MFFS
  { 697,	1,	1,	40,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList13, ImplicitList21, OperandInfo89,0,nullptr },  // Inst #697 = MFFSo
  { 698,	1,	1,	39,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList10, nullptr, OperandInfo87,0,nullptr },  // Inst #698 = MFLR
  { 699,	1,	1,	39,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList12, nullptr, OperandInfo88,0,nullptr },  // Inst #699 = MFLR8
  { 700,	1,	1,	41,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87,0,nullptr },  // Inst #700 = MFMSR
  { 701,	2,	1,	42,	4,	0|(1<<MCID::ExtraSrcRegAllocReq), 0x21ULL, nullptr, nullptr, OperandInfo81,0,nullptr },  // Inst #701 = MFOCRF
  { 702,	2,	1,	42,	4,	0|(1<<MCID::ExtraSrcRegAllocReq), 0x21ULL, nullptr, nullptr, OperandInfo82,0,nullptr },  // Inst #702 = MFOCRF8
  { 703,	2,	1,	39,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo47,0,nullptr },  // Inst #703 = MFSPR
  { 704,	2,	1,	43,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo81,0,nullptr },  // Inst #704 = MFSR
  { 705,	2,	1,	43,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #705 = MFSRIN
  { 706,	2,	1,	44,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo47,PPC::DeprecatedMFTB,nullptr },  // Inst #706 = MFTB
  { 707,	1,	1,	44,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #707 = MFTB8
  { 708,	1,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, nullptr, OperandInfo87,0,nullptr },  // Inst #708 = MFVRSAVE
  { 709,	2,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, nullptr, OperandInfo90,0,nullptr },  // Inst #709 = MFVRSAVEv
  { 710,	1,	1,	45,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo91,0,nullptr },  // Inst #710 = MFVSCR
  { 711,	0,	0,	46,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #711 = MSYNC
  { 712,	2,	0,	47,	4,	0, 0x20ULL, nullptr, nullptr, OperandInfo92,0,nullptr },  // Inst #712 = MTCRF
  { 713,	2,	0,	47,	4,	0, 0x20ULL, nullptr, nullptr, OperandInfo93,0,nullptr },  // Inst #713 = MTCRF8
  { 714,	1,	0,	48,	4,	0, 0x9ULL, nullptr, ImplicitList7, OperandInfo87,0,nullptr },  // Inst #714 = MTCTR
  { 715,	1,	0,	48,	4,	0, 0x9ULL, nullptr, ImplicitList8, OperandInfo88,0,nullptr },  // Inst #715 = MTCTR8
  { 716,	1,	0,	48,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList8, OperandInfo88,0,nullptr },  // Inst #716 = MTCTR8loop
  { 717,	1,	0,	48,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList7, OperandInfo87,0,nullptr },  // Inst #717 = MTCTRloop
  { 718,	2,	0,	48,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo47,0,nullptr },  // Inst #718 = MTDCR
  { 719,	1,	0,	49,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList13, ImplicitList13, OperandInfo5,0,nullptr },  // Inst #719 = MTFSB0
  { 720,	1,	0,	49,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList13, ImplicitList13, OperandInfo5,0,nullptr },  // Inst #720 = MTFSB1
  { 721,	4,	0,	40,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo94,0,nullptr },  // Inst #721 = MTFSF
  { 722,	3,	1,	40,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo95,0,nullptr },  // Inst #722 = MTFSFI
  { 723,	3,	1,	40,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo95,0,nullptr },  // Inst #723 = MTFSFIo
  { 724,	2,	0,	49,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList13, ImplicitList13, OperandInfo96,0,nullptr },  // Inst #724 = MTFSFb
  { 725,	4,	0,	40,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo94,0,nullptr },  // Inst #725 = MTFSFo
  { 726,	1,	0,	48,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList10, OperandInfo87,0,nullptr },  // Inst #726 = MTLR
  { 727,	1,	0,	48,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList12, OperandInfo88,0,nullptr },  // Inst #727 = MTLR8
  { 728,	2,	0,	50,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo47,0,nullptr },  // Inst #728 = MTMSR
  { 729,	2,	0,	51,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo47,0,nullptr },  // Inst #729 = MTMSRD
  { 730,	2,	1,	47,	4,	0, 0x21ULL, nullptr, nullptr, OperandInfo97,0,nullptr },  // Inst #730 = MTOCRF
  { 731,	2,	1,	47,	4,	0, 0x21ULL, nullptr, nullptr, OperandInfo98,0,nullptr },  // Inst #731 = MTOCRF8
  { 732,	2,	0,	48,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo92,0,nullptr },  // Inst #732 = MTSPR
  { 733,	2,	0,	52,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo81,0,nullptr },  // Inst #733 = MTSR
  { 734,	2,	0,	52,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #734 = MTSRIN
  { 735,	1,	0,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0xaULL, nullptr, nullptr, OperandInfo87,0,nullptr },  // Inst #735 = MTVRSAVE
  { 736,	2,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0xaULL, nullptr, nullptr, OperandInfo99,0,nullptr },  // Inst #736 = MTVRSAVEv
  { 737,	1,	0,	8,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo91,0,nullptr },  // Inst #737 = MTVSCR
  { 738,	3,	1,	53,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #738 = MULHD
  { 739,	3,	1,	54,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #739 = MULHDU
  { 740,	3,	1,	54,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #740 = MULHDUo
  { 741,	3,	1,	53,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #741 = MULHDo
  { 742,	3,	1,	53,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #742 = MULHW
  { 743,	3,	1,	54,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #743 = MULHWU
  { 744,	3,	1,	54,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #744 = MULHWUo
  { 745,	3,	1,	53,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #745 = MULHWo
  { 746,	3,	1,	55,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #746 = MULLD
  { 747,	3,	1,	55,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #747 = MULLDo
  { 748,	3,	1,	56,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #748 = MULLI
  { 749,	3,	1,	56,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #749 = MULLI8
  { 750,	3,	1,	53,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #750 = MULLW
  { 751,	3,	1,	53,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #751 = MULLWo
  { 752,	0,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, ImplicitList10, nullptr,0,nullptr },  // Inst #752 = MoveGOTtoLR
  { 753,	0,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, ImplicitList10, nullptr,0,nullptr },  // Inst #753 = MovePCtoLR
  { 754,	0,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, ImplicitList12, nullptr,0,nullptr },  // Inst #754 = MovePCtoLR8
  { 755,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #755 = NAND
  { 756,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #756 = NAND8
  { 757,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #757 = NAND8o
  { 758,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #758 = NANDo
  { 759,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #759 = NEG
  { 760,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #760 = NEG8
  { 761,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo21,0,nullptr },  // Inst #761 = NEG8o
  { 762,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo20,0,nullptr },  // Inst #762 = NEGo
  { 763,	0,	0,	1,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #763 = NOP
  { 764,	0,	0,	1,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #764 = NOP_GT_PWR6
  { 765,	0,	0,	1,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #765 = NOP_GT_PWR7
  { 766,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #766 = NOR
  { 767,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #767 = NOR8
  { 768,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #768 = NOR8o
  { 769,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #769 = NORo
  { 770,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #770 = OR
  { 771,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #771 = OR8
  { 772,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #772 = OR8o
  { 773,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #773 = ORC
  { 774,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #774 = ORC8
  { 775,	3,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #775 = ORC8o
  { 776,	3,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #776 = ORCo
  { 777,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #777 = ORI
  { 778,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #778 = ORI8
  { 779,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #779 = ORIS
  { 780,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #780 = ORIS8
  { 781,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #781 = ORo
  { 782,	2,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo21,0,nullptr },  // Inst #782 = POPCNTD
  { 783,	2,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #783 = POPCNTW
  { 784,	1,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo87,0,nullptr },  // Inst #784 = PPC32GOT
  { 785,	2,	2,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #785 = PPC32PICGOT
  { 786,	3,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo100,0,nullptr },  // Inst #786 = RESTORE_CR
  { 787,	3,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo101,0,nullptr },  // Inst #787 = RESTORE_CRBIT
  { 788,	3,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo102,0,nullptr },  // Inst #788 = RESTORE_VRSAVE
  { 789,	0,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #789 = RFCI
  { 790,	0,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #790 = RFDI
  { 791,	0,	0,	57,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #791 = RFI
  { 792,	0,	0,	58,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #792 = RFID
  { 793,	0,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #793 = RFMCI
  { 794,	4,	1,	59,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo103,0,nullptr },  // Inst #794 = RLDCL
  { 795,	4,	1,	59,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo103,0,nullptr },  // Inst #795 = RLDCLo
  { 796,	4,	1,	59,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo103,0,nullptr },  // Inst #796 = RLDCR
  { 797,	4,	1,	59,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo103,0,nullptr },  // Inst #797 = RLDCRo
  { 798,	4,	1,	60,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #798 = RLDIC
  { 799,	4,	1,	60,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #799 = RLDICL
  { 800,	4,	1,	60,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo104,0,nullptr },  // Inst #800 = RLDICL_32_64
  { 801,	4,	1,	60,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo33,0,nullptr },  // Inst #801 = RLDICLo
  { 802,	4,	1,	60,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #802 = RLDICR
  { 803,	4,	1,	60,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo33,0,nullptr },  // Inst #803 = RLDICRo
  { 804,	4,	1,	60,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo33,0,nullptr },  // Inst #804 = RLDICo
  { 805,	5,	1,	60,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo105,0,nullptr },  // Inst #805 = RLDIMI
  { 806,	5,	1,	60,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo105,0,nullptr },  // Inst #806 = RLDIMIo
  { 807,	6,	1,	61,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, nullptr, OperandInfo106,0,nullptr },  // Inst #807 = RLWIMI
  { 808,	6,	1,	61,	4,	0, 0xcULL, nullptr, nullptr, OperandInfo107,0,nullptr },  // Inst #808 = RLWIMI8
  { 809,	6,	1,	61,	4,	0, 0xcULL, nullptr, ImplicitList1, OperandInfo107,0,nullptr },  // Inst #809 = RLWIMI8o
  { 810,	6,	1,	61,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList1, OperandInfo106,0,nullptr },  // Inst #810 = RLWIMIo
  { 811,	5,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo108,0,nullptr },  // Inst #811 = RLWINM
  { 812,	5,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo109,0,nullptr },  // Inst #812 = RLWINM8
  { 813,	5,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo109,0,nullptr },  // Inst #813 = RLWINM8o
  { 814,	5,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList1, OperandInfo108,0,nullptr },  // Inst #814 = RLWINMo
  { 815,	5,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo110,0,nullptr },  // Inst #815 = RLWNM
  { 816,	5,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo111,0,nullptr },  // Inst #816 = RLWNM8
  { 817,	5,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo111,0,nullptr },  // Inst #817 = RLWNM8o
  { 818,	5,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo110,0,nullptr },  // Inst #818 = RLWNMo
  { 819,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #819 = ROTRDI
  { 820,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #820 = ROTRDIo
  { 821,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #821 = ROTRWI
  { 822,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #822 = ROTRWIo
  { 823,	2,	2,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #823 = ReadTB
  { 824,	1,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #824 = SC
  { 825,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo112,0,nullptr },  // Inst #825 = SELECT_CC_F4
  { 826,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo113,0,nullptr },  // Inst #826 = SELECT_CC_F8
  { 827,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo114,0,nullptr },  // Inst #827 = SELECT_CC_I4
  { 828,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo115,0,nullptr },  // Inst #828 = SELECT_CC_I8
  { 829,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo116,0,nullptr },  // Inst #829 = SELECT_CC_VRRC
  { 830,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo113,0,nullptr },  // Inst #830 = SELECT_CC_VSFRC
  { 831,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo117,0,nullptr },  // Inst #831 = SELECT_CC_VSRC
  { 832,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo118,0,nullptr },  // Inst #832 = SELECT_F4
  { 833,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo119,0,nullptr },  // Inst #833 = SELECT_F8
  { 834,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo120,0,nullptr },  // Inst #834 = SELECT_I4
  { 835,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo121,0,nullptr },  // Inst #835 = SELECT_I8
  { 836,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo122,0,nullptr },  // Inst #836 = SELECT_VRRC
  { 837,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo119,0,nullptr },  // Inst #837 = SELECT_VSFRC
  { 838,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo123,0,nullptr },  // Inst #838 = SELECT_VSRC
  { 839,	0,	0,	62,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #839 = SLBIA
  { 840,	1,	0,	63,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87,0,nullptr },  // Inst #840 = SLBIE
  { 841,	2,	1,	64,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #841 = SLBMFEE
  { 842,	2,	0,	65,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #842 = SLBMTE
  { 843,	3,	1,	59,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo124,0,nullptr },  // Inst #843 = SLD
  { 844,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #844 = SLDI
  { 845,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #845 = SLDIo
  { 846,	3,	1,	59,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo124,0,nullptr },  // Inst #846 = SLDo
  { 847,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #847 = SLW
  { 848,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #848 = SLW8
  { 849,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #849 = SLW8o
  { 850,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #850 = SLWI
  { 851,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #851 = SLWIo
  { 852,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #852 = SLWo
  { 853,	3,	0,	0,	4,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo100,0,nullptr },  // Inst #853 = SPILL_CR
  { 854,	3,	0,	0,	4,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo101,0,nullptr },  // Inst #854 = SPILL_CRBIT
  { 855,	3,	0,	0,	4,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo102,0,nullptr },  // Inst #855 = SPILL_VRSAVE
  { 856,	3,	1,	59,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo124,0,nullptr },  // Inst #856 = SRAD
  { 857,	3,	1,	60,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo15,0,nullptr },  // Inst #857 = SRADI
  { 858,	3,	1,	60,	4,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo15,0,nullptr },  // Inst #858 = SRADIo
  { 859,	3,	1,	59,	4,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo124,0,nullptr },  // Inst #859 = SRADo
  { 860,	3,	1,	66,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo12,0,nullptr },  // Inst #860 = SRAW
  { 861,	3,	1,	66,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo13,0,nullptr },  // Inst #861 = SRAWI
  { 862,	3,	1,	66,	4,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo13,0,nullptr },  // Inst #862 = SRAWIo
  { 863,	3,	1,	66,	4,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo12,0,nullptr },  // Inst #863 = SRAWo
  { 864,	3,	1,	59,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo124,0,nullptr },  // Inst #864 = SRD
  { 865,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #865 = SRDI
  { 866,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #866 = SRDIo
  { 867,	3,	1,	59,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo124,0,nullptr },  // Inst #867 = SRDo
  { 868,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #868 = SRW
  { 869,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #869 = SRW8
  { 870,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #870 = SRW8o
  { 871,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #871 = SRWI
  { 872,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #872 = SRWIo
  { 873,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #873 = SRWo
  { 874,	3,	0,	45,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #874 = STB
  { 875,	3,	0,	45,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #875 = STB8
  { 876,	3,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #876 = STBCIX
  { 877,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo125,0,nullptr },  // Inst #877 = STBU
  { 878,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo126,0,nullptr },  // Inst #878 = STBU8
  { 879,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo127,0,nullptr },  // Inst #879 = STBUX
  { 880,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo128,0,nullptr },  // Inst #880 = STBUX8
  { 881,	3,	0,	45,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo68,0,nullptr },  // Inst #881 = STBX
  { 882,	3,	0,	45,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo69,0,nullptr },  // Inst #882 = STBX8
  { 883,	3,	0,	68,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #883 = STD
  { 884,	3,	0,	45,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo69,0,nullptr },  // Inst #884 = STDBRX
  { 885,	3,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #885 = STDCIX
  { 886,	3,	0,	69,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, ImplicitList1, OperandInfo69,0,nullptr },  // Inst #886 = STDCX
  { 887,	4,	1,	70,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo126,0,nullptr },  // Inst #887 = STDU
  { 888,	4,	1,	71,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo128,0,nullptr },  // Inst #888 = STDUX
  { 889,	3,	0,	68,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo69,0,nullptr },  // Inst #889 = STDX
  { 890,	3,	0,	72,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo73,0,nullptr },  // Inst #890 = STFD
  { 891,	4,	1,	73,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo129,0,nullptr },  // Inst #891 = STFDU
  { 892,	4,	1,	73,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo130,0,nullptr },  // Inst #892 = STFDUX
  { 893,	3,	0,	72,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo76,0,nullptr },  // Inst #893 = STFDX
  { 894,	3,	0,	72,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo76,0,nullptr },  // Inst #894 = STFIWX
  { 895,	3,	0,	72,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo77,0,nullptr },  // Inst #895 = STFS
  { 896,	4,	1,	73,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo131,0,nullptr },  // Inst #896 = STFSU
  { 897,	4,	1,	73,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #897 = STFSUX
  { 898,	3,	0,	72,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo80,0,nullptr },  // Inst #898 = STFSX
  { 899,	3,	0,	45,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #899 = STH
  { 900,	3,	0,	45,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #900 = STH8
  { 901,	3,	0,	45,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo68,0,nullptr },  // Inst #901 = STHBRX
  { 902,	3,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #902 = STHCIX
  { 903,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo125,0,nullptr },  // Inst #903 = STHU
  { 904,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo126,0,nullptr },  // Inst #904 = STHU8
  { 905,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo127,0,nullptr },  // Inst #905 = STHUX
  { 906,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo128,0,nullptr },  // Inst #906 = STHUX8
  { 907,	3,	0,	45,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo68,0,nullptr },  // Inst #907 = STHX
  { 908,	3,	0,	45,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo69,0,nullptr },  // Inst #908 = STHX8
  { 909,	3,	0,	34,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #909 = STMW
  { 910,	3,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #910 = STSWI
  { 911,	3,	0,	45,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #911 = STVEBX
  { 912,	3,	0,	45,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #912 = STVEHX
  { 913,	3,	0,	45,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #913 = STVEWX
  { 914,	3,	0,	45,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #914 = STVX
  { 915,	3,	0,	45,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #915 = STVXL
  { 916,	3,	0,	45,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #916 = STW
  { 917,	3,	0,	45,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #917 = STW8
  { 918,	3,	0,	45,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo68,0,nullptr },  // Inst #918 = STWBRX
  { 919,	3,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #919 = STWCIX
  { 920,	3,	0,	74,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, ImplicitList1, OperandInfo68,0,nullptr },  // Inst #920 = STWCX
  { 921,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo125,0,nullptr },  // Inst #921 = STWU
  { 922,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo126,0,nullptr },  // Inst #922 = STWU8
  { 923,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo127,0,nullptr },  // Inst #923 = STWUX
  { 924,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo128,0,nullptr },  // Inst #924 = STWUX8
  { 925,	3,	0,	45,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo68,0,nullptr },  // Inst #925 = STWX
  { 926,	3,	0,	45,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo69,0,nullptr },  // Inst #926 = STWX8
  { 927,	3,	0,	72,	4,	0|(1<<MCID::MayStore), 0x0ULL, ImplicitList13, nullptr, OperandInfo84,0,nullptr },  // Inst #927 = STXSDX
  { 928,	3,	0,	72,	4,	0|(1<<MCID::MayStore), 0x0ULL, ImplicitList13, nullptr, OperandInfo85,0,nullptr },  // Inst #928 = STXVD2X
  { 929,	3,	0,	72,	4,	0|(1<<MCID::MayStore), 0x0ULL, ImplicitList13, nullptr, OperandInfo85,0,nullptr },  // Inst #929 = STXVW4X
  { 930,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #930 = SUBF
  { 931,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #931 = SUBF8
  { 932,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #932 = SUBF8o
  { 933,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList2, OperandInfo12,0,nullptr },  // Inst #933 = SUBFC
  { 934,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList2, OperandInfo14,0,nullptr },  // Inst #934 = SUBFC8
  { 935,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList2, OperandInfo14,0,nullptr },  // Inst #935 = SUBFC8o
  { 936,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList3, OperandInfo12,0,nullptr },  // Inst #936 = SUBFCo
  { 937,	3,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo12,0,nullptr },  // Inst #937 = SUBFE
  { 938,	3,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo14,0,nullptr },  // Inst #938 = SUBFE8
  { 939,	3,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo14,0,nullptr },  // Inst #939 = SUBFE8o
  { 940,	3,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo12,0,nullptr },  // Inst #940 = SUBFEo
  { 941,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo13,0,nullptr },  // Inst #941 = SUBFIC
  { 942,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo15,0,nullptr },  // Inst #942 = SUBFIC8
  { 943,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo20,0,nullptr },  // Inst #943 = SUBFME
  { 944,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo21,0,nullptr },  // Inst #944 = SUBFME8
  { 945,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo21,0,nullptr },  // Inst #945 = SUBFME8o
  { 946,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo20,0,nullptr },  // Inst #946 = SUBFMEo
  { 947,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo20,0,nullptr },  // Inst #947 = SUBFZE
  { 948,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo21,0,nullptr },  // Inst #948 = SUBFZE8
  { 949,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo21,0,nullptr },  // Inst #949 = SUBFZE8o
  { 950,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo20,0,nullptr },  // Inst #950 = SUBFZEo
  { 951,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #951 = SUBFo
  { 952,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #952 = SUBI
  { 953,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #953 = SUBIC
  { 954,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #954 = SUBICo
  { 955,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #955 = SUBIS
  { 956,	1,	0,	46,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #956 = SYNC
  { 957,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, nullptr, OperandInfo5,0,nullptr },  // Inst #957 = TAILB
  { 958,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, nullptr, OperandInfo5,0,nullptr },  // Inst #958 = TAILB8
  { 959,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, nullptr, OperandInfo5,0,nullptr },  // Inst #959 = TAILBA
  { 960,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, nullptr, OperandInfo5,0,nullptr },  // Inst #960 = TAILBA8
  { 961,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, nullptr, nullptr,0,nullptr },  // Inst #961 = TAILBCTR
  { 962,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, nullptr, nullptr,0,nullptr },  // Inst #962 = TAILBCTR8
  { 963,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList13, nullptr, OperandInfo133,0,nullptr },  // Inst #963 = TCRETURNai
  { 964,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList13, nullptr, OperandInfo133,0,nullptr },  // Inst #964 = TCRETURNai8
  { 965,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList13, nullptr, OperandInfo133,0,nullptr },  // Inst #965 = TCRETURNdi
  { 966,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList13, nullptr, OperandInfo133,0,nullptr },  // Inst #966 = TCRETURNdi8
  { 967,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList13, nullptr, OperandInfo134,0,nullptr },  // Inst #967 = TCRETURNri
  { 968,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList13, nullptr, OperandInfo135,0,nullptr },  // Inst #968 = TCRETURNri8
  { 969,	3,	0,	75,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #969 = TD
  { 970,	3,	0,	75,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo137,0,nullptr },  // Inst #970 = TDI
  { 971,	0,	0,	76,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #971 = TLBIA
  { 972,	2,	0,	77,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #972 = TLBIE
  { 973,	1,	0,	78,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87,0,nullptr },  // Inst #973 = TLBIEL
  { 974,	2,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #974 = TLBIVAX
  { 975,	1,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87,0,nullptr },  // Inst #975 = TLBLD
  { 976,	1,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87,0,nullptr },  // Inst #976 = TLBLI
  { 977,	0,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #977 = TLBRE
  { 978,	3,	1,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #978 = TLBRE2
  { 979,	2,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #979 = TLBSX
  { 980,	3,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #980 = TLBSX2
  { 981,	3,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #981 = TLBSX2D
  { 982,	0,	0,	79,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #982 = TLBSYNC
  { 983,	0,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #983 = TLBWE
  { 984,	3,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo138,0,nullptr },  // Inst #984 = TLBWE2
  { 985,	0,	0,	8,	4,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #985 = TRAP
  { 986,	3,	0,	80,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo41,0,nullptr },  // Inst #986 = TW
  { 987,	3,	0,	80,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo139,0,nullptr },  // Inst #987 = TWI
  { 988,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #988 = UPDATE_VRSAVE
  { 989,	3,	2,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #989 = UpdateGBR
  { 990,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #990 = VADDCUW
  { 991,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #991 = VADDFP
  { 992,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #992 = VADDSBS
  { 993,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #993 = VADDSHS
  { 994,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #994 = VADDSWS
  { 995,	3,	1,	81,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #995 = VADDUBM
  { 996,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #996 = VADDUBS
  { 997,	3,	1,	81,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #997 = VADDUHM
  { 998,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #998 = VADDUHS
  { 999,	3,	1,	81,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #999 = VADDUWM
  { 1000,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1000 = VADDUWS
  { 1001,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1001 = VAND
  { 1002,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1002 = VANDC
  { 1003,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1003 = VAVGSB
  { 1004,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1004 = VAVGSH
  { 1005,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1005 = VAVGSW
  { 1006,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1006 = VAVGUB
  { 1007,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1007 = VAVGUH
  { 1008,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1008 = VAVGUW
  { 1009,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo141,0,nullptr },  // Inst #1009 = VCFSX
  { 1010,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1010 = VCFSX_0
  { 1011,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo141,0,nullptr },  // Inst #1011 = VCFUX
  { 1012,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1012 = VCFUX_0
  { 1013,	2,	1,	81,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1013 = VCLZB
  { 1014,	2,	1,	81,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1014 = VCLZD
  { 1015,	2,	1,	81,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1015 = VCLZH
  { 1016,	2,	1,	81,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1016 = VCLZW
  { 1017,	3,	1,	82,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1017 = VCMPBFP
  { 1018,	3,	1,	82,	4,	0, 0x28ULL, nullptr, ImplicitList24, OperandInfo140,0,nullptr },  // Inst #1018 = VCMPBFPo
  { 1019,	3,	1,	82,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1019 = VCMPEQFP
  { 1020,	3,	1,	82,	4,	0, 0x28ULL, nullptr, ImplicitList24, OperandInfo140,0,nullptr },  // Inst #1020 = VCMPEQFPo
  { 1021,	3,	1,	82,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1021 = VCMPEQUB
  { 1022,	3,	1,	82,	4,	0, 0x28ULL, nullptr, ImplicitList24, OperandInfo140,0,nullptr },  // Inst #1022 = VCMPEQUBo
  { 1023,	3,	1,	82,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1023 = VCMPEQUH
  { 1024,	3,	1,	82,	4,	0, 0x28ULL, nullptr, ImplicitList24, OperandInfo140,0,nullptr },  // Inst #1024 = VCMPEQUHo
  { 1025,	3,	1,	82,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1025 = VCMPEQUW
  { 1026,	3,	1,	82,	4,	0, 0x28ULL, nullptr, ImplicitList24, OperandInfo140,0,nullptr },  // Inst #1026 = VCMPEQUWo
  { 1027,	3,	1,	82,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1027 = VCMPGEFP
  { 1028,	3,	1,	82,	4,	0, 0x28ULL, nullptr, ImplicitList24, OperandInfo140,0,nullptr },  // Inst #1028 = VCMPGEFPo
  { 1029,	3,	1,	82,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1029 = VCMPGTFP
  { 1030,	3,	1,	82,	4,	0, 0x28ULL, nullptr, ImplicitList24, OperandInfo140,0,nullptr },  // Inst #1030 = VCMPGTFPo
  { 1031,	3,	1,	82,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1031 = VCMPGTSB
  { 1032,	3,	1,	82,	4,	0, 0x28ULL, nullptr, ImplicitList24, OperandInfo140,0,nullptr },  // Inst #1032 = VCMPGTSBo
  { 1033,	3,	1,	82,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1033 = VCMPGTSH
  { 1034,	3,	1,	82,	4,	0, 0x28ULL, nullptr, ImplicitList24, OperandInfo140,0,nullptr },  // Inst #1034 = VCMPGTSHo
  { 1035,	3,	1,	82,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1035 = VCMPGTSW
  { 1036,	3,	1,	82,	4,	0, 0x28ULL, nullptr, ImplicitList24, OperandInfo140,0,nullptr },  // Inst #1036 = VCMPGTSWo
  { 1037,	3,	1,	82,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1037 = VCMPGTUB
  { 1038,	3,	1,	82,	4,	0, 0x28ULL, nullptr, ImplicitList24, OperandInfo140,0,nullptr },  // Inst #1038 = VCMPGTUBo
  { 1039,	3,	1,	82,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1039 = VCMPGTUH
  { 1040,	3,	1,	82,	4,	0, 0x28ULL, nullptr, ImplicitList24, OperandInfo140,0,nullptr },  // Inst #1040 = VCMPGTUHo
  { 1041,	3,	1,	82,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1041 = VCMPGTUW
  { 1042,	3,	1,	82,	4,	0, 0x28ULL, nullptr, ImplicitList24, OperandInfo140,0,nullptr },  // Inst #1042 = VCMPGTUWo
  { 1043,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo141,0,nullptr },  // Inst #1043 = VCTSXS
  { 1044,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1044 = VCTSXS_0
  { 1045,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo141,0,nullptr },  // Inst #1045 = VCTUXS
  { 1046,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1046 = VCTUXS_0
  { 1047,	3,	1,	81,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1047 = VEQV
  { 1048,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1048 = VEXPTEFP
  { 1049,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1049 = VLOGEFP
  { 1050,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo143,0,nullptr },  // Inst #1050 = VMADDFP
  { 1051,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1051 = VMAXFP
  { 1052,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1052 = VMAXSB
  { 1053,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1053 = VMAXSH
  { 1054,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1054 = VMAXSW
  { 1055,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1055 = VMAXUB
  { 1056,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1056 = VMAXUH
  { 1057,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1057 = VMAXUW
  { 1058,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo143,0,nullptr },  // Inst #1058 = VMHADDSHS
  { 1059,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo143,0,nullptr },  // Inst #1059 = VMHRADDSHS
  { 1060,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1060 = VMINFP
  { 1061,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1061 = VMINSB
  { 1062,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1062 = VMINSH
  { 1063,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1063 = VMINSW
  { 1064,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1064 = VMINUB
  { 1065,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1065 = VMINUH
  { 1066,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1066 = VMINUW
  { 1067,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo143,0,nullptr },  // Inst #1067 = VMLADDUHM
  { 1068,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1068 = VMRGHB
  { 1069,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1069 = VMRGHH
  { 1070,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1070 = VMRGHW
  { 1071,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1071 = VMRGLB
  { 1072,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1072 = VMRGLH
  { 1073,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1073 = VMRGLW
  { 1074,	4,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo143,0,nullptr },  // Inst #1074 = VMSUMMBM
  { 1075,	4,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo143,0,nullptr },  // Inst #1075 = VMSUMSHM
  { 1076,	4,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo143,0,nullptr },  // Inst #1076 = VMSUMSHS
  { 1077,	4,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo143,0,nullptr },  // Inst #1077 = VMSUMUBM
  { 1078,	4,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo143,0,nullptr },  // Inst #1078 = VMSUMUHM
  { 1079,	4,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo143,0,nullptr },  // Inst #1079 = VMSUMUHS
  { 1080,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1080 = VMULESB
  { 1081,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1081 = VMULESH
  { 1082,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1082 = VMULEUB
  { 1083,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1083 = VMULEUH
  { 1084,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1084 = VMULOSB
  { 1085,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1085 = VMULOSH
  { 1086,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1086 = VMULOUB
  { 1087,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1087 = VMULOUH
  { 1088,	3,	1,	81,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1088 = VNAND
  { 1089,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo143,0,nullptr },  // Inst #1089 = VNMSUBFP
  { 1090,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1090 = VNOR
  { 1091,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1091 = VOR
  { 1092,	3,	1,	81,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1092 = VORC
  { 1093,	4,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo143,0,nullptr },  // Inst #1093 = VPERM
  { 1094,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1094 = VPKPX
  { 1095,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1095 = VPKSHSS
  { 1096,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1096 = VPKSHUS
  { 1097,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1097 = VPKSWSS
  { 1098,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1098 = VPKSWUS
  { 1099,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1099 = VPKUHUM
  { 1100,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1100 = VPKUHUS
  { 1101,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1101 = VPKUWUM
  { 1102,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1102 = VPKUWUS
  { 1103,	2,	1,	81,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1103 = VPOPCNTB
  { 1104,	2,	1,	81,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1104 = VPOPCNTD
  { 1105,	2,	1,	81,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1105 = VPOPCNTH
  { 1106,	2,	1,	81,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1106 = VPOPCNTW
  { 1107,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1107 = VREFP
  { 1108,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1108 = VRFIM
  { 1109,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1109 = VRFIN
  { 1110,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1110 = VRFIP
  { 1111,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1111 = VRFIZ
  { 1112,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1112 = VRLB
  { 1113,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1113 = VRLH
  { 1114,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1114 = VRLW
  { 1115,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1115 = VRSQRTEFP
  { 1116,	4,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo143,0,nullptr },  // Inst #1116 = VSEL
  { 1117,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1117 = VSL
  { 1118,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1118 = VSLB
  { 1119,	4,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo144,0,nullptr },  // Inst #1119 = VSLDOI
  { 1120,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1120 = VSLH
  { 1121,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1121 = VSLO
  { 1122,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1122 = VSLW
  { 1123,	3,	1,	83,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo141,0,nullptr },  // Inst #1123 = VSPLTB
  { 1124,	3,	1,	83,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo141,0,nullptr },  // Inst #1124 = VSPLTH
  { 1125,	2,	1,	83,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo145,0,nullptr },  // Inst #1125 = VSPLTISB
  { 1126,	2,	1,	83,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo145,0,nullptr },  // Inst #1126 = VSPLTISH
  { 1127,	2,	1,	83,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo145,0,nullptr },  // Inst #1127 = VSPLTISW
  { 1128,	3,	1,	83,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo141,0,nullptr },  // Inst #1128 = VSPLTW
  { 1129,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1129 = VSR
  { 1130,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1130 = VSRAB
  { 1131,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1131 = VSRAH
  { 1132,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1132 = VSRAW
  { 1133,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1133 = VSRB
  { 1134,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1134 = VSRH
  { 1135,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1135 = VSRO
  { 1136,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1136 = VSRW
  { 1137,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1137 = VSUBCUW
  { 1138,	3,	1,	81,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1138 = VSUBFP
  { 1139,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1139 = VSUBSBS
  { 1140,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1140 = VSUBSHS
  { 1141,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1141 = VSUBSWS
  { 1142,	3,	1,	81,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1142 = VSUBUBM
  { 1143,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1143 = VSUBUBS
  { 1144,	3,	1,	81,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1144 = VSUBUHM
  { 1145,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1145 = VSUBUHS
  { 1146,	3,	1,	81,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1146 = VSUBUWM
  { 1147,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1147 = VSUBUWS
  { 1148,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1148 = VSUM2SWS
  { 1149,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1149 = VSUM4SBS
  { 1150,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1150 = VSUM4SHS
  { 1151,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1151 = VSUM4UBS
  { 1152,	3,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1152 = VSUMSWS
  { 1153,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1153 = VUPKHPX
  { 1154,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1154 = VUPKHSB
  { 1155,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1155 = VUPKHSH
  { 1156,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1156 = VUPKLPX
  { 1157,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1157 = VUPKLSB
  { 1158,	2,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo142,0,nullptr },  // Inst #1158 = VUPKLSH
  { 1159,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo140,0,nullptr },  // Inst #1159 = VXOR
  { 1160,	1,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo91,0,nullptr },  // Inst #1160 = V_SET0
  { 1161,	1,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo91,0,nullptr },  // Inst #1161 = V_SET0B
  { 1162,	1,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo91,0,nullptr },  // Inst #1162 = V_SET0H
  { 1163,	1,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo91,0,nullptr },  // Inst #1163 = V_SETALLONES
  { 1164,	1,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo91,0,nullptr },  // Inst #1164 = V_SETALLONESB
  { 1165,	1,	1,	4,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo91,0,nullptr },  // Inst #1165 = V_SETALLONESH
  { 1166,	1,	0,	8,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #1166 = WAIT
  { 1167,	1,	0,	50,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87,0,nullptr },  // Inst #1167 = WRTEE
  { 1168,	1,	0,	50,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #1168 = WRTEEI
  { 1169,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #1169 = XOR
  { 1170,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #1170 = XOR8
  { 1171,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #1171 = XOR8o
  { 1172,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #1172 = XORI
  { 1173,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #1173 = XORI8
  { 1174,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #1174 = XORIS
  { 1175,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #1175 = XORIS8
  { 1176,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #1176 = XORo
  { 1177,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo146,0,nullptr },  // Inst #1177 = XSABSDP
  { 1178,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo147,0,nullptr },  // Inst #1178 = XSADDDP
  { 1179,	3,	1,	13,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo148,0,nullptr },  // Inst #1179 = XSCMPODP
  { 1180,	3,	1,	13,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo148,0,nullptr },  // Inst #1180 = XSCMPUDP
  { 1181,	3,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo147,0,nullptr },  // Inst #1181 = XSCPSGNDP
  { 1182,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo146,0,nullptr },  // Inst #1182 = XSCVDPSP
  { 1183,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo146,0,nullptr },  // Inst #1183 = XSCVDPSXDS
  { 1184,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo146,0,nullptr },  // Inst #1184 = XSCVDPSXWS
  { 1185,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo146,0,nullptr },  // Inst #1185 = XSCVDPUXDS
  { 1186,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo146,0,nullptr },  // Inst #1186 = XSCVDPUXWS
  { 1187,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo146,0,nullptr },  // Inst #1187 = XSCVSPDP
  { 1188,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo146,0,nullptr },  // Inst #1188 = XSCVSXDDP
  { 1189,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo146,0,nullptr },  // Inst #1189 = XSCVUXDDP
  { 1190,	3,	1,	14,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo147,0,nullptr },  // Inst #1190 = XSDIVDP
  { 1191,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo149,0,nullptr },  // Inst #1191 = XSMADDADP
  { 1192,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo149,0,nullptr },  // Inst #1192 = XSMADDMDP
  { 1193,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo147,0,nullptr },  // Inst #1193 = XSMAXDP
  { 1194,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo147,0,nullptr },  // Inst #1194 = XSMINDP
  { 1195,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo149,0,nullptr },  // Inst #1195 = XSMSUBADP
  { 1196,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo149,0,nullptr },  // Inst #1196 = XSMSUBMDP
  { 1197,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo147,0,nullptr },  // Inst #1197 = XSMULDP
  { 1198,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo146,0,nullptr },  // Inst #1198 = XSNABSDP
  { 1199,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo146,0,nullptr },  // Inst #1199 = XSNEGDP
  { 1200,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo149,0,nullptr },  // Inst #1200 = XSNMADDADP
  { 1201,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo149,0,nullptr },  // Inst #1201 = XSNMADDMDP
  { 1202,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo149,0,nullptr },  // Inst #1202 = XSNMSUBADP
  { 1203,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo149,0,nullptr },  // Inst #1203 = XSNMSUBMDP
  { 1204,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo146,0,nullptr },  // Inst #1204 = XSRDPI
  { 1205,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo146,0,nullptr },  // Inst #1205 = XSRDPIC
  { 1206,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo146,0,nullptr },  // Inst #1206 = XSRDPIM
  { 1207,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo146,0,nullptr },  // Inst #1207 = XSRDPIP
  { 1208,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo146,0,nullptr },  // Inst #1208 = XSRDPIZ
  { 1209,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo146,0,nullptr },  // Inst #1209 = XSREDP
  { 1210,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo146,0,nullptr },  // Inst #1210 = XSRSQRTEDP
  { 1211,	2,	1,	17,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo146,0,nullptr },  // Inst #1211 = XSSQRTDP
  { 1212,	3,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo147,0,nullptr },  // Inst #1212 = XSSUBDP
  { 1213,	3,	1,	13,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo148,0,nullptr },  // Inst #1213 = XSTDIVDP
  { 1214,	2,	1,	13,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo150,0,nullptr },  // Inst #1214 = XSTSQRTDP
  { 1215,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1215 = XVABSDP
  { 1216,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1216 = XVABSSP
  { 1217,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1217 = XVADDDP
  { 1218,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1218 = XVADDSP
  { 1219,	3,	1,	82,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1219 = XVCMPEQDP
  { 1220,	3,	1,	82,	4,	0, 0x0ULL, ImplicitList13, ImplicitList24, OperandInfo152,0,nullptr },  // Inst #1220 = XVCMPEQDPo
  { 1221,	3,	1,	82,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1221 = XVCMPEQSP
  { 1222,	3,	1,	82,	4,	0, 0x0ULL, ImplicitList13, ImplicitList24, OperandInfo152,0,nullptr },  // Inst #1222 = XVCMPEQSPo
  { 1223,	3,	1,	82,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1223 = XVCMPGEDP
  { 1224,	3,	1,	82,	4,	0, 0x0ULL, ImplicitList13, ImplicitList24, OperandInfo152,0,nullptr },  // Inst #1224 = XVCMPGEDPo
  { 1225,	3,	1,	82,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1225 = XVCMPGESP
  { 1226,	3,	1,	82,	4,	0, 0x0ULL, ImplicitList13, ImplicitList24, OperandInfo152,0,nullptr },  // Inst #1226 = XVCMPGESPo
  { 1227,	3,	1,	82,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1227 = XVCMPGTDP
  { 1228,	3,	1,	82,	4,	0, 0x0ULL, ImplicitList13, ImplicitList24, OperandInfo152,0,nullptr },  // Inst #1228 = XVCMPGTDPo
  { 1229,	3,	1,	82,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1229 = XVCMPGTSP
  { 1230,	3,	1,	82,	4,	0, 0x0ULL, ImplicitList13, ImplicitList24, OperandInfo152,0,nullptr },  // Inst #1230 = XVCMPGTSPo
  { 1231,	3,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1231 = XVCPSGNDP
  { 1232,	3,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1232 = XVCPSGNSP
  { 1233,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1233 = XVCVDPSP
  { 1234,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1234 = XVCVDPSXDS
  { 1235,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1235 = XVCVDPSXWS
  { 1236,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1236 = XVCVDPUXDS
  { 1237,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1237 = XVCVDPUXWS
  { 1238,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1238 = XVCVSPDP
  { 1239,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1239 = XVCVSPSXDS
  { 1240,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1240 = XVCVSPSXWS
  { 1241,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1241 = XVCVSPUXDS
  { 1242,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1242 = XVCVSPUXWS
  { 1243,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1243 = XVCVSXDDP
  { 1244,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1244 = XVCVSXDSP
  { 1245,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1245 = XVCVSXWDP
  { 1246,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1246 = XVCVSXWSP
  { 1247,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1247 = XVCVUXDDP
  { 1248,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1248 = XVCVUXDSP
  { 1249,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1249 = XVCVUXWDP
  { 1250,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1250 = XVCVUXWSP
  { 1251,	3,	1,	14,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1251 = XVDIVDP
  { 1252,	3,	1,	15,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1252 = XVDIVSP
  { 1253,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo153,0,nullptr },  // Inst #1253 = XVMADDADP
  { 1254,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo153,0,nullptr },  // Inst #1254 = XVMADDASP
  { 1255,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo153,0,nullptr },  // Inst #1255 = XVMADDMDP
  { 1256,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo153,0,nullptr },  // Inst #1256 = XVMADDMSP
  { 1257,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1257 = XVMAXDP
  { 1258,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1258 = XVMAXSP
  { 1259,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1259 = XVMINDP
  { 1260,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1260 = XVMINSP
  { 1261,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo153,0,nullptr },  // Inst #1261 = XVMSUBADP
  { 1262,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo153,0,nullptr },  // Inst #1262 = XVMSUBASP
  { 1263,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo153,0,nullptr },  // Inst #1263 = XVMSUBMDP
  { 1264,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo153,0,nullptr },  // Inst #1264 = XVMSUBMSP
  { 1265,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1265 = XVMULDP
  { 1266,	3,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1266 = XVMULSP
  { 1267,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1267 = XVNABSDP
  { 1268,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1268 = XVNABSSP
  { 1269,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1269 = XVNEGDP
  { 1270,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1270 = XVNEGSP
  { 1271,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo153,0,nullptr },  // Inst #1271 = XVNMADDADP
  { 1272,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo153,0,nullptr },  // Inst #1272 = XVNMADDASP
  { 1273,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo153,0,nullptr },  // Inst #1273 = XVNMADDMDP
  { 1274,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo153,0,nullptr },  // Inst #1274 = XVNMADDMSP
  { 1275,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo153,0,nullptr },  // Inst #1275 = XVNMSUBADP
  { 1276,	4,	1,	4,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList13, nullptr, OperandInfo153,0,nullptr },  // Inst #1276 = XVNMSUBASP
  { 1277,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo153,0,nullptr },  // Inst #1277 = XVNMSUBMDP
  { 1278,	4,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo153,0,nullptr },  // Inst #1278 = XVNMSUBMSP
  { 1279,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1279 = XVRDPI
  { 1280,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1280 = XVRDPIC
  { 1281,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1281 = XVRDPIM
  { 1282,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1282 = XVRDPIP
  { 1283,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1283 = XVRDPIZ
  { 1284,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1284 = XVREDP
  { 1285,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1285 = XVRESP
  { 1286,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1286 = XVRSPI
  { 1287,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1287 = XVRSPIC
  { 1288,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1288 = XVRSPIM
  { 1289,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1289 = XVRSPIP
  { 1290,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1290 = XVRSPIZ
  { 1291,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1291 = XVRSQRTEDP
  { 1292,	2,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1292 = XVRSQRTESP
  { 1293,	2,	1,	17,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1293 = XVSQRTDP
  { 1294,	2,	1,	18,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo151,0,nullptr },  // Inst #1294 = XVSQRTSP
  { 1295,	3,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1295 = XVSUBDP
  { 1296,	3,	1,	4,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo152,0,nullptr },  // Inst #1296 = XVSUBSP
  { 1297,	3,	1,	13,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo154,0,nullptr },  // Inst #1297 = XVTDIVDP
  { 1298,	3,	1,	13,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo154,0,nullptr },  // Inst #1298 = XVTDIVSP
  { 1299,	2,	1,	13,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo155,0,nullptr },  // Inst #1299 = XVTSQRTDP
  { 1300,	2,	1,	13,	4,	0, 0x0ULL, ImplicitList13, nullptr, OperandInfo155,0,nullptr },  // Inst #1300 = XVTSQRTSP
  { 1301,	3,	1,	81,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo152,0,nullptr },  // Inst #1301 = XXLAND
  { 1302,	3,	1,	81,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo152,0,nullptr },  // Inst #1302 = XXLANDC
  { 1303,	3,	1,	81,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo152,0,nullptr },  // Inst #1303 = XXLNOR
  { 1304,	3,	1,	81,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo152,0,nullptr },  // Inst #1304 = XXLOR
  { 1305,	3,	1,	81,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo147,0,nullptr },  // Inst #1305 = XXLORf
  { 1306,	3,	1,	81,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo152,0,nullptr },  // Inst #1306 = XXLXOR
  { 1307,	3,	1,	83,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo152,0,nullptr },  // Inst #1307 = XXMRGHW
  { 1308,	3,	1,	83,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo152,0,nullptr },  // Inst #1308 = XXMRGLW
  { 1309,	4,	1,	83,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo156,0,nullptr },  // Inst #1309 = XXPERMDI
  { 1310,	4,	1,	83,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo157,0,nullptr },  // Inst #1310 = XXSEL
  { 1311,	4,	1,	83,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo156,0,nullptr },  // Inst #1311 = XXSLDWI
  { 1312,	3,	1,	83,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo158,0,nullptr },  // Inst #1312 = XXSPLTW
  { 1313,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo159,0,nullptr },  // Inst #1313 = gBC
  { 1314,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo159,0,nullptr },  // Inst #1314 = gBCA
  { 1315,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList16, ImplicitList7, OperandInfo160,0,nullptr },  // Inst #1315 = gBCCTR
  { 1316,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList16, ImplicitList25, OperandInfo160,0,nullptr },  // Inst #1316 = gBCCTRL
  { 1317,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList25, OperandInfo159,0,nullptr },  // Inst #1317 = gBCL
  { 1318,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList25, OperandInfo159,0,nullptr },  // Inst #1318 = gBCLA
  { 1319,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList16, ImplicitList7, OperandInfo160,0,nullptr },  // Inst #1319 = gBCLR
  { 1320,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList16, ImplicitList25, OperandInfo160,0,nullptr },  // Inst #1320 = gBCLRL
};

extern const char PPCInstrNameData[] = {
  /* 0 */ 'M', 'T', 'F', 'S', 'B', '0', 0,
  /* 7 */ 'V', '_', 'S', 'E', 'T', '0', 0,
  /* 14 */ 'V', 'C', 'T', 'S', 'X', 'S', '_', '0', 0,
  /* 23 */ 'V', 'C', 'T', 'U', 'X', 'S', '_', '0', 0,
  /* 32 */ 'V', 'C', 'F', 'S', 'X', '_', '0', 0,
  /* 40 */ 'V', 'C', 'F', 'U', 'X', '_', '0', 0,
  /* 48 */ 'M', 'T', 'F', 'S', 'B', '1', 0,
  /* 55 */ 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', '3', '2', 0,
  /* 71 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 91 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 111 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 132 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 152 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 168 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 188 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 208 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 227 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', '3', '2', 0,
  /* 240 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', '3', '2', 0,
  /* 253 */ 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 267 */ 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 281 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 298 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 315 */ 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 330 */ 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 343 */ 'L', 'W', 'A', '_', '3', '2', 0,
  /* 350 */ 'L', 'W', 'A', 'X', '_', '3', '2', 0,
  /* 358 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'L', 'o', 'n', 'g', 'J', 'm', 'p', '3', '2', 0,
  /* 376 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'J', 'm', 'p', '3', '2', 0,
  /* 393 */ 'T', 'L', 'B', 'R', 'E', '2', 0,
  /* 400 */ 'T', 'L', 'B', 'W', 'E', '2', 0,
  /* 407 */ 'T', 'L', 'B', 'S', 'X', '2', 0,
  /* 414 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '6', '4', 0,
  /* 434 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '6', '4', 0,
  /* 454 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 475 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 495 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 511 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 531 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 551 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 570 */ 'D', 'S', 'T', '6', '4', 0,
  /* 576 */ 'D', 'S', 'T', 'S', 'T', '6', '4', 0,
  /* 584 */ 'D', 'S', 'T', 'T', '6', '4', 0,
  /* 591 */ 'D', 'S', 'T', 'S', 'T', 'T', '6', '4', 0,
  /* 600 */ 'E', 'X', 'T', 'S', 'B', '8', '_', '3', '2', '_', '6', '4', 0,
  /* 613 */ 'E', 'X', 'T', 'S', 'H', '8', '_', '3', '2', '_', '6', '4', 0,
  /* 626 */ 'R', 'L', 'D', 'I', 'C', 'L', '_', '3', '2', '_', '6', '4', 0,
  /* 639 */ 'E', 'X', 'T', 'S', 'W', '_', '3', '2', '_', '6', '4', 0,
  /* 651 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'L', 'o', 'n', 'g', 'J', 'm', 'p', '6', '4', 0,
  /* 669 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'J', 'm', 'p', '6', '4', 0,
  /* 686 */ 'A', 'D', 'D', '4', 0,
  /* 691 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '4', 0,
  /* 704 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '4', 0,
  /* 714 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '4', 0,
  /* 727 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '4', 0,
  /* 737 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '1', '6', 0,
  /* 757 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '1', '6', 0,
  /* 777 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 798 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 818 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 834 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 854 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 874 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 893 */ 'N', 'O', 'P', '_', 'G', 'T', '_', 'P', 'W', 'R', '6', 0,
  /* 905 */ 'N', 'O', 'P', '_', 'G', 'T', '_', 'P', 'W', 'R', '7', 0,
  /* 917 */ 'T', 'A', 'I', 'L', 'B', 'A', '8', 0,
  /* 925 */ 'L', 'H', 'A', '8', 0,
  /* 930 */ 'B', 'L', 'A', '8', 0,
  /* 935 */ 'T', 'A', 'I', 'L', 'B', '8', 0,
  /* 942 */ 'C', 'M', 'P', 'B', '8', 0,
  /* 948 */ 'E', 'X', 'T', 'S', 'B', '8', 0,
  /* 955 */ 'M', 'F', 'T', 'B', '8', 0,
  /* 961 */ 'S', 'T', 'B', '8', 0,
  /* 966 */ 'A', 'D', 'D', 'C', '8', 0,
  /* 972 */ 'A', 'N', 'D', 'C', '8', 0,
  /* 978 */ 'S', 'U', 'B', 'F', 'C', '8', 0,
  /* 985 */ 'A', 'D', 'D', 'I', 'C', '8', 0,
  /* 992 */ 'S', 'U', 'B', 'F', 'I', 'C', '8', 0,
  /* 1000 */ 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', '8', 0,
  /* 1010 */ 'O', 'R', 'C', '8', 0,
  /* 1015 */ 'A', 'D', 'D', '8', 0,
  /* 1020 */ 'N', 'A', 'N', 'D', '8', 0,
  /* 1026 */ 'A', 'D', 'D', 'E', '8', 0,
  /* 1032 */ 'S', 'U', 'B', 'F', 'E', '8', 0,
  /* 1039 */ 'A', 'D', 'D', 'M', 'E', '8', 0,
  /* 1046 */ 'S', 'U', 'B', 'F', 'M', 'E', '8', 0,
  /* 1054 */ 'A', 'D', 'D', 'Z', 'E', '8', 0,
  /* 1061 */ 'S', 'U', 'B', 'F', 'Z', 'E', '8', 0,
  /* 1069 */ 'S', 'U', 'B', 'F', '8', 0,
  /* 1075 */ 'M', 'F', 'O', 'C', 'R', 'F', '8', 0,
  /* 1083 */ 'M', 'T', 'O', 'C', 'R', 'F', '8', 0,
  /* 1091 */ 'M', 'T', 'C', 'R', 'F', '8', 0,
  /* 1098 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '8', 0,
  /* 1111 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '8', 0,
  /* 1121 */ 'N', 'E', 'G', '8', 0,
  /* 1126 */ 'E', 'X', 'T', 'S', 'H', '8', 0,
  /* 1133 */ 'S', 'T', 'H', '8', 0,
  /* 1138 */ 'A', 'D', 'D', 'I', '8', 0,
  /* 1144 */ 'M', 'U', 'L', 'L', 'I', '8', 0,
  /* 1151 */ 'R', 'L', 'W', 'I', 'M', 'I', '8', 0,
  /* 1159 */ 'X', 'O', 'R', 'I', '8', 0,
  /* 1165 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '8', 0,
  /* 1184 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '8', 0,
  /* 1197 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '8', 0,
  /* 1216 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 1236 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 1255 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 1270 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 1289 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '8', 0,
  /* 1308 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '8', 0,
  /* 1326 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '8', 0,
  /* 1336 */ 'B', 'L', '8', 0,
  /* 1340 */ 'I', 'S', 'E', 'L', '8', 0,
  /* 1346 */ 'B', 'C', 'T', 'R', 'L', '8', 0,
  /* 1353 */ 'B', 'C', 'C', 'T', 'R', 'L', '8', 0,
  /* 1361 */ 'B', 'C', 'C', 'C', 'T', 'R', 'L', '8', 0,
  /* 1370 */ 'R', 'L', 'W', 'I', 'N', 'M', '8', 0,
  /* 1378 */ 'R', 'L', 'W', 'N', 'M', '8', 0,
  /* 1385 */ 'M', 'F', 'C', 'R', '8', 0,
  /* 1391 */ 'B', 'L', 'R', '8', 0,
  /* 1396 */ 'M', 'F', 'L', 'R', '8', 0,
  /* 1402 */ 'M', 'T', 'L', 'R', '8', 0,
  /* 1408 */ 'B', 'D', 'Z', 'L', 'R', '8', 0,
  /* 1415 */ 'B', 'D', 'N', 'Z', 'L', 'R', '8', 0,
  /* 1423 */ 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', '8', 0,
  /* 1435 */ 'N', 'O', 'R', '8', 0,
  /* 1440 */ 'X', 'O', 'R', '8', 0,
  /* 1445 */ 'T', 'A', 'I', 'L', 'B', 'C', 'T', 'R', '8', 0,
  /* 1455 */ 'B', 'C', 'C', 'T', 'R', '8', 0,
  /* 1462 */ 'B', 'C', 'C', 'C', 'T', 'R', '8', 0,
  /* 1470 */ 'M', 'F', 'C', 'T', 'R', '8', 0,
  /* 1477 */ 'M', 'T', 'C', 'T', 'R', '8', 0,
  /* 1484 */ 'A', 'D', 'D', 'I', 'S', '8', 0,
  /* 1491 */ 'L', 'I', 'S', '8', 0,
  /* 1496 */ 'X', 'O', 'R', 'I', 'S', '8', 0,
  /* 1503 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', '8', 0,
  /* 1519 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', '8', 0,
  /* 1535 */ 'L', 'H', 'A', 'U', '8', 0,
  /* 1541 */ 'S', 'T', 'B', 'U', '8', 0,
  /* 1547 */ 'S', 'T', 'H', 'U', '8', 0,
  /* 1553 */ 'S', 'T', 'W', 'U', '8', 0,
  /* 1559 */ 'L', 'B', 'Z', 'U', '8', 0,
  /* 1565 */ 'L', 'H', 'Z', 'U', '8', 0,
  /* 1571 */ 'L', 'W', 'Z', 'U', '8', 0,
  /* 1577 */ 'E', 'Q', 'V', '8', 0,
  /* 1582 */ 'S', 'L', 'W', '8', 0,
  /* 1587 */ 'S', 'R', 'W', '8', 0,
  /* 1592 */ 'S', 'T', 'W', '8', 0,
  /* 1597 */ 'C', 'N', 'T', 'L', 'Z', 'W', '8', 0,
  /* 1605 */ 'L', 'H', 'A', 'X', '8', 0,
  /* 1611 */ 'S', 'T', 'B', 'X', '8', 0,
  /* 1617 */ 'S', 'T', 'H', 'X', '8', 0,
  /* 1623 */ 'L', 'H', 'B', 'R', 'X', '8', 0,
  /* 1630 */ 'L', 'W', 'B', 'R', 'X', '8', 0,
  /* 1637 */ 'L', 'H', 'A', 'U', 'X', '8', 0,
  /* 1644 */ 'S', 'T', 'B', 'U', 'X', '8', 0,
  /* 1651 */ 'S', 'T', 'H', 'U', 'X', '8', 0,
  /* 1658 */ 'S', 'T', 'W', 'U', 'X', '8', 0,
  /* 1665 */ 'L', 'B', 'Z', 'U', 'X', '8', 0,
  /* 1672 */ 'L', 'H', 'Z', 'U', 'X', '8', 0,
  /* 1679 */ 'L', 'W', 'Z', 'U', 'X', '8', 0,
  /* 1686 */ 'S', 'T', 'W', 'X', '8', 0,
  /* 1692 */ 'L', 'B', 'Z', 'X', '8', 0,
  /* 1698 */ 'L', 'H', 'Z', 'X', '8', 0,
  /* 1704 */ 'L', 'W', 'Z', 'X', '8', 0,
  /* 1710 */ 'L', 'B', 'Z', '8', 0,
  /* 1715 */ 'B', 'D', 'Z', '8', 0,
  /* 1720 */ 'L', 'H', 'Z', '8', 0,
  /* 1725 */ 'B', 'D', 'N', 'Z', '8', 0,
  /* 1731 */ 'L', 'W', 'Z', '8', 0,
  /* 1736 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 'i', '8', 0,
  /* 1748 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 'i', '8', 0,
  /* 1760 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 'i', '8', 0,
  /* 1772 */ 'A', 'N', 'D', 'I', 'o', '8', 0,
  /* 1779 */ 'A', 'N', 'D', 'I', 'S', 'o', '8', 0,
  /* 1787 */ 'E', 'V', 'M', 'H', 'E', 'G', 'S', 'M', 'F', 'A', 'A', 0,
  /* 1799 */ 'E', 'V', 'M', 'H', 'O', 'G', 'S', 'M', 'F', 'A', 'A', 0,
  /* 1811 */ 'E', 'V', 'M', 'W', 'S', 'M', 'F', 'A', 'A', 0,
  /* 1821 */ 'E', 'V', 'M', 'W', 'S', 'S', 'F', 'A', 'A', 0,
  /* 1831 */ 'E', 'V', 'M', 'H', 'E', 'G', 'S', 'M', 'I', 'A', 'A', 0,
  /* 1843 */ 'E', 'V', 'M', 'H', 'O', 'G', 'S', 'M', 'I', 'A', 'A', 0,
  /* 1855 */ 'E', 'V', 'M', 'W', 'S', 'M', 'I', 'A', 'A', 0,
  /* 1865 */ 'E', 'V', 'M', 'H', 'E', 'G', 'U', 'M', 'I', 'A', 'A', 0,
  /* 1877 */ 'E', 'V', 'M', 'H', 'O', 'G', 'U', 'M', 'I', 'A', 'A', 0,
  /* 1889 */ 'E', 'V', 'M', 'W', 'U', 'M', 'I', 'A', 'A', 0,
  /* 1899 */ 'D', 'C', 'B', 'A', 0,
  /* 1904 */ 'T', 'A', 'I', 'L', 'B', 'A', 0,
  /* 1911 */ 'L', 'D', 't', 'o', 'c', 'B', 'A', 0,
  /* 1919 */ 'g', 'B', 'C', 'A', 0,
  /* 1924 */ 'B', 'C', 'C', 'A', 0,
  /* 1929 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'F', 'A', 0,
  /* 1939 */ 'E', 'V', 'M', 'W', 'H', 'S', 'M', 'F', 'A', 0,
  /* 1949 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'F', 'A', 0,
  /* 1959 */ 'E', 'V', 'M', 'W', 'S', 'M', 'F', 'A', 0,
  /* 1968 */ 'E', 'V', 'M', 'H', 'E', 'S', 'S', 'F', 'A', 0,
  /* 1978 */ 'E', 'V', 'M', 'W', 'H', 'S', 'S', 'F', 'A', 0,
  /* 1988 */ 'E', 'V', 'M', 'H', 'O', 'S', 'S', 'F', 'A', 0,
  /* 1998 */ 'E', 'V', 'M', 'W', 'S', 'S', 'F', 'A', 0,
  /* 2007 */ 'L', 'H', 'A', 0,
  /* 2011 */ 'A', 'D', 'D', 'I', 'S', 't', 'o', 'c', 'H', 'A', 0,
  /* 2022 */ 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'g', 'd', 'H', 'A', 0,
  /* 2035 */ 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'l', 'd', 'H', 'A', 0,
  /* 2048 */ 'A', 'D', 'D', 'I', 'S', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 2064 */ 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 2078 */ 'S', 'L', 'B', 'I', 'A', 0,
  /* 2084 */ 'T', 'L', 'B', 'I', 'A', 0,
  /* 2090 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'I', 'A', 0,
  /* 2100 */ 'E', 'V', 'M', 'W', 'H', 'S', 'M', 'I', 'A', 0,
  /* 2110 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'I', 'A', 0,
  /* 2120 */ 'E', 'V', 'M', 'W', 'S', 'M', 'I', 'A', 0,
  /* 2129 */ 'E', 'V', 'M', 'H', 'E', 'U', 'M', 'I', 'A', 0,
  /* 2139 */ 'E', 'V', 'M', 'W', 'H', 'U', 'M', 'I', 'A', 0,
  /* 2149 */ 'E', 'V', 'M', 'W', 'L', 'U', 'M', 'I', 'A', 0,
  /* 2159 */ 'E', 'V', 'M', 'H', 'O', 'U', 'M', 'I', 'A', 0,
  /* 2169 */ 'E', 'V', 'M', 'W', 'U', 'M', 'I', 'A', 0,
  /* 2178 */ 'B', 'L', 'A', 0,
  /* 2182 */ 'g', 'B', 'C', 'L', 'A', 0,
  /* 2188 */ 'B', 'C', 'C', 'L', 'A', 0,
  /* 2194 */ 'B', 'D', 'Z', 'L', 'A', 0,
  /* 2200 */ 'B', 'D', 'N', 'Z', 'L', 'A', 0,
  /* 2207 */ 'E', 'V', 'M', 'R', 'A', 0,
  /* 2213 */ 'L', 'W', 'A', 0,
  /* 2217 */ 'B', 'D', 'Z', 'A', 0,
  /* 2222 */ 'B', 'D', 'N', 'Z', 'A', 0,
  /* 2228 */ 'V', '_', 'S', 'E', 'T', '0', 'B', 0,
  /* 2236 */ 'V', 'S', 'R', 'A', 'B', 0,
  /* 2242 */ 'V', 'M', 'R', 'G', 'H', 'B', 0,
  /* 2249 */ 'V', 'M', 'R', 'G', 'L', 'B', 0,
  /* 2256 */ 'T', 'A', 'I', 'L', 'B', 0,
  /* 2262 */ 'V', 'R', 'L', 'B', 0,
  /* 2267 */ 'V', 'S', 'L', 'B', 0,
  /* 2272 */ 'C', 'M', 'P', 'B', 0,
  /* 2277 */ 'V', 'S', 'R', 'B', 0,
  /* 2282 */ 'V', 'M', 'U', 'L', 'E', 'S', 'B', 0,
  /* 2290 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 'B', 0,
  /* 2304 */ 'V', 'A', 'V', 'G', 'S', 'B', 0,
  /* 2311 */ 'V', 'U', 'P', 'K', 'H', 'S', 'B', 0,
  /* 2319 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'B', 0,
  /* 2328 */ 'V', 'U', 'P', 'K', 'L', 'S', 'B', 0,
  /* 2336 */ 'V', 'M', 'I', 'N', 'S', 'B', 0,
  /* 2343 */ 'V', 'M', 'U', 'L', 'O', 'S', 'B', 0,
  /* 2351 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'B', 0,
  /* 2360 */ 'E', 'V', 'E', 'X', 'T', 'S', 'B', 0,
  /* 2368 */ 'V', 'M', 'A', 'X', 'S', 'B', 0,
  /* 2375 */ 'M', 'F', 'T', 'B', 0,
  /* 2380 */ 'V', 'S', 'P', 'L', 'T', 'B', 0,
  /* 2387 */ 'V', 'P', 'O', 'P', 'C', 'N', 'T', 'B', 0,
  /* 2396 */ 'S', 'T', 'B', 0,
  /* 2400 */ 'R', 'e', 'a', 'd', 'T', 'B', 0,
  /* 2407 */ 'V', 'M', 'U', 'L', 'E', 'U', 'B', 0,
  /* 2415 */ 'V', 'A', 'V', 'G', 'U', 'B', 0,
  /* 2422 */ 'V', 'M', 'I', 'N', 'U', 'B', 0,
  /* 2429 */ 'V', 'M', 'U', 'L', 'O', 'U', 'B', 0,
  /* 2437 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'B', 0,
  /* 2446 */ 'F', 'S', 'U', 'B', 0,
  /* 2451 */ 'F', 'M', 'S', 'U', 'B', 0,
  /* 2457 */ 'F', 'N', 'M', 'S', 'U', 'B', 0,
  /* 2464 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'B', 0,
  /* 2473 */ 'V', 'M', 'A', 'X', 'U', 'B', 0,
  /* 2480 */ 'V', 'C', 'L', 'Z', 'B', 0,
  /* 2486 */ 'g', 'B', 'C', 0,
  /* 2490 */ 'B', 'C', 'C', 0,
  /* 2494 */ 'A', 'D', 'D', 'C', 0,
  /* 2499 */ 'X', 'X', 'L', 'A', 'N', 'D', 'C', 0,
  /* 2507 */ 'C', 'R', 'A', 'N', 'D', 'C', 0,
  /* 2514 */ 'E', 'V', 'A', 'N', 'D', 'C', 0,
  /* 2521 */ 'S', 'U', 'B', 'F', 'C', 0,
  /* 2527 */ 'S', 'U', 'B', 'I', 'C', 0,
  /* 2533 */ 'A', 'D', 'D', 'I', 'C', 0,
  /* 2539 */ 'R', 'L', 'D', 'I', 'C', 0,
  /* 2545 */ 'S', 'U', 'B', 'F', 'I', 'C', 0,
  /* 2552 */ 'X', 'S', 'R', 'D', 'P', 'I', 'C', 0,
  /* 2560 */ 'X', 'V', 'R', 'D', 'P', 'I', 'C', 0,
  /* 2568 */ 'X', 'V', 'R', 'S', 'P', 'I', 'C', 0,
  /* 2576 */ 'B', 'R', 'I', 'N', 'C', 0,
  /* 2582 */ 'T', 'L', 'B', 'S', 'Y', 'N', 'C', 0,
  /* 2590 */ 'I', 'S', 'Y', 'N', 'C', 0,
  /* 2596 */ 'M', 'S', 'Y', 'N', 'C', 0,
  /* 2602 */ 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', 0,
  /* 2611 */ 'F', 'R', 'A', 'M', 'E', '_', 'A', 'L', 'L', 'O', 'C', 0,
  /* 2623 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 2639 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 2652 */ 'C', 'R', 'O', 'R', 'C', 0,
  /* 2658 */ 'E', 'V', 'O', 'R', 'C', 0,
  /* 2664 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'R', 'R', 'C', 0,
  /* 2679 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'R', 'R', 'C', 0,
  /* 2691 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'R', 'C', 0,
  /* 2706 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'R', 'C', 0,
  /* 2718 */ 'S', 'C', 0,
  /* 2721 */ 'T', 'L', 'B', 'S', 'X', '2', 'D', 0,
  /* 2729 */ 'S', 'R', 'A', 'D', 0,
  /* 2734 */ 'F', 'A', 'D', 'D', 0,
  /* 2739 */ 'F', 'M', 'A', 'D', 'D', 0,
  /* 2745 */ 'F', 'N', 'M', 'A', 'D', 'D', 0,
  /* 2752 */ 'E', 'V', 'L', 'D', 'D', 0,
  /* 2758 */ 'E', 'V', 'S', 'T', 'D', 'D', 0,
  /* 2765 */ 'L', 'F', 'D', 0,
  /* 2769 */ 'S', 'T', 'F', 'D', 0,
  /* 2774 */ 'F', 'N', 'E', 'G', 'D', 0,
  /* 2780 */ 'M', 'U', 'L', 'H', 'D', 0,
  /* 2786 */ 'F', 'C', 'F', 'I', 'D', 0,
  /* 2792 */ 'R', 'F', 'I', 'D', 0,
  /* 2797 */ 'F', 'C', 'T', 'I', 'D', 0,
  /* 2803 */ 'T', 'L', 'B', 'L', 'D', 0,
  /* 2809 */ 'F', 'S', 'E', 'L', 'D', 0,
  /* 2815 */ 'M', 'U', 'L', 'L', 'D', 0,
  /* 2821 */ 'C', 'M', 'P', 'L', 'D', 0,
  /* 2827 */ 'S', 'L', 'D', 0,
  /* 2831 */ 'F', 'R', 'I', 'M', 'D', 0,
  /* 2837 */ 'X', 'X', 'L', 'A', 'N', 'D', 0,
  /* 2844 */ 'C', 'R', 'N', 'A', 'N', 'D', 0,
  /* 2851 */ 'E', 'V', 'N', 'A', 'N', 'D', 0,
  /* 2858 */ 'C', 'R', 'A', 'N', 'D', 0,
  /* 2864 */ 'E', 'V', 'A', 'N', 'D', 0,
  /* 2870 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 2883 */ 'F', 'C', 'P', 'S', 'G', 'N', 'D', 0,
  /* 2891 */ 'F', 'R', 'I', 'N', 'D', 0,
  /* 2897 */ 'F', 'R', 'I', 'P', 'D', 0,
  /* 2903 */ 'C', 'M', 'P', 'D', 0,
  /* 2908 */ 'L', 'O', 'A', 'D', '_', 'S', 'T', 'A', 'C', 'K', '_', 'G', 'U', 'A', 'R', 'D', 0,
  /* 2925 */ 'M', 'T', 'M', 'S', 'R', 'D', 0,
  /* 2932 */ 'F', 'A', 'B', 'S', 'D', 0,
  /* 2938 */ 'F', 'N', 'A', 'B', 'S', 'D', 0,
  /* 2945 */ 'V', 'P', 'O', 'P', 'C', 'N', 'T', 'D', 0,
  /* 2954 */ 'S', 'T', 'D', 0,
  /* 2958 */ 'F', 'C', 'M', 'P', 'U', 'D', 0,
  /* 2965 */ 'D', 'I', 'V', 'D', 0,
  /* 2970 */ 'F', 'R', 'I', 'Z', 'D', 0,
  /* 2976 */ 'V', 'C', 'L', 'Z', 'D', 0,
  /* 2982 */ 'C', 'N', 'T', 'L', 'Z', 'D', 0,
  /* 2989 */ 'R', 'E', 'G', '_', 'S', 'E', 'Q', 'U', 'E', 'N', 'C', 'E', 0,
  /* 3002 */ 'A', 'D', 'D', 'E', 0,
  /* 3007 */ 'S', 'L', 'B', 'M', 'F', 'E', 'E', 0,
  /* 3015 */ 'W', 'R', 'T', 'E', 'E', 0,
  /* 3021 */ 'S', 'U', 'B', 'F', 'E', 0,
  /* 3027 */ 'E', 'V', 'L', 'W', 'H', 'E', 0,
  /* 3034 */ 'E', 'V', 'S', 'T', 'W', 'H', 'E', 0,
  /* 3042 */ 'S', 'L', 'B', 'I', 'E', 0,
  /* 3048 */ 'T', 'L', 'B', 'I', 'E', 0,
  /* 3054 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 3061 */ 'A', 'D', 'D', 'M', 'E', 0,
  /* 3067 */ 'S', 'U', 'B', 'F', 'M', 'E', 0,
  /* 3074 */ 'T', 'L', 'B', 'R', 'E', 0,
  /* 3080 */ 'F', 'R', 'E', 0,
  /* 3084 */ 'S', 'L', 'B', 'M', 'T', 'E', 0,
  /* 3091 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 0,
  /* 3099 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 3109 */ 'M', 'F', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 3118 */ 'M', 'T', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 3127 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 3142 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 3156 */ 'S', 'P', 'I', 'L', 'L', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 3169 */ 'T', 'L', 'B', 'W', 'E', 0,
  /* 3175 */ 'E', 'V', 'S', 'T', 'W', 'W', 'E', 0,
  /* 3183 */ 'A', 'D', 'D', 'Z', 'E', 0,
  /* 3189 */ 'S', 'U', 'B', 'F', 'Z', 'E', 0,
  /* 3196 */ 'D', 'C', 'B', 'F', 0,
  /* 3201 */ 'S', 'U', 'B', 'F', 0,
  /* 3206 */ 'I', 'M', 'P', 'L', 'I', 'C', 'I', 'T', '_', 'D', 'E', 'F', 0,
  /* 3219 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'F', 0,
  /* 3228 */ 'E', 'V', 'M', 'W', 'H', 'S', 'M', 'F', 0,
  /* 3237 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'F', 0,
  /* 3246 */ 'E', 'V', 'M', 'W', 'S', 'M', 'F', 0,
  /* 3254 */ 'M', 'C', 'R', 'F', 0,
  /* 3259 */ 'M', 'F', 'O', 'C', 'R', 'F', 0,
  /* 3266 */ 'M', 'T', 'O', 'C', 'R', 'F', 0,
  /* 3273 */ 'M', 'T', 'C', 'R', 'F', 0,
  /* 3279 */ 'M', 'T', 'F', 'S', 'F', 0,
  /* 3285 */ 'E', 'V', 'M', 'H', 'E', 'S', 'S', 'F', 0,
  /* 3294 */ 'E', 'V', 'M', 'W', 'H', 'S', 'S', 'F', 0,
  /* 3303 */ 'E', 'V', 'M', 'H', 'O', 'S', 'S', 'F', 0,
  /* 3312 */ 'E', 'V', 'M', 'W', 'S', 'S', 'F', 0,
  /* 3320 */ 'E', 'V', 'N', 'E', 'G', 0,
  /* 3326 */ 'E', 'X', 'T', 'R', 'A', 'C', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 3341 */ 'I', 'N', 'S', 'E', 'R', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 3355 */ 'S', 'U', 'B', 'R', 'E', 'G', '_', 'T', 'O', '_', 'R', 'E', 'G', 0,
  /* 3369 */ 'V', '_', 'S', 'E', 'T', '0', 'H', 0,
  /* 3377 */ 'V', 'S', 'R', 'A', 'H', 0,
  /* 3383 */ 'E', 'V', 'L', 'D', 'H', 0,
  /* 3389 */ 'E', 'V', 'S', 'T', 'D', 'H', 0,
  /* 3396 */ 'V', 'M', 'R', 'G', 'H', 'H', 0,
  /* 3403 */ 'V', 'M', 'R', 'G', 'L', 'H', 0,
  /* 3410 */ 'V', 'R', 'L', 'H', 0,
  /* 3415 */ 'V', 'S', 'L', 'H', 0,
  /* 3420 */ 'V', 'S', 'R', 'H', 0,
  /* 3425 */ 'V', 'M', 'U', 'L', 'E', 'S', 'H', 0,
  /* 3433 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 'H', 0,
  /* 3447 */ 'V', 'A', 'V', 'G', 'S', 'H', 0,
  /* 3454 */ 'V', 'U', 'P', 'K', 'H', 'S', 'H', 0,
  /* 3462 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'H', 0,
  /* 3471 */ 'V', 'U', 'P', 'K', 'L', 'S', 'H', 0,
  /* 3479 */ 'V', 'M', 'I', 'N', 'S', 'H', 0,
  /* 3486 */ 'V', 'M', 'U', 'L', 'O', 'S', 'H', 0,
  /* 3494 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'H', 0,
  /* 3503 */ 'E', 'V', 'E', 'X', 'T', 'S', 'H', 0,
  /* 3511 */ 'V', 'M', 'A', 'X', 'S', 'H', 0,
  /* 3518 */ 'V', 'S', 'P', 'L', 'T', 'H', 0,
  /* 3525 */ 'V', 'P', 'O', 'P', 'C', 'N', 'T', 'H', 0,
  /* 3534 */ 'S', 'T', 'H', 0,
  /* 3538 */ 'V', 'M', 'U', 'L', 'E', 'U', 'H', 0,
  /* 3546 */ 'V', 'A', 'V', 'G', 'U', 'H', 0,
  /* 3553 */ 'V', 'M', 'I', 'N', 'U', 'H', 0,
  /* 3560 */ 'V', 'M', 'U', 'L', 'O', 'U', 'H', 0,
  /* 3568 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'H', 0,
  /* 3577 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'H', 0,
  /* 3586 */ 'V', 'M', 'A', 'X', 'U', 'H', 0,
  /* 3593 */ 'V', 'C', 'L', 'Z', 'H', 0,
  /* 3599 */ 'D', 'C', 'B', 'I', 0,
  /* 3604 */ 'I', 'C', 'B', 'I', 0,
  /* 3609 */ 'S', 'U', 'B', 'I', 0,
  /* 3614 */ 'D', 'C', 'C', 'C', 'I', 0,
  /* 3620 */ 'I', 'C', 'C', 'C', 'I', 0,
  /* 3626 */ 'R', 'F', 'C', 'I', 0,
  /* 3631 */ 'R', 'F', 'M', 'C', 'I', 0,
  /* 3637 */ 'S', 'R', 'A', 'D', 'I', 0,
  /* 3643 */ 'A', 'D', 'D', 'I', 0,
  /* 3648 */ 'R', 'F', 'D', 'I', 0,
  /* 3653 */ 'C', 'M', 'P', 'L', 'D', 'I', 0,
  /* 3660 */ 'C', 'L', 'R', 'L', 'S', 'L', 'D', 'I', 0,
  /* 3669 */ 'E', 'X', 'T', 'L', 'D', 'I', 0,
  /* 3676 */ 'X', 'X', 'P', 'E', 'R', 'M', 'D', 'I', 0,
  /* 3685 */ 'C', 'M', 'P', 'D', 'I', 0,
  /* 3691 */ 'C', 'L', 'R', 'R', 'D', 'I', 0,
  /* 3698 */ 'I', 'N', 'S', 'R', 'D', 'I', 0,
  /* 3705 */ 'R', 'O', 'T', 'R', 'D', 'I', 0,
  /* 3712 */ 'E', 'X', 'T', 'R', 'D', 'I', 0,
  /* 3719 */ 'T', 'D', 'I', 0,
  /* 3723 */ 'W', 'R', 'T', 'E', 'E', 'I', 0,
  /* 3730 */ 'R', 'F', 'I', 0,
  /* 3734 */ 'M', 'T', 'F', 'S', 'F', 'I', 0,
  /* 3741 */ 'E', 'V', 'S', 'P', 'L', 'A', 'T', 'F', 'I', 0,
  /* 3751 */ 'E', 'V', 'M', 'E', 'R', 'G', 'E', 'H', 'I', 0,
  /* 3761 */ 'E', 'V', 'M', 'E', 'R', 'G', 'E', 'L', 'O', 'H', 'I', 0,
  /* 3773 */ 'P', 'H', 'I', 0,
  /* 3777 */ 'T', 'L', 'B', 'L', 'I', 0,
  /* 3783 */ 'M', 'U', 'L', 'L', 'I', 0,
  /* 3789 */ 'R', 'L', 'D', 'I', 'M', 'I', 0,
  /* 3796 */ 'R', 'L', 'W', 'I', 'M', 'I', 0,
  /* 3803 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'I', 0,
  /* 3812 */ 'E', 'V', 'M', 'W', 'H', 'S', 'M', 'I', 0,
  /* 3821 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'I', 0,
  /* 3830 */ 'E', 'V', 'M', 'W', 'S', 'M', 'I', 0,
  /* 3838 */ 'E', 'V', 'M', 'H', 'E', 'U', 'M', 'I', 0,
  /* 3847 */ 'E', 'V', 'M', 'W', 'H', 'U', 'M', 'I', 0,
  /* 3856 */ 'E', 'V', 'M', 'W', 'L', 'U', 'M', 'I', 0,
  /* 3865 */ 'E', 'V', 'M', 'H', 'O', 'U', 'M', 'I', 0,
  /* 3874 */ 'E', 'V', 'M', 'W', 'U', 'M', 'I', 0,
  /* 3882 */ 'V', 'S', 'L', 'D', 'O', 'I', 0,
  /* 3889 */ 'X', 'S', 'R', 'D', 'P', 'I', 0,
  /* 3896 */ 'X', 'V', 'R', 'D', 'P', 'I', 0,
  /* 3903 */ 'X', 'V', 'R', 'S', 'P', 'I', 0,
  /* 3910 */ 'X', 'O', 'R', 'I', 0,
  /* 3915 */ 'E', 'V', 'S', 'P', 'L', 'A', 'T', 'I', 0,
  /* 3924 */ 'L', 'D', 't', 'o', 'c', 'J', 'T', 'I', 0,
  /* 3933 */ 'S', 'R', 'A', 'W', 'I', 0,
  /* 3939 */ 'X', 'X', 'S', 'L', 'D', 'W', 'I', 0,
  /* 3947 */ 'C', 'M', 'P', 'L', 'W', 'I', 0,
  /* 3954 */ 'E', 'V', 'R', 'L', 'W', 'I', 0,
  /* 3961 */ 'C', 'L', 'R', 'L', 'S', 'L', 'W', 'I', 0,
  /* 3970 */ 'I', 'N', 'S', 'L', 'W', 'I', 0,
  /* 3977 */ 'E', 'V', 'S', 'L', 'W', 'I', 0,
  /* 3984 */ 'E', 'X', 'T', 'L', 'W', 'I', 0,
  /* 3991 */ 'C', 'M', 'P', 'W', 'I', 0,
  /* 3997 */ 'C', 'L', 'R', 'R', 'W', 'I', 0,
  /* 4004 */ 'I', 'N', 'S', 'R', 'W', 'I', 0,
  /* 4011 */ 'R', 'O', 'T', 'R', 'W', 'I', 0,
  /* 4018 */ 'E', 'X', 'T', 'R', 'W', 'I', 0,
  /* 4025 */ 'L', 'S', 'W', 'I', 0,
  /* 4030 */ 'S', 'T', 'S', 'W', 'I', 0,
  /* 4036 */ 'T', 'W', 'I', 0,
  /* 4040 */ 'B', 'L', 0,
  /* 4043 */ 'g', 'B', 'C', 'L', 0,
  /* 4048 */ 'B', 'C', 'C', 'L', 0,
  /* 4053 */ 'R', 'L', 'D', 'C', 'L', 0,
  /* 4059 */ 'R', 'L', 'D', 'I', 'C', 'L', 0,
  /* 4066 */ 'G', 'C', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 4075 */ 'E', 'H', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 4084 */ 'T', 'L', 'B', 'I', 'E', 'L', 0,
  /* 4091 */ 'I', 'S', 'E', 'L', 0,
  /* 4096 */ 'V', 'S', 'E', 'L', 0,
  /* 4101 */ 'X', 'X', 'S', 'E', 'L', 0,
  /* 4107 */ 'D', 'S', 'S', 'A', 'L', 'L', 0,
  /* 4114 */ 'K', 'I', 'L', 'L', 0,
  /* 4119 */ 'B', 'L', 'R', 'L', 0,
  /* 4124 */ 'g', 'B', 'C', 'L', 'R', 'L', 0,
  /* 4131 */ 'B', 'C', 'C', 'L', 'R', 'L', 0,
  /* 4138 */ 'B', 'D', 'Z', 'L', 'R', 'L', 0,
  /* 4145 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 0,
  /* 4153 */ 'B', 'C', 'T', 'R', 'L', 0,
  /* 4159 */ 'g', 'B', 'C', 'C', 'T', 'R', 'L', 0,
  /* 4167 */ 'B', 'C', 'C', 'C', 'T', 'R', 'L', 0,
  /* 4175 */ 'L', 'V', 'S', 'L', 0,
  /* 4180 */ 'F', 'M', 'U', 'L', 0,
  /* 4185 */ 'L', 'V', 'X', 'L', 0,
  /* 4190 */ 'S', 'T', 'V', 'X', 'L', 0,
  /* 4196 */ 'D', 'C', 'B', 'Z', 'L', 0,
  /* 4202 */ 'B', 'D', 'Z', 'L', 0,
  /* 4207 */ 'B', 'D', 'N', 'Z', 'L', 0,
  /* 4213 */ 'L', 'D', 't', 'o', 'c', 'L', 0,
  /* 4220 */ 'A', 'D', 'D', 'I', 't', 'o', 'c', 'L', 0,
  /* 4229 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 0,
  /* 4240 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 0,
  /* 4251 */ 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', 0,
  /* 4263 */ 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', 0,
  /* 4275 */ 'V', 'M', 'S', 'U', 'M', 'M', 'B', 'M', 0,
  /* 4284 */ 'V', 'S', 'U', 'B', 'U', 'B', 'M', 0,
  /* 4292 */ 'V', 'A', 'D', 'D', 'U', 'B', 'M', 0,
  /* 4300 */ 'V', 'M', 'S', 'U', 'M', 'U', 'B', 'M', 0,
  /* 4309 */ 'V', 'M', 'S', 'U', 'M', 'S', 'H', 'M', 0,
  /* 4318 */ 'V', 'S', 'U', 'B', 'U', 'H', 'M', 0,
  /* 4326 */ 'V', 'M', 'L', 'A', 'D', 'D', 'U', 'H', 'M', 0,
  /* 4336 */ 'V', 'A', 'D', 'D', 'U', 'H', 'M', 0,
  /* 4344 */ 'V', 'M', 'S', 'U', 'M', 'U', 'H', 'M', 0,
  /* 4353 */ 'V', 'R', 'F', 'I', 'M', 0,
  /* 4359 */ 'X', 'S', 'R', 'D', 'P', 'I', 'M', 0,
  /* 4367 */ 'X', 'V', 'R', 'D', 'P', 'I', 'M', 0,
  /* 4375 */ 'X', 'V', 'R', 'S', 'P', 'I', 'M', 0,
  /* 4383 */ 'R', 'L', 'W', 'I', 'N', 'M', 0,
  /* 4390 */ 'R', 'L', 'W', 'N', 'M', 0,
  /* 4396 */ 'V', 'P', 'E', 'R', 'M', 0,
  /* 4402 */ 'I', 'N', 'L', 'I', 'N', 'E', 'A', 'S', 'M', 0,
  /* 4412 */ 'V', 'P', 'K', 'U', 'H', 'U', 'M', 0,
  /* 4420 */ 'V', 'P', 'K', 'U', 'W', 'U', 'M', 0,
  /* 4428 */ 'V', 'S', 'U', 'B', 'U', 'W', 'M', 0,
  /* 4436 */ 'V', 'A', 'D', 'D', 'U', 'W', 'M', 0,
  /* 4444 */ 'E', 'V', 'M', 'H', 'E', 'G', 'S', 'M', 'F', 'A', 'N', 0,
  /* 4456 */ 'E', 'V', 'M', 'H', 'O', 'G', 'S', 'M', 'F', 'A', 'N', 0,
  /* 4468 */ 'E', 'V', 'M', 'W', 'S', 'M', 'F', 'A', 'N', 0,
  /* 4478 */ 'E', 'V', 'M', 'W', 'S', 'S', 'F', 'A', 'N', 0,
  /* 4488 */ 'E', 'V', 'M', 'H', 'E', 'G', 'S', 'M', 'I', 'A', 'N', 0,
  /* 4500 */ 'E', 'V', 'M', 'H', 'O', 'G', 'S', 'M', 'I', 'A', 'N', 0,
  /* 4512 */ 'E', 'V', 'M', 'W', 'S', 'M', 'I', 'A', 'N', 0,
  /* 4522 */ 'E', 'V', 'M', 'H', 'E', 'G', 'U', 'M', 'I', 'A', 'N', 0,
  /* 4534 */ 'E', 'V', 'M', 'H', 'O', 'G', 'U', 'M', 'I', 'A', 'N', 0,
  /* 4546 */ 'E', 'V', 'M', 'W', 'U', 'M', 'I', 'A', 'N', 0,
  /* 4556 */ 'V', 'R', 'F', 'I', 'N', 0,
  /* 4562 */ 'M', 'F', 'S', 'R', 'I', 'N', 0,
  /* 4569 */ 'M', 'T', 'S', 'R', 'I', 'N', 0,
  /* 4576 */ 'C', 'F', 'I', '_', 'I', 'N', 'S', 'T', 'R', 'U', 'C', 'T', 'I', 'O', 'N', 0,
  /* 4592 */ 'A', 'T', 'T', 'N', 0,
  /* 4597 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 0,
  /* 4614 */ 'E', 'V', 'S', 'T', 'W', 'H', 'O', 0,
  /* 4622 */ 'E', 'n', 'f', 'o', 'r', 'c', 'e', 'I', 'E', 'I', 'O', 0,
  /* 4634 */ 'E', 'V', 'M', 'E', 'R', 'G', 'E', 'L', 'O', 0,
  /* 4644 */ 'E', 'V', 'M', 'E', 'R', 'G', 'E', 'H', 'I', 'L', 'O', 0,
  /* 4656 */ 'V', 'S', 'L', 'O', 0,
  /* 4661 */ 'V', 'S', 'R', 'O', 0,
  /* 4666 */ 'E', 'V', 'S', 'T', 'W', 'W', 'O', 0,
  /* 4674 */ 'S', 'T', 'A', 'C', 'K', 'M', 'A', 'P', 0,
  /* 4683 */ 'T', 'R', 'A', 'P', 0,
  /* 4688 */ 'X', 'S', 'N', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 4699 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 4710 */ 'X', 'S', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 4720 */ 'X', 'V', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 4730 */ 'X', 'S', 'N', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 4741 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 4752 */ 'X', 'S', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 4762 */ 'X', 'V', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 4772 */ 'X', 'S', 'S', 'U', 'B', 'D', 'P', 0,
  /* 4780 */ 'X', 'V', 'S', 'U', 'B', 'D', 'P', 0,
  /* 4788 */ 'X', 'S', 'A', 'D', 'D', 'D', 'P', 0,
  /* 4796 */ 'X', 'V', 'A', 'D', 'D', 'D', 'P', 0,
  /* 4804 */ 'X', 'S', 'C', 'V', 'S', 'X', 'D', 'D', 'P', 0,
  /* 4814 */ 'X', 'V', 'C', 'V', 'S', 'X', 'D', 'D', 'P', 0,
  /* 4824 */ 'X', 'S', 'C', 'V', 'U', 'X', 'D', 'D', 'P', 0,
  /* 4834 */ 'X', 'V', 'C', 'V', 'U', 'X', 'D', 'D', 'P', 0,
  /* 4844 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'D', 'P', 0,
  /* 4854 */ 'X', 'S', 'R', 'E', 'D', 'P', 0,
  /* 4861 */ 'X', 'V', 'R', 'E', 'D', 'P', 0,
  /* 4868 */ 'X', 'S', 'R', 'S', 'Q', 'R', 'T', 'E', 'D', 'P', 0,
  /* 4879 */ 'X', 'V', 'R', 'S', 'Q', 'R', 'T', 'E', 'D', 'P', 0,
  /* 4890 */ 'X', 'S', 'N', 'E', 'G', 'D', 'P', 0,
  /* 4898 */ 'X', 'V', 'N', 'E', 'G', 'D', 'P', 0,
  /* 4906 */ 'X', 'S', 'M', 'U', 'L', 'D', 'P', 0,
  /* 4914 */ 'X', 'V', 'M', 'U', 'L', 'D', 'P', 0,
  /* 4922 */ 'X', 'S', 'N', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 4933 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 4944 */ 'X', 'S', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 4954 */ 'X', 'V', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 4964 */ 'X', 'S', 'N', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 4975 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 4986 */ 'X', 'S', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 4996 */ 'X', 'V', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 5006 */ 'X', 'S', 'C', 'P', 'S', 'G', 'N', 'D', 'P', 0,
  /* 5016 */ 'X', 'V', 'C', 'P', 'S', 'G', 'N', 'D', 'P', 0,
  /* 5026 */ 'X', 'S', 'M', 'I', 'N', 'D', 'P', 0,
  /* 5034 */ 'X', 'V', 'M', 'I', 'N', 'D', 'P', 0,
  /* 5042 */ 'X', 'S', 'C', 'M', 'P', 'O', 'D', 'P', 0,
  /* 5051 */ 'X', 'S', 'C', 'V', 'S', 'P', 'D', 'P', 0,
  /* 5060 */ 'X', 'V', 'C', 'V', 'S', 'P', 'D', 'P', 0,
  /* 5069 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'D', 'P', 0,
  /* 5079 */ 'X', 'S', 'N', 'A', 'B', 'S', 'D', 'P', 0,
  /* 5088 */ 'X', 'V', 'N', 'A', 'B', 'S', 'D', 'P', 0,
  /* 5097 */ 'X', 'S', 'A', 'B', 'S', 'D', 'P', 0,
  /* 5105 */ 'X', 'V', 'A', 'B', 'S', 'D', 'P', 0,
  /* 5113 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'D', 'P', 0,
  /* 5123 */ 'X', 'S', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 5132 */ 'X', 'S', 'T', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 5142 */ 'X', 'V', 'T', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 5152 */ 'X', 'V', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 5161 */ 'X', 'S', 'C', 'M', 'P', 'U', 'D', 'P', 0,
  /* 5170 */ 'X', 'S', 'D', 'I', 'V', 'D', 'P', 0,
  /* 5178 */ 'X', 'S', 'T', 'D', 'I', 'V', 'D', 'P', 0,
  /* 5187 */ 'X', 'V', 'T', 'D', 'I', 'V', 'D', 'P', 0,
  /* 5196 */ 'X', 'V', 'D', 'I', 'V', 'D', 'P', 0,
  /* 5204 */ 'X', 'V', 'C', 'V', 'S', 'X', 'W', 'D', 'P', 0,
  /* 5214 */ 'X', 'V', 'C', 'V', 'U', 'X', 'W', 'D', 'P', 0,
  /* 5224 */ 'X', 'S', 'M', 'A', 'X', 'D', 'P', 0,
  /* 5232 */ 'X', 'V', 'M', 'A', 'X', 'D', 'P', 0,
  /* 5240 */ 'V', 'C', 'M', 'P', 'B', 'F', 'P', 0,
  /* 5248 */ 'V', 'N', 'M', 'S', 'U', 'B', 'F', 'P', 0,
  /* 5257 */ 'V', 'S', 'U', 'B', 'F', 'P', 0,
  /* 5264 */ 'V', 'M', 'A', 'D', 'D', 'F', 'P', 0,
  /* 5272 */ 'V', 'A', 'D', 'D', 'F', 'P', 0,
  /* 5279 */ 'V', 'L', 'O', 'G', 'E', 'F', 'P', 0,
  /* 5287 */ 'V', 'C', 'M', 'P', 'G', 'E', 'F', 'P', 0,
  /* 5296 */ 'V', 'R', 'E', 'F', 'P', 0,
  /* 5302 */ 'V', 'E', 'X', 'P', 'T', 'E', 'F', 'P', 0,
  /* 5311 */ 'V', 'R', 'S', 'Q', 'R', 'T', 'E', 'F', 'P', 0,
  /* 5321 */ 'V', 'M', 'I', 'N', 'F', 'P', 0,
  /* 5328 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'F', 'P', 0,
  /* 5337 */ 'V', 'C', 'M', 'P', 'G', 'T', 'F', 'P', 0,
  /* 5346 */ 'V', 'M', 'A', 'X', 'F', 'P', 0,
  /* 5353 */ 'V', 'R', 'F', 'I', 'P', 0,
  /* 5359 */ 'X', 'S', 'R', 'D', 'P', 'I', 'P', 0,
  /* 5367 */ 'X', 'V', 'R', 'D', 'P', 'I', 'P', 0,
  /* 5375 */ 'X', 'V', 'R', 'S', 'P', 'I', 'P', 0,
  /* 5383 */ 'B', 'L', 'A', '8', '_', 'N', 'O', 'P', 0,
  /* 5392 */ 'B', 'L', '8', '_', 'N', 'O', 'P', 0,
  /* 5400 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'A', 'S', 'P', 0,
  /* 5411 */ 'X', 'V', 'M', 'S', 'U', 'B', 'A', 'S', 'P', 0,
  /* 5421 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'A', 'S', 'P', 0,
  /* 5432 */ 'X', 'V', 'M', 'A', 'D', 'D', 'A', 'S', 'P', 0,
  /* 5442 */ 'X', 'V', 'S', 'U', 'B', 'S', 'P', 0,
  /* 5450 */ 'X', 'V', 'A', 'D', 'D', 'S', 'P', 0,
  /* 5458 */ 'X', 'V', 'C', 'V', 'S', 'X', 'D', 'S', 'P', 0,
  /* 5468 */ 'X', 'V', 'C', 'V', 'U', 'X', 'D', 'S', 'P', 0,
  /* 5478 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'S', 'P', 0,
  /* 5488 */ 'X', 'V', 'R', 'E', 'S', 'P', 0,
  /* 5495 */ 'X', 'V', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 'P', 0,
  /* 5506 */ 'X', 'V', 'N', 'E', 'G', 'S', 'P', 0,
  /* 5514 */ 'X', 'V', 'M', 'U', 'L', 'S', 'P', 0,
  /* 5522 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'M', 'S', 'P', 0,
  /* 5533 */ 'X', 'V', 'M', 'S', 'U', 'B', 'M', 'S', 'P', 0,
  /* 5543 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'M', 'S', 'P', 0,
  /* 5554 */ 'X', 'V', 'M', 'A', 'D', 'D', 'M', 'S', 'P', 0,
  /* 5564 */ 'X', 'V', 'C', 'P', 'S', 'G', 'N', 'S', 'P', 0,
  /* 5574 */ 'X', 'V', 'M', 'I', 'N', 'S', 'P', 0,
  /* 5582 */ 'X', 'S', 'C', 'V', 'D', 'P', 'S', 'P', 0,
  /* 5591 */ 'X', 'V', 'C', 'V', 'D', 'P', 'S', 'P', 0,
  /* 5600 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'S', 'P', 0,
  /* 5610 */ 'F', 'R', 'S', 'P', 0,
  /* 5615 */ 'X', 'V', 'N', 'A', 'B', 'S', 'S', 'P', 0,
  /* 5624 */ 'X', 'V', 'A', 'B', 'S', 'S', 'P', 0,
  /* 5632 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'P', 0,
  /* 5642 */ 'X', 'V', 'T', 'S', 'Q', 'R', 'T', 'S', 'P', 0,
  /* 5652 */ 'X', 'V', 'S', 'Q', 'R', 'T', 'S', 'P', 0,
  /* 5661 */ 'X', 'V', 'T', 'D', 'I', 'V', 'S', 'P', 0,
  /* 5670 */ 'X', 'V', 'D', 'I', 'V', 'S', 'P', 0,
  /* 5678 */ 'X', 'V', 'C', 'V', 'S', 'X', 'W', 'S', 'P', 0,
  /* 5688 */ 'X', 'V', 'C', 'V', 'U', 'X', 'W', 'S', 'P', 0,
  /* 5698 */ 'X', 'V', 'M', 'A', 'X', 'S', 'P', 0,
  /* 5706 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 0,
  /* 5721 */ 'E', 'V', 'C', 'M', 'P', 'E', 'Q', 0,
  /* 5729 */ 'M', 'B', 'A', 'R', 0,
  /* 5734 */ 'U', 'p', 'd', 'a', 't', 'e', 'G', 'B', 'R', 0,
  /* 5744 */ 'M', 'F', 'D', 'C', 'R', 0,
  /* 5750 */ 'R', 'L', 'D', 'C', 'R', 0,
  /* 5756 */ 'M', 'T', 'D', 'C', 'R', 0,
  /* 5762 */ 'M', 'F', 'C', 'R', 0,
  /* 5767 */ 'R', 'L', 'D', 'I', 'C', 'R', 0,
  /* 5774 */ 'M', 'F', 'V', 'S', 'C', 'R', 0,
  /* 5781 */ 'M', 'T', 'V', 'S', 'C', 'R', 0,
  /* 5788 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 0,
  /* 5799 */ 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 0,
  /* 5808 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 5823 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 5838 */ 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', 0,
  /* 5851 */ 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', 0,
  /* 5862 */ 'B', 'L', 'R', 0,
  /* 5866 */ 'g', 'B', 'C', 'L', 'R', 0,
  /* 5872 */ 'B', 'C', 'C', 'L', 'R', 0,
  /* 5878 */ 'M', 'F', 'L', 'R', 0,
  /* 5883 */ 'M', 'T', 'L', 'R', 0,
  /* 5888 */ 'B', 'D', 'Z', 'L', 'R', 0,
  /* 5894 */ 'B', 'D', 'N', 'Z', 'L', 'R', 0,
  /* 5901 */ 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', 0,
  /* 5912 */ 'M', 'o', 'v', 'e', 'G', 'O', 'T', 't', 'o', 'L', 'R', 0,
  /* 5924 */ 'F', 'M', 'R', 0,
  /* 5928 */ 'X', 'X', 'L', 'O', 'R', 0,
  /* 5934 */ 'X', 'X', 'L', 'N', 'O', 'R', 0,
  /* 5941 */ 'C', 'R', 'N', 'O', 'R', 0,
  /* 5947 */ 'E', 'V', 'N', 'O', 'R', 0,
  /* 5953 */ 'C', 'R', 'O', 'R', 0,
  /* 5958 */ 'E', 'V', 'O', 'R', 0,
  /* 5963 */ 'X', 'X', 'L', 'X', 'O', 'R', 0,
  /* 5970 */ 'C', 'R', 'X', 'O', 'R', 0,
  /* 5976 */ 'E', 'V', 'X', 'O', 'R', 0,
  /* 5982 */ 'M', 'F', 'S', 'P', 'R', 0,
  /* 5988 */ 'M', 'T', 'S', 'P', 'R', 0,
  /* 5994 */ 'M', 'F', 'S', 'R', 0,
  /* 5999 */ 'M', 'F', 'M', 'S', 'R', 0,
  /* 6005 */ 'M', 'T', 'M', 'S', 'R', 0,
  /* 6011 */ 'M', 'T', 'S', 'R', 0,
  /* 6016 */ 'L', 'V', 'S', 'R', 0,
  /* 6021 */ 'T', 'A', 'I', 'L', 'B', 'C', 'T', 'R', 0,
  /* 6030 */ 'g', 'B', 'C', 'C', 'T', 'R', 0,
  /* 6037 */ 'B', 'C', 'C', 'C', 'T', 'R', 0,
  /* 6044 */ 'M', 'F', 'C', 'T', 'R', 0,
  /* 6050 */ 'M', 'T', 'C', 'T', 'R', 0,
  /* 6056 */ 'E', 'V', 'A', 'B', 'S', 0,
  /* 6062 */ 'V', 'S', 'U', 'M', '4', 'S', 'B', 'S', 0,
  /* 6071 */ 'V', 'S', 'U', 'B', 'S', 'B', 'S', 0,
  /* 6079 */ 'V', 'A', 'D', 'D', 'S', 'B', 'S', 0,
  /* 6087 */ 'V', 'S', 'U', 'M', '4', 'U', 'B', 'S', 0,
  /* 6096 */ 'V', 'S', 'U', 'B', 'U', 'B', 'S', 0,
  /* 6104 */ 'V', 'A', 'D', 'D', 'U', 'B', 'S', 0,
  /* 6112 */ 'F', 'S', 'U', 'B', 'S', 0,
  /* 6118 */ 'F', 'M', 'S', 'U', 'B', 'S', 0,
  /* 6125 */ 'F', 'N', 'M', 'S', 'U', 'B', 'S', 0,
  /* 6133 */ 'F', 'A', 'D', 'D', 'S', 0,
  /* 6139 */ 'F', 'M', 'A', 'D', 'D', 'S', 0,
  /* 6146 */ 'F', 'N', 'M', 'A', 'D', 'D', 'S', 0,
  /* 6154 */ 'F', 'C', 'F', 'I', 'D', 'S', 0,
  /* 6161 */ 'X', 'S', 'C', 'V', 'D', 'P', 'S', 'X', 'D', 'S', 0,
  /* 6172 */ 'X', 'V', 'C', 'V', 'D', 'P', 'S', 'X', 'D', 'S', 0,
  /* 6183 */ 'X', 'V', 'C', 'V', 'S', 'P', 'S', 'X', 'D', 'S', 0,
  /* 6194 */ 'X', 'S', 'C', 'V', 'D', 'P', 'U', 'X', 'D', 'S', 0,
  /* 6205 */ 'X', 'V', 'C', 'V', 'D', 'P', 'U', 'X', 'D', 'S', 0,
  /* 6216 */ 'X', 'V', 'C', 'V', 'S', 'P', 'U', 'X', 'D', 'S', 0,
  /* 6227 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 0,
  /* 6240 */ 'F', 'R', 'E', 'S', 0,
  /* 6245 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 0,
  /* 6254 */ 'M', 'F', 'F', 'S', 0,
  /* 6259 */ 'L', 'F', 'S', 0,
  /* 6263 */ 'M', 'C', 'R', 'F', 'S', 0,
  /* 6269 */ 'S', 'T', 'F', 'S', 0,
  /* 6274 */ 'F', 'N', 'E', 'G', 'S', 0,
  /* 6280 */ 'V', 'S', 'U', 'M', '4', 'S', 'H', 'S', 0,
  /* 6289 */ 'V', 'S', 'U', 'B', 'S', 'H', 'S', 0,
  /* 6297 */ 'V', 'M', 'H', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 6307 */ 'V', 'M', 'H', 'R', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 6318 */ 'V', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 6326 */ 'V', 'M', 'S', 'U', 'M', 'S', 'H', 'S', 0,
  /* 6335 */ 'V', 'S', 'U', 'B', 'U', 'H', 'S', 0,
  /* 6343 */ 'V', 'A', 'D', 'D', 'U', 'H', 'S', 0,
  /* 6351 */ 'V', 'M', 'S', 'U', 'M', 'U', 'H', 'S', 0,
  /* 6360 */ 'S', 'U', 'B', 'I', 'S', 0,
  /* 6366 */ 'A', 'D', 'D', 'I', 'S', 0,
  /* 6372 */ 'L', 'I', 'S', 0,
  /* 6376 */ 'X', 'O', 'R', 'I', 'S', 0,
  /* 6382 */ 'E', 'V', 'S', 'R', 'W', 'I', 'S', 0,
  /* 6390 */ 'F', 'S', 'E', 'L', 'S', 0,
  /* 6396 */ 'A', 'D', 'D', '4', 'T', 'L', 'S', 0,
  /* 6404 */ 'A', 'D', 'D', '8', 'T', 'L', 'S', 0,
  /* 6412 */ 'B', 'L', '8', '_', 'T', 'L', 'S', 0,
  /* 6420 */ 'B', 'L', '_', 'T', 'L', 'S', 0,
  /* 6427 */ 'B', 'L', '8', '_', 'N', 'O', 'P', '_', 'T', 'L', 'S', 0,
  /* 6439 */ 'F', 'M', 'U', 'L', 'S', 0,
  /* 6445 */ 'F', 'R', 'I', 'M', 'S', 0,
  /* 6451 */ 'F', 'C', 'P', 'S', 'G', 'N', 'S', 0,
  /* 6459 */ 'F', 'R', 'I', 'N', 'S', 0,
  /* 6465 */ 'E', 'V', 'L', 'W', 'H', 'O', 'S', 0,
  /* 6473 */ 'F', 'R', 'I', 'P', 'S', 0,
  /* 6479 */ 'C', 'O', 'P', 'Y', '_', 'T', 'O', '_', 'R', 'E', 'G', 'C', 'L', 'A', 'S', 'S', 0,
  /* 6496 */ 'F', 'A', 'B', 'S', 'S', 0,
  /* 6502 */ 'F', 'N', 'A', 'B', 'S', 'S', 0,
  /* 6509 */ 'D', 'S', 'S', 0,
  /* 6513 */ 'V', 'P', 'K', 'S', 'H', 'S', 'S', 0,
  /* 6521 */ 'V', 'P', 'K', 'S', 'W', 'S', 'S', 0,
  /* 6529 */ 'E', 'V', 'C', 'M', 'P', 'G', 'T', 'S', 0,
  /* 6538 */ 'E', 'V', 'C', 'M', 'P', 'L', 'T', 'S', 0,
  /* 6547 */ 'F', 'S', 'Q', 'R', 'T', 'S', 0,
  /* 6554 */ 'F', 'C', 'F', 'I', 'D', 'U', 'S', 0,
  /* 6562 */ 'V', 'P', 'K', 'S', 'H', 'U', 'S', 0,
  /* 6570 */ 'V', 'P', 'K', 'U', 'H', 'U', 'S', 0,
  /* 6578 */ 'F', 'C', 'M', 'P', 'U', 'S', 0,
  /* 6585 */ 'V', 'P', 'K', 'S', 'W', 'U', 'S', 0,
  /* 6593 */ 'V', 'P', 'K', 'U', 'W', 'U', 'S', 0,
  /* 6601 */ 'F', 'D', 'I', 'V', 'S', 0,
  /* 6607 */ 'E', 'V', 'S', 'R', 'W', 'S', 0,
  /* 6614 */ 'V', 'S', 'U', 'M', '2', 'S', 'W', 'S', 0,
  /* 6623 */ 'V', 'S', 'U', 'B', 'S', 'W', 'S', 0,
  /* 6631 */ 'V', 'A', 'D', 'D', 'S', 'W', 'S', 0,
  /* 6639 */ 'V', 'S', 'U', 'M', 'S', 'W', 'S', 0,
  /* 6647 */ 'V', 'S', 'U', 'B', 'U', 'W', 'S', 0,
  /* 6655 */ 'V', 'A', 'D', 'D', 'U', 'W', 'S', 0,
  /* 6663 */ 'E', 'V', 'D', 'I', 'V', 'W', 'S', 0,
  /* 6671 */ 'X', 'S', 'C', 'V', 'D', 'P', 'S', 'X', 'W', 'S', 0,
  /* 6682 */ 'X', 'V', 'C', 'V', 'D', 'P', 'S', 'X', 'W', 'S', 0,
  /* 6693 */ 'X', 'V', 'C', 'V', 'S', 'P', 'S', 'X', 'W', 'S', 0,
  /* 6704 */ 'X', 'S', 'C', 'V', 'D', 'P', 'U', 'X', 'W', 'S', 0,
  /* 6715 */ 'X', 'V', 'C', 'V', 'D', 'P', 'U', 'X', 'W', 'S', 0,
  /* 6726 */ 'X', 'V', 'C', 'V', 'S', 'P', 'U', 'X', 'W', 'S', 0,
  /* 6737 */ 'V', 'C', 'T', 'S', 'X', 'S', 0,
  /* 6744 */ 'V', 'C', 'T', 'U', 'X', 'S', 0,
  /* 6751 */ 'F', 'R', 'I', 'Z', 'S', 0,
  /* 6757 */ 'E', 'V', 'L', 'H', 'H', 'E', 'S', 'P', 'L', 'A', 'T', 0,
  /* 6769 */ 'E', 'V', 'L', 'W', 'H', 'S', 'P', 'L', 'A', 'T', 0,
  /* 6780 */ 'E', 'V', 'L', 'H', 'H', 'O', 'S', 'S', 'P', 'L', 'A', 'T', 0,
  /* 6793 */ 'E', 'V', 'L', 'H', 'H', 'O', 'U', 'S', 'P', 'L', 'A', 'T', 0,
  /* 6806 */ 'E', 'V', 'L', 'W', 'W', 'S', 'P', 'L', 'A', 'T', 0,
  /* 6817 */ 'D', 'C', 'B', 'T', 0,
  /* 6822 */ 'I', 'C', 'B', 'T', 0,
  /* 6827 */ 'C', 'R', '6', 'S', 'E', 'T', 0,
  /* 6834 */ 'C', 'R', '6', 'U', 'N', 'S', 'E', 'T', 0,
  /* 6843 */ 'C', 'R', 'U', 'N', 'S', 'E', 'T', 0,
  /* 6851 */ 'C', 'R', 'S', 'E', 'T', 0,
  /* 6857 */ 'W', 'A', 'I', 'T', 0,
  /* 6862 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 6876 */ 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 6888 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', 0,
  /* 6903 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', 0,
  /* 6918 */ 'S', 'T', 'A', 'T', 'E', 'P', 'O', 'I', 'N', 'T', 0,
  /* 6929 */ 'P', 'A', 'T', 'C', 'H', 'P', 'O', 'I', 'N', 'T', 0,
  /* 6940 */ 'P', 'P', 'C', '3', '2', 'G', 'O', 'T', 0,
  /* 6949 */ 'P', 'P', 'C', '3', '2', 'P', 'I', 'C', 'G', 'O', 'T', 0,
  /* 6961 */ 'L', 'D', 't', 'o', 'c', 'C', 'P', 'T', 0,
  /* 6970 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 6985 */ 'F', 'S', 'Q', 'R', 'T', 0,
  /* 6991 */ 'D', 'C', 'B', 'S', 'T', 0,
  /* 6997 */ 'D', 'S', 'T', 0,
  /* 7001 */ 'D', 'C', 'B', 'T', 'S', 'T', 0,
  /* 7008 */ 'D', 'S', 'T', 'S', 'T', 0,
  /* 7014 */ 'D', 'S', 'T', 'T', 0,
  /* 7019 */ 'D', 'S', 'T', 'S', 'T', 'T', 0,
  /* 7026 */ 'L', 'H', 'A', 'U', 0,
  /* 7031 */ 'S', 'T', 'B', 'U', 0,
  /* 7036 */ 'L', 'F', 'D', 'U', 0,
  /* 7041 */ 'S', 'T', 'F', 'D', 'U', 0,
  /* 7047 */ 'M', 'U', 'L', 'H', 'D', 'U', 0,
  /* 7054 */ 'F', 'C', 'F', 'I', 'D', 'U', 0,
  /* 7061 */ 'L', 'D', 'U', 0,
  /* 7065 */ 'S', 'T', 'D', 'U', 0,
  /* 7070 */ 'D', 'I', 'V', 'D', 'U', 0,
  /* 7076 */ 'S', 'T', 'H', 'U', 0,
  /* 7081 */ 'E', 'V', 'S', 'R', 'W', 'I', 'U', 0,
  /* 7089 */ 'E', 'V', 'L', 'W', 'H', 'O', 'U', 0,
  /* 7097 */ 'L', 'F', 'S', 'U', 0,
  /* 7102 */ 'S', 'T', 'F', 'S', 'U', 0,
  /* 7108 */ 'E', 'V', 'C', 'M', 'P', 'G', 'T', 'U', 0,
  /* 7117 */ 'E', 'V', 'C', 'M', 'P', 'L', 'T', 'U', 0,
  /* 7126 */ 'M', 'U', 'L', 'H', 'W', 'U', 0,
  /* 7133 */ 'E', 'V', 'S', 'R', 'W', 'U', 0,
  /* 7140 */ 'S', 'T', 'W', 'U', 0,
  /* 7145 */ 'E', 'V', 'D', 'I', 'V', 'W', 'U', 0,
  /* 7153 */ 'L', 'B', 'Z', 'U', 0,
  /* 7158 */ 'L', 'H', 'Z', 'U', 0,
  /* 7163 */ 'L', 'W', 'Z', 'U', 0,
  /* 7168 */ 'F', 'D', 'I', 'V', 0,
  /* 7173 */ 'C', 'R', 'E', 'Q', 'V', 0,
  /* 7179 */ 'E', 'V', 'E', 'Q', 'V', 0,
  /* 7185 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'F', 'A', 'A', 'W', 0,
  /* 7197 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'F', 'A', 'A', 'W', 0,
  /* 7209 */ 'E', 'V', 'M', 'H', 'E', 'S', 'S', 'F', 'A', 'A', 'W', 0,
  /* 7221 */ 'E', 'V', 'M', 'H', 'O', 'S', 'S', 'F', 'A', 'A', 'W', 0,
  /* 7233 */ 'E', 'V', 'A', 'D', 'D', 'S', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7245 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7257 */ 'E', 'V', 'S', 'U', 'B', 'F', 'S', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7270 */ 'E', 'V', 'M', 'W', 'L', 'S', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7282 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7294 */ 'E', 'V', 'A', 'D', 'D', 'U', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7306 */ 'E', 'V', 'M', 'H', 'E', 'U', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7318 */ 'E', 'V', 'S', 'U', 'B', 'F', 'U', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7331 */ 'E', 'V', 'M', 'W', 'L', 'U', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7343 */ 'E', 'V', 'M', 'H', 'O', 'U', 'M', 'I', 'A', 'A', 'W', 0,
  /* 7355 */ 'E', 'V', 'A', 'D', 'D', 'S', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7367 */ 'E', 'V', 'M', 'H', 'E', 'S', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7379 */ 'E', 'V', 'S', 'U', 'B', 'F', 'S', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7392 */ 'E', 'V', 'M', 'W', 'L', 'S', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7404 */ 'E', 'V', 'M', 'H', 'O', 'S', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7416 */ 'E', 'V', 'A', 'D', 'D', 'U', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7428 */ 'E', 'V', 'M', 'H', 'E', 'U', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7440 */ 'E', 'V', 'S', 'U', 'B', 'F', 'U', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7453 */ 'E', 'V', 'M', 'W', 'L', 'U', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7465 */ 'E', 'V', 'M', 'H', 'O', 'U', 'S', 'I', 'A', 'A', 'W', 0,
  /* 7477 */ 'V', 'S', 'R', 'A', 'W', 0,
  /* 7483 */ 'E', 'V', 'A', 'D', 'D', 'W', 0,
  /* 7490 */ 'E', 'V', 'L', 'D', 'W', 0,
  /* 7496 */ 'E', 'V', 'R', 'N', 'D', 'W', 0,
  /* 7503 */ 'E', 'V', 'S', 'T', 'D', 'W', 0,
  /* 7510 */ 'E', 'V', 'S', 'U', 'B', 'F', 'W', 0,
  /* 7518 */ 'E', 'V', 'S', 'U', 'B', 'I', 'F', 'W', 0,
  /* 7527 */ 'V', 'M', 'R', 'G', 'H', 'W', 0,
  /* 7534 */ 'X', 'X', 'M', 'R', 'G', 'H', 'W', 0,
  /* 7542 */ 'M', 'U', 'L', 'H', 'W', 0,
  /* 7548 */ 'E', 'V', 'A', 'D', 'D', 'I', 'W', 0,
  /* 7556 */ 'F', 'C', 'T', 'I', 'W', 0,
  /* 7562 */ 'V', 'M', 'R', 'G', 'L', 'W', 0,
  /* 7569 */ 'X', 'X', 'M', 'R', 'G', 'L', 'W', 0,
  /* 7577 */ 'M', 'U', 'L', 'L', 'W', 0,
  /* 7583 */ 'C', 'M', 'P', 'L', 'W', 0,
  /* 7589 */ 'E', 'V', 'R', 'L', 'W', 0,
  /* 7595 */ 'E', 'V', 'S', 'L', 'W', 0,
  /* 7601 */ 'L', 'M', 'W', 0,
  /* 7605 */ 'S', 'T', 'M', 'W', 0,
  /* 7610 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'F', 'A', 'N', 'W', 0,
  /* 7622 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'F', 'A', 'N', 'W', 0,
  /* 7634 */ 'E', 'V', 'M', 'H', 'E', 'S', 'S', 'F', 'A', 'N', 'W', 0,
  /* 7646 */ 'E', 'V', 'M', 'H', 'O', 'S', 'S', 'F', 'A', 'N', 'W', 0,
  /* 7658 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'I', 'A', 'N', 'W', 0,
  /* 7670 */ 'E', 'V', 'M', 'W', 'L', 'S', 'M', 'I', 'A', 'N', 'W', 0,
  /* 7682 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'I', 'A', 'N', 'W', 0,
  /* 7694 */ 'E', 'V', 'M', 'H', 'E', 'U', 'M', 'I', 'A', 'N', 'W', 0,
  /* 7706 */ 'E', 'V', 'M', 'W', 'L', 'U', 'M', 'I', 'A', 'N', 'W', 0,
  /* 7718 */ 'E', 'V', 'M', 'H', 'O', 'U', 'M', 'I', 'A', 'N', 'W', 0,
  /* 7730 */ 'E', 'V', 'M', 'H', 'E', 'S', 'S', 'I', 'A', 'N', 'W', 0,
  /* 7742 */ 'E', 'V', 'M', 'W', 'L', 'S', 'S', 'I', 'A', 'N', 'W', 0,
  /* 7754 */ 'E', 'V', 'M', 'H', 'O', 'S', 'S', 'I', 'A', 'N', 'W', 0,
  /* 7766 */ 'E', 'V', 'M', 'H', 'E', 'U', 'S', 'I', 'A', 'N', 'W', 0,
  /* 7778 */ 'E', 'V', 'M', 'W', 'L', 'U', 'S', 'I', 'A', 'N', 'W', 0,
  /* 7790 */ 'E', 'V', 'M', 'H', 'O', 'U', 'S', 'I', 'A', 'N', 'W', 0,
  /* 7802 */ 'C', 'M', 'P', 'W', 0,
  /* 7807 */ 'V', 'S', 'R', 'W', 0,
  /* 7812 */ 'V', 'A', 'V', 'G', 'S', 'W', 0,
  /* 7819 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'W', 0,
  /* 7828 */ 'E', 'V', 'C', 'N', 'T', 'L', 'S', 'W', 0,
  /* 7837 */ 'V', 'M', 'I', 'N', 'S', 'W', 0,
  /* 7844 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'W', 0,
  /* 7853 */ 'E', 'X', 'T', 'S', 'W', 0,
  /* 7859 */ 'V', 'M', 'A', 'X', 'S', 'W', 0,
  /* 7866 */ 'V', 'S', 'P', 'L', 'T', 'W', 0,
  /* 7873 */ 'X', 'X', 'S', 'P', 'L', 'T', 'W', 0,
  /* 7881 */ 'V', 'P', 'O', 'P', 'C', 'N', 'T', 'W', 0,
  /* 7890 */ 'S', 'T', 'W', 0,
  /* 7894 */ 'V', 'S', 'U', 'B', 'C', 'U', 'W', 0,
  /* 7902 */ 'V', 'A', 'D', 'D', 'C', 'U', 'W', 0,
  /* 7910 */ 'V', 'A', 'V', 'G', 'U', 'W', 0,
  /* 7917 */ 'V', 'M', 'I', 'N', 'U', 'W', 0,
  /* 7924 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'W', 0,
  /* 7933 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'W', 0,
  /* 7942 */ 'V', 'M', 'A', 'X', 'U', 'W', 0,
  /* 7949 */ 'D', 'I', 'V', 'W', 0,
  /* 7954 */ 'V', 'C', 'L', 'Z', 'W', 0,
  /* 7960 */ 'E', 'V', 'C', 'N', 'T', 'L', 'Z', 'W', 0,
  /* 7969 */ 'L', 'X', 'V', 'D', '2', 'X', 0,
  /* 7976 */ 'S', 'T', 'X', 'V', 'D', '2', 'X', 0,
  /* 7984 */ 'L', 'X', 'V', 'W', '4', 'X', 0,
  /* 7991 */ 'S', 'T', 'X', 'V', 'W', '4', 'X', 0,
  /* 7999 */ 'L', 'H', 'A', 'X', 0,
  /* 8004 */ 'T', 'L', 'B', 'I', 'V', 'A', 'X', 0,
  /* 8012 */ 'L', 'F', 'I', 'W', 'A', 'X', 0,
  /* 8019 */ 'L', 'W', 'A', 'X', 0,
  /* 8024 */ 'L', 'V', 'E', 'B', 'X', 0,
  /* 8030 */ 'S', 'T', 'V', 'E', 'B', 'X', 0,
  /* 8037 */ 'S', 'T', 'B', 'X', 0,
  /* 8042 */ 'S', 'T', 'D', 'C', 'X', 0,
  /* 8048 */ 'S', 'T', 'W', 'C', 'X', 0,
  /* 8054 */ 'E', 'V', 'L', 'D', 'D', 'X', 0,
  /* 8061 */ 'E', 'V', 'S', 'T', 'D', 'D', 'X', 0,
  /* 8069 */ 'L', 'F', 'D', 'X', 0,
  /* 8074 */ 'S', 'T', 'F', 'D', 'X', 0,
  /* 8080 */ 'L', 'D', 'X', 0,
  /* 8084 */ 'L', 'X', 'S', 'D', 'X', 0,
  /* 8090 */ 'S', 'T', 'X', 'S', 'D', 'X', 0,
  /* 8097 */ 'S', 'T', 'D', 'X', 0,
  /* 8102 */ 'E', 'V', 'L', 'W', 'H', 'E', 'X', 0,
  /* 8110 */ 'E', 'V', 'S', 'T', 'W', 'H', 'E', 'X', 0,
  /* 8119 */ 'E', 'V', 'S', 'T', 'W', 'W', 'E', 'X', 0,
  /* 8128 */ 'E', 'V', 'L', 'D', 'H', 'X', 0,
  /* 8135 */ 'E', 'V', 'S', 'T', 'D', 'H', 'X', 0,
  /* 8143 */ 'L', 'V', 'E', 'H', 'X', 0,
  /* 8149 */ 'S', 'T', 'V', 'E', 'H', 'X', 0,
  /* 8156 */ 'S', 'T', 'H', 'X', 0,
  /* 8161 */ 'S', 'T', 'B', 'C', 'I', 'X', 0,
  /* 8168 */ 'L', 'D', 'C', 'I', 'X', 0,
  /* 8174 */ 'S', 'T', 'D', 'C', 'I', 'X', 0,
  /* 8181 */ 'S', 'T', 'H', 'C', 'I', 'X', 0,
  /* 8188 */ 'S', 'T', 'W', 'C', 'I', 'X', 0,
  /* 8195 */ 'L', 'B', 'Z', 'C', 'I', 'X', 0,
  /* 8202 */ 'L', 'H', 'Z', 'C', 'I', 'X', 0,
  /* 8209 */ 'L', 'W', 'Z', 'C', 'I', 'X', 0,
  /* 8216 */ 'E', 'V', 'S', 'T', 'W', 'H', 'O', 'X', 0,
  /* 8225 */ 'E', 'V', 'S', 'T', 'W', 'W', 'O', 'X', 0,
  /* 8234 */ 'V', 'U', 'P', 'K', 'H', 'P', 'X', 0,
  /* 8242 */ 'V', 'P', 'K', 'P', 'X', 0,
  /* 8248 */ 'V', 'U', 'P', 'K', 'L', 'P', 'X', 0,
  /* 8256 */ 'L', 'D', 'A', 'R', 'X', 0,
  /* 8262 */ 'L', 'W', 'A', 'R', 'X', 0,
  /* 8268 */ 'L', 'D', 'B', 'R', 'X', 0,
  /* 8274 */ 'S', 'T', 'D', 'B', 'R', 'X', 0,
  /* 8281 */ 'L', 'H', 'B', 'R', 'X', 0,
  /* 8287 */ 'S', 'T', 'H', 'B', 'R', 'X', 0,
  /* 8294 */ 'L', 'W', 'B', 'R', 'X', 0,
  /* 8300 */ 'S', 'T', 'W', 'B', 'R', 'X', 0,
  /* 8307 */ 'T', 'L', 'B', 'S', 'X', 0,
  /* 8313 */ 'L', 'X', 'V', 'D', 'S', 'X', 0,
  /* 8320 */ 'V', 'C', 'F', 'S', 'X', 0,
  /* 8326 */ 'L', 'F', 'S', 'X', 0,
  /* 8331 */ 'S', 'T', 'F', 'S', 'X', 0,
  /* 8337 */ 'E', 'V', 'L', 'W', 'H', 'O', 'S', 'X', 0,
  /* 8346 */ 'E', 'V', 'L', 'H', 'H', 'E', 'S', 'P', 'L', 'A', 'T', 'X', 0,
  /* 8359 */ 'E', 'V', 'L', 'W', 'H', 'S', 'P', 'L', 'A', 'T', 'X', 0,
  /* 8371 */ 'E', 'V', 'L', 'H', 'H', 'O', 'S', 'S', 'P', 'L', 'A', 'T', 'X', 0,
  /* 8385 */ 'E', 'V', 'L', 'H', 'H', 'O', 'U', 'S', 'P', 'L', 'A', 'T', 'X', 0,
  /* 8399 */ 'E', 'V', 'L', 'W', 'W', 'S', 'P', 'L', 'A', 'T', 'X', 0,
  /* 8411 */ 'L', 'H', 'A', 'U', 'X', 0,
  /* 8417 */ 'L', 'W', 'A', 'U', 'X', 0,
  /* 8423 */ 'S', 'T', 'B', 'U', 'X', 0,
  /* 8429 */ 'L', 'F', 'D', 'U', 'X', 0,
  /* 8435 */ 'S', 'T', 'F', 'D', 'U', 'X', 0,
  /* 8442 */ 'L', 'D', 'U', 'X', 0,
  /* 8447 */ 'S', 'T', 'D', 'U', 'X', 0,
  /* 8453 */ 'V', 'C', 'F', 'U', 'X', 0,
  /* 8459 */ 'S', 'T', 'H', 'U', 'X', 0,
  /* 8465 */ 'E', 'V', 'L', 'W', 'H', 'O', 'U', 'X', 0,
  /* 8474 */ 'L', 'F', 'S', 'U', 'X', 0,
  /* 8480 */ 'S', 'T', 'F', 'S', 'U', 'X', 0,
  /* 8487 */ 'S', 'T', 'W', 'U', 'X', 0,
  /* 8493 */ 'L', 'B', 'Z', 'U', 'X', 0,
  /* 8499 */ 'L', 'H', 'Z', 'U', 'X', 0,
  /* 8505 */ 'L', 'W', 'Z', 'U', 'X', 0,
  /* 8511 */ 'L', 'V', 'X', 0,
  /* 8515 */ 'S', 'T', 'V', 'X', 0,
  /* 8520 */ 'E', 'V', 'L', 'D', 'W', 'X', 0,
  /* 8527 */ 'E', 'V', 'S', 'T', 'D', 'W', 'X', 0,
  /* 8535 */ 'L', 'V', 'E', 'W', 'X', 0,
  /* 8541 */ 'S', 'T', 'V', 'E', 'W', 'X', 0,
  /* 8548 */ 'S', 'T', 'F', 'I', 'W', 'X', 0,
  /* 8555 */ 'S', 'T', 'W', 'X', 0,
  /* 8560 */ 'L', 'B', 'Z', 'X', 0,
  /* 8565 */ 'L', 'H', 'Z', 'X', 0,
  /* 8570 */ 'L', 'F', 'I', 'W', 'Z', 'X', 0,
  /* 8577 */ 'L', 'W', 'Z', 'X', 0,
  /* 8582 */ 'C', 'O', 'P', 'Y', 0,
  /* 8587 */ 'D', 'C', 'B', 'Z', 0,
  /* 8592 */ 'L', 'B', 'Z', 0,
  /* 8596 */ 'B', 'D', 'Z', 0,
  /* 8600 */ 'F', 'C', 'T', 'I', 'D', 'Z', 0,
  /* 8607 */ 'L', 'H', 'Z', 0,
  /* 8611 */ 'V', 'R', 'F', 'I', 'Z', 0,
  /* 8617 */ 'X', 'S', 'R', 'D', 'P', 'I', 'Z', 0,
  /* 8625 */ 'X', 'V', 'R', 'D', 'P', 'I', 'Z', 0,
  /* 8633 */ 'X', 'V', 'R', 'S', 'P', 'I', 'Z', 0,
  /* 8641 */ 'B', 'D', 'N', 'Z', 0,
  /* 8646 */ 'F', 'C', 'T', 'I', 'D', 'U', 'Z', 0,
  /* 8654 */ 'F', 'C', 'T', 'I', 'W', 'U', 'Z', 0,
  /* 8662 */ 'F', 'C', 'T', 'I', 'W', 'Z', 0,
  /* 8669 */ 'L', 'W', 'Z', 0,
  /* 8673 */ 'A', 'D', 'D', '8', 'T', 'L', 'S', '_', 0,
  /* 8682 */ 'B', 'L', '8', '_', 'T', 'L', 'S', '_', 0,
  /* 8691 */ 'M', 'T', 'F', 'S', 'F', 'b', 0,
  /* 8698 */ 'L', 'D', 't', 'o', 'c', 0,
  /* 8704 */ 'L', 'W', 'Z', 't', 'o', 'c', 0,
  /* 8711 */ 'B', 'C', 'T', 'R', 'L', '8', '_', 'L', 'D', 'i', 'n', 't', 'o', '_', 't', 'o', 'c', 0,
  /* 8729 */ 'X', 'X', 'L', 'O', 'R', 'f', 0,
  /* 8736 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 'i', 0,
  /* 8747 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 'i', 0,
  /* 8758 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 'i', 0,
  /* 8769 */ 'B', 'D', 'Z', 'L', 'A', 'm', 0,
  /* 8776 */ 'B', 'D', 'N', 'Z', 'L', 'A', 'm', 0,
  /* 8784 */ 'B', 'D', 'Z', 'A', 'm', 0,
  /* 8790 */ 'B', 'D', 'N', 'Z', 'A', 'm', 0,
  /* 8797 */ 'B', 'D', 'Z', 'L', 'R', 'L', 'm', 0,
  /* 8805 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 'm', 0,
  /* 8814 */ 'B', 'D', 'Z', 'L', 'm', 0,
  /* 8820 */ 'B', 'D', 'N', 'Z', 'L', 'm', 0,
  /* 8827 */ 'B', 'D', 'Z', 'L', 'R', 'm', 0,
  /* 8834 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'm', 0,
  /* 8842 */ 'B', 'D', 'Z', 'm', 0,
  /* 8847 */ 'B', 'D', 'N', 'Z', 'm', 0,
  /* 8853 */ 'B', 'C', 'C', 'T', 'R', 'L', '8', 'n', 0,
  /* 8862 */ 'B', 'C', 'C', 'T', 'R', '8', 'n', 0,
  /* 8870 */ 'B', 'C', 'n', 0,
  /* 8874 */ 'B', 'C', 'L', 'n', 0,
  /* 8879 */ 'B', 'C', 'L', 'R', 'L', 'n', 0,
  /* 8886 */ 'B', 'C', 'C', 'T', 'R', 'L', 'n', 0,
  /* 8894 */ 'B', 'C', 'L', 'R', 'n', 0,
  /* 8900 */ 'B', 'C', 'C', 'T', 'R', 'n', 0,
  /* 8907 */ 'E', 'X', 'T', 'S', 'W', '_', '3', '2', '_', '6', '4', 'o', 0,
  /* 8920 */ 'A', 'D', 'D', '4', 'o', 0,
  /* 8926 */ 'E', 'X', 'T', 'S', 'B', '8', 'o', 0,
  /* 8934 */ 'A', 'D', 'D', 'C', '8', 'o', 0,
  /* 8941 */ 'A', 'N', 'D', 'C', '8', 'o', 0,
  /* 8948 */ 'S', 'U', 'B', 'F', 'C', '8', 'o', 0,
  /* 8956 */ 'O', 'R', 'C', '8', 'o', 0,
  /* 8962 */ 'A', 'D', 'D', '8', 'o', 0,
  /* 8968 */ 'N', 'A', 'N', 'D', '8', 'o', 0,
  /* 8975 */ 'A', 'D', 'D', 'E', '8', 'o', 0,
  /* 8982 */ 'S', 'U', 'B', 'F', 'E', '8', 'o', 0,
  /* 8990 */ 'A', 'D', 'D', 'M', 'E', '8', 'o', 0,
  /* 8998 */ 'S', 'U', 'B', 'F', 'M', 'E', '8', 'o', 0,
  /* 9007 */ 'A', 'D', 'D', 'Z', 'E', '8', 'o', 0,
  /* 9015 */ 'S', 'U', 'B', 'F', 'Z', 'E', '8', 'o', 0,
  /* 9024 */ 'S', 'U', 'B', 'F', '8', 'o', 0,
  /* 9031 */ 'N', 'E', 'G', '8', 'o', 0,
  /* 9037 */ 'E', 'X', 'T', 'S', 'H', '8', 'o', 0,
  /* 9045 */ 'R', 'L', 'W', 'I', 'M', 'I', '8', 'o', 0,
  /* 9054 */ 'R', 'L', 'W', 'I', 'N', 'M', '8', 'o', 0,
  /* 9063 */ 'R', 'L', 'W', 'N', 'M', '8', 'o', 0,
  /* 9071 */ 'N', 'O', 'R', '8', 'o', 0,
  /* 9077 */ 'X', 'O', 'R', '8', 'o', 0,
  /* 9083 */ 'E', 'Q', 'V', '8', 'o', 0,
  /* 9089 */ 'S', 'L', 'W', '8', 'o', 0,
  /* 9095 */ 'S', 'R', 'W', '8', 'o', 0,
  /* 9101 */ 'C', 'N', 'T', 'L', 'Z', 'W', '8', 'o', 0,
  /* 9110 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'B', 'o', 0,
  /* 9120 */ 'E', 'X', 'T', 'S', 'B', 'o', 0,
  /* 9127 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'B', 'o', 0,
  /* 9137 */ 'F', 'S', 'U', 'B', 'o', 0,
  /* 9143 */ 'F', 'M', 'S', 'U', 'B', 'o', 0,
  /* 9150 */ 'F', 'N', 'M', 'S', 'U', 'B', 'o', 0,
  /* 9158 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'B', 'o', 0,
  /* 9168 */ 'A', 'D', 'D', 'C', 'o', 0,
  /* 9174 */ 'A', 'N', 'D', 'C', 'o', 0,
  /* 9180 */ 'S', 'U', 'B', 'F', 'C', 'o', 0,
  /* 9187 */ 'S', 'U', 'B', 'I', 'C', 'o', 0,
  /* 9194 */ 'A', 'D', 'D', 'I', 'C', 'o', 0,
  /* 9201 */ 'R', 'L', 'D', 'I', 'C', 'o', 0,
  /* 9208 */ 'O', 'R', 'C', 'o', 0,
  /* 9213 */ 'S', 'R', 'A', 'D', 'o', 0,
  /* 9219 */ 'F', 'A', 'D', 'D', 'o', 0,
  /* 9225 */ 'F', 'M', 'A', 'D', 'D', 'o', 0,
  /* 9232 */ 'F', 'N', 'M', 'A', 'D', 'D', 'o', 0,
  /* 9240 */ 'F', 'N', 'E', 'G', 'D', 'o', 0,
  /* 9247 */ 'M', 'U', 'L', 'H', 'D', 'o', 0,
  /* 9254 */ 'F', 'C', 'F', 'I', 'D', 'o', 0,
  /* 9261 */ 'F', 'C', 'T', 'I', 'D', 'o', 0,
  /* 9268 */ 'F', 'S', 'E', 'L', 'D', 'o', 0,
  /* 9275 */ 'M', 'U', 'L', 'L', 'D', 'o', 0,
  /* 9282 */ 'S', 'L', 'D', 'o', 0,
  /* 9287 */ 'F', 'R', 'I', 'M', 'D', 'o', 0,
  /* 9294 */ 'N', 'A', 'N', 'D', 'o', 0,
  /* 9300 */ 'F', 'C', 'P', 'S', 'G', 'N', 'D', 'o', 0,
  /* 9309 */ 'F', 'R', 'I', 'N', 'D', 'o', 0,
  /* 9316 */ 'F', 'R', 'I', 'P', 'D', 'o', 0,
  /* 9323 */ 'S', 'R', 'D', 'o', 0,
  /* 9328 */ 'F', 'A', 'B', 'S', 'D', 'o', 0,
  /* 9335 */ 'F', 'N', 'A', 'B', 'S', 'D', 'o', 0,
  /* 9343 */ 'D', 'I', 'V', 'D', 'o', 0,
  /* 9349 */ 'F', 'R', 'I', 'Z', 'D', 'o', 0,
  /* 9356 */ 'C', 'N', 'T', 'L', 'Z', 'D', 'o', 0,
  /* 9364 */ 'A', 'D', 'D', 'E', 'o', 0,
  /* 9370 */ 'S', 'U', 'B', 'F', 'E', 'o', 0,
  /* 9377 */ 'A', 'D', 'D', 'M', 'E', 'o', 0,
  /* 9384 */ 'S', 'U', 'B', 'F', 'M', 'E', 'o', 0,
  /* 9392 */ 'F', 'R', 'E', 'o', 0,
  /* 9397 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'o', 0,
  /* 9406 */ 'A', 'D', 'D', 'Z', 'E', 'o', 0,
  /* 9413 */ 'S', 'U', 'B', 'F', 'Z', 'E', 'o', 0,
  /* 9421 */ 'S', 'U', 'B', 'F', 'o', 0,
  /* 9427 */ 'M', 'T', 'F', 'S', 'F', 'o', 0,
  /* 9434 */ 'N', 'E', 'G', 'o', 0,
  /* 9439 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'H', 'o', 0,
  /* 9449 */ 'E', 'X', 'T', 'S', 'H', 'o', 0,
  /* 9456 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'H', 'o', 0,
  /* 9466 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'H', 'o', 0,
  /* 9476 */ 'S', 'R', 'A', 'D', 'I', 'o', 0,
  /* 9483 */ 'C', 'L', 'R', 'L', 'S', 'L', 'D', 'I', 'o', 0,
  /* 9493 */ 'E', 'X', 'T', 'L', 'D', 'I', 'o', 0,
  /* 9501 */ 'A', 'N', 'D', 'I', 'o', 0,
  /* 9507 */ 'C', 'L', 'R', 'R', 'D', 'I', 'o', 0,
  /* 9515 */ 'I', 'N', 'S', 'R', 'D', 'I', 'o', 0,
  /* 9523 */ 'R', 'O', 'T', 'R', 'D', 'I', 'o', 0,
  /* 9531 */ 'E', 'X', 'T', 'R', 'D', 'I', 'o', 0,
  /* 9539 */ 'M', 'T', 'F', 'S', 'F', 'I', 'o', 0,
  /* 9547 */ 'R', 'L', 'D', 'I', 'M', 'I', 'o', 0,
  /* 9555 */ 'R', 'L', 'W', 'I', 'M', 'I', 'o', 0,
  /* 9563 */ 'S', 'R', 'A', 'W', 'I', 'o', 0,
  /* 9570 */ 'C', 'L', 'R', 'L', 'S', 'L', 'W', 'I', 'o', 0,
  /* 9580 */ 'I', 'N', 'S', 'L', 'W', 'I', 'o', 0,
  /* 9588 */ 'E', 'X', 'T', 'L', 'W', 'I', 'o', 0,
  /* 9596 */ 'C', 'L', 'R', 'R', 'W', 'I', 'o', 0,
  /* 9604 */ 'I', 'N', 'S', 'R', 'W', 'I', 'o', 0,
  /* 9612 */ 'R', 'O', 'T', 'R', 'W', 'I', 'o', 0,
  /* 9620 */ 'E', 'X', 'T', 'R', 'W', 'I', 'o', 0,
  /* 9628 */ 'R', 'L', 'D', 'C', 'L', 'o', 0,
  /* 9635 */ 'R', 'L', 'D', 'I', 'C', 'L', 'o', 0,
  /* 9643 */ 'F', 'M', 'U', 'L', 'o', 0,
  /* 9649 */ 'R', 'L', 'W', 'I', 'N', 'M', 'o', 0,
  /* 9657 */ 'R', 'L', 'W', 'N', 'M', 'o', 0,
  /* 9664 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'D', 'P', 'o', 0,
  /* 9675 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'D', 'P', 'o', 0,
  /* 9686 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'D', 'P', 'o', 0,
  /* 9697 */ 'V', 'C', 'M', 'P', 'B', 'F', 'P', 'o', 0,
  /* 9706 */ 'V', 'C', 'M', 'P', 'G', 'E', 'F', 'P', 'o', 0,
  /* 9716 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'F', 'P', 'o', 0,
  /* 9726 */ 'V', 'C', 'M', 'P', 'G', 'T', 'F', 'P', 'o', 0,
  /* 9736 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'S', 'P', 'o', 0,
  /* 9747 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'S', 'P', 'o', 0,
  /* 9758 */ 'F', 'R', 'S', 'P', 'o', 0,
  /* 9764 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'P', 'o', 0,
  /* 9775 */ 'R', 'L', 'D', 'C', 'R', 'o', 0,
  /* 9782 */ 'R', 'L', 'D', 'I', 'C', 'R', 'o', 0,
  /* 9790 */ 'F', 'M', 'R', 'o', 0,
  /* 9795 */ 'N', 'O', 'R', 'o', 0,
  /* 9800 */ 'X', 'O', 'R', 'o', 0,
  /* 9805 */ 'F', 'S', 'U', 'B', 'S', 'o', 0,
  /* 9812 */ 'F', 'M', 'S', 'U', 'B', 'S', 'o', 0,
  /* 9820 */ 'F', 'N', 'M', 'S', 'U', 'B', 'S', 'o', 0,
  /* 9829 */ 'F', 'A', 'D', 'D', 'S', 'o', 0,
  /* 9836 */ 'F', 'M', 'A', 'D', 'D', 'S', 'o', 0,
  /* 9844 */ 'F', 'N', 'M', 'A', 'D', 'D', 'S', 'o', 0,
  /* 9853 */ 'F', 'C', 'F', 'I', 'D', 'S', 'o', 0,
  /* 9861 */ 'F', 'R', 'E', 'S', 'o', 0,
  /* 9867 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 'o', 0,
  /* 9877 */ 'M', 'F', 'F', 'S', 'o', 0,
  /* 9883 */ 'F', 'N', 'E', 'G', 'S', 'o', 0,
  /* 9890 */ 'A', 'N', 'D', 'I', 'S', 'o', 0,
  /* 9897 */ 'F', 'S', 'E', 'L', 'S', 'o', 0,
  /* 9904 */ 'F', 'M', 'U', 'L', 'S', 'o', 0,
  /* 9911 */ 'F', 'R', 'I', 'M', 'S', 'o', 0,
  /* 9918 */ 'F', 'C', 'P', 'S', 'G', 'N', 'S', 'o', 0,
  /* 9927 */ 'F', 'R', 'I', 'N', 'S', 'o', 0,
  /* 9934 */ 'F', 'R', 'I', 'P', 'S', 'o', 0,
  /* 9941 */ 'F', 'A', 'B', 'S', 'S', 'o', 0,
  /* 9948 */ 'F', 'N', 'A', 'B', 'S', 'S', 'o', 0,
  /* 9956 */ 'F', 'S', 'Q', 'R', 'T', 'S', 'o', 0,
  /* 9964 */ 'F', 'C', 'F', 'I', 'D', 'U', 'S', 'o', 0,
  /* 9973 */ 'F', 'D', 'I', 'V', 'S', 'o', 0,
  /* 9980 */ 'F', 'R', 'I', 'Z', 'S', 'o', 0,
  /* 9987 */ 'F', 'S', 'Q', 'R', 'T', 'o', 0,
  /* 9994 */ 'M', 'U', 'L', 'H', 'D', 'U', 'o', 0,
  /* 10002 */ 'F', 'C', 'F', 'I', 'D', 'U', 'o', 0,
  /* 10010 */ 'D', 'I', 'V', 'D', 'U', 'o', 0,
  /* 10017 */ 'M', 'U', 'L', 'H', 'W', 'U', 'o', 0,
  /* 10025 */ 'D', 'I', 'V', 'W', 'U', 'o', 0,
  /* 10032 */ 'F', 'D', 'I', 'V', 'o', 0,
  /* 10038 */ 'E', 'Q', 'V', 'o', 0,
  /* 10043 */ 'S', 'R', 'A', 'W', 'o', 0,
  /* 10049 */ 'M', 'U', 'L', 'H', 'W', 'o', 0,
  /* 10056 */ 'F', 'C', 'T', 'I', 'W', 'o', 0,
  /* 10063 */ 'M', 'U', 'L', 'L', 'W', 'o', 0,
  /* 10070 */ 'S', 'L', 'W', 'o', 0,
  /* 10075 */ 'S', 'R', 'W', 'o', 0,
  /* 10080 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'W', 'o', 0,
  /* 10090 */ 'E', 'X', 'T', 'S', 'W', 'o', 0,
  /* 10097 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'W', 'o', 0,
  /* 10107 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'W', 'o', 0,
  /* 10117 */ 'D', 'I', 'V', 'W', 'o', 0,
  /* 10123 */ 'C', 'N', 'T', 'L', 'Z', 'W', 'o', 0,
  /* 10131 */ 'F', 'C', 'T', 'I', 'D', 'Z', 'o', 0,
  /* 10139 */ 'F', 'C', 'T', 'I', 'D', 'U', 'Z', 'o', 0,
  /* 10148 */ 'F', 'C', 'T', 'I', 'W', 'U', 'Z', 'o', 0,
  /* 10157 */ 'F', 'C', 'T', 'I', 'W', 'Z', 'o', 0,
  /* 10165 */ 'B', 'D', 'Z', 'L', 'A', 'p', 0,
  /* 10172 */ 'B', 'D', 'N', 'Z', 'L', 'A', 'p', 0,
  /* 10180 */ 'B', 'D', 'Z', 'A', 'p', 0,
  /* 10186 */ 'B', 'D', 'N', 'Z', 'A', 'p', 0,
  /* 10193 */ 'B', 'D', 'Z', 'L', 'R', 'L', 'p', 0,
  /* 10201 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 'p', 0,
  /* 10210 */ 'B', 'D', 'Z', 'L', 'p', 0,
  /* 10216 */ 'B', 'D', 'N', 'Z', 'L', 'p', 0,
  /* 10223 */ 'B', 'D', 'Z', 'L', 'R', 'p', 0,
  /* 10230 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'p', 0,
  /* 10238 */ 'B', 'D', 'Z', 'p', 0,
  /* 10243 */ 'B', 'D', 'N', 'Z', 'p', 0,
  /* 10249 */ 'M', 'T', 'C', 'T', 'R', '8', 'l', 'o', 'o', 'p', 0,
  /* 10260 */ 'M', 'T', 'C', 'T', 'R', 'l', 'o', 'o', 'p', 0,
  /* 10270 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 0,
  /* 10284 */ 'B', 'C', 'L', 'a', 'l', 'w', 'a', 'y', 's', 0,
  /* 10294 */ 'M', 'F', 'V', 'R', 'S', 'A', 'V', 'E', 'v', 0,
  /* 10304 */ 'M', 'T', 'V', 'R', 'S', 'A', 'V', 'E', 'v', 0,
  /* 10314 */ 'L', 'A', 'x', 0,
  /* 10318 */ 'F', 'A', 'D', 'D', 'r', 't', 'z', 0,
};

extern const unsigned PPCInstrNameIndices[] = {
    3773U, 4402U, 4576U, 4075U, 4066U, 4114U, 3326U, 3341U, 
    3206U, 3355U, 6479U, 3099U, 2989U, 8582U, 3054U, 6970U, 
    2870U, 4674U, 6929U, 2908U, 6918U, 2611U, 686U, 6396U, 
    8920U, 1015U, 6404U, 8673U, 8962U, 2494U, 966U, 8934U, 
    9168U, 3002U, 1026U, 8975U, 9364U, 3643U, 1138U, 2533U, 
    985U, 9194U, 6366U, 1484U, 2064U, 55U, 2048U, 2022U, 
    2035U, 2011U, 4263U, 267U, 4229U, 227U, 5808U, 281U, 
    4240U, 240U, 5823U, 298U, 4220U, 3061U, 1039U, 8990U, 
    9377U, 3183U, 1054U, 9007U, 9406U, 4597U, 5706U, 2840U, 
    1021U, 8969U, 2502U, 972U, 8941U, 9174U, 9890U, 1779U, 
    9501U, 1772U, 6888U, 1503U, 6903U, 1519U, 9295U, 834U, 
    168U, 511U, 1270U, 757U, 91U, 434U, 1197U, 798U, 
    132U, 475U, 1236U, 777U, 111U, 454U, 1216U, 874U, 
    208U, 551U, 1308U, 737U, 71U, 414U, 1165U, 854U, 
    188U, 531U, 1289U, 818U, 152U, 495U, 1255U, 4592U, 
    2234U, 1901U, 2487U, 2490U, 1924U, 6037U, 1462U, 4167U, 
    1361U, 4048U, 2188U, 5872U, 4131U, 6031U, 1455U, 8862U, 
    4160U, 1353U, 8853U, 8886U, 8900U, 4044U, 5867U, 4125U, 
    8879U, 8894U, 10284U, 8874U, 6025U, 1449U, 4153U, 1346U, 
    8711U, 8870U, 8641U, 1725U, 2222U, 8790U, 10186U, 4207U, 
    2200U, 8776U, 10172U, 5894U, 1415U, 4145U, 8805U, 10201U, 
    8834U, 10230U, 8820U, 10216U, 8847U, 10243U, 8596U, 1715U, 
    2217U, 8784U, 10180U, 4202U, 2194U, 8769U, 10165U, 5888U, 
    1408U, 4138U, 8797U, 10193U, 8827U, 10223U, 8814U, 10210U, 
    8842U, 10238U, 4040U, 1336U, 5392U, 6427U, 6412U, 8682U, 
    2178U, 930U, 5383U, 5862U, 1391U, 4119U, 6420U, 2576U, 
    3660U, 9483U, 3961U, 9570U, 3691U, 9507U, 3997U, 9596U, 
    2272U, 942U, 2903U, 3685U, 2821U, 3653U, 7583U, 3947U, 
    7802U, 3991U, 2982U, 9356U, 7962U, 1597U, 9101U, 10123U, 
    6827U, 6834U, 2858U, 2507U, 7173U, 2844U, 5941U, 5953U, 
    2652U, 6851U, 6843U, 5970U, 1899U, 3196U, 3599U, 6991U, 
    6817U, 7001U, 8587U, 4196U, 3614U, 2965U, 7070U, 10010U, 
    9343U, 7949U, 7147U, 10025U, 10117U, 6509U, 4107U, 6997U, 
    570U, 7008U, 576U, 7019U, 591U, 7014U, 584U, 2602U, 
    1000U, 358U, 651U, 376U, 669U, 10270U, 7175U, 1577U, 
    9083U, 10038U, 6056U, 7548U, 7233U, 7355U, 7294U, 7416U, 
    7483U, 2864U, 2514U, 5721U, 6529U, 7108U, 6538U, 7117U, 
    7828U, 7960U, 6663U, 7145U, 7179U, 2360U, 3503U, 2752U, 
    8054U, 3383U, 8128U, 7490U, 8520U, 6757U, 8346U, 6780U, 
    8371U, 6793U, 8385U, 3027U, 8102U, 6465U, 8337U, 7089U, 
    8465U, 6769U, 8359U, 6806U, 8399U, 3751U, 4644U, 4634U, 
    3761U, 1787U, 4444U, 1831U, 4488U, 1865U, 4522U, 3219U, 
    1929U, 7185U, 7610U, 3803U, 2090U, 7245U, 7658U, 3285U, 
    1968U, 7209U, 7634U, 7367U, 7730U, 3838U, 2129U, 7306U, 
    7694U, 7428U, 7766U, 1799U, 4456U, 1843U, 4500U, 1877U, 
    4534U, 3237U, 1949U, 7197U, 7622U, 3821U, 2110U, 7282U, 
    7682U, 3303U, 1988U, 7221U, 7646U, 7404U, 7754U, 3865U, 
    2159U, 7343U, 7718U, 7465U, 7790U, 2207U, 3228U, 1939U, 
    3812U, 2100U, 3294U, 1978U, 3847U, 2139U, 7270U, 7670U, 
    7392U, 7742U, 3856U, 2149U, 7331U, 7706U, 7453U, 7778U, 
    3246U, 1959U, 1811U, 4468U, 3830U, 2120U, 1855U, 4512U, 
    3312U, 1998U, 1821U, 4478U, 3874U, 2169U, 1889U, 4546U, 
    2851U, 3320U, 5947U, 5958U, 2658U, 7589U, 3954U, 7496U, 
    7595U, 3977U, 3741U, 3915U, 6382U, 7081U, 6607U, 7133U, 
    2758U, 8061U, 3389U, 8135U, 7503U, 8527U, 3034U, 8110U, 
    4614U, 8216U, 3175U, 8119U, 4666U, 8225U, 7257U, 7379U, 
    7318U, 7440U, 7510U, 7518U, 5976U, 3669U, 9493U, 3984U, 
    9588U, 3712U, 9531U, 4018U, 9620U, 2362U, 948U, 600U, 
    8926U, 9120U, 3505U, 1126U, 613U, 9037U, 9449U, 7853U, 
    639U, 8907U, 10090U, 4622U, 2932U, 9328U, 6496U, 9941U, 
    2734U, 6133U, 9829U, 9219U, 10318U, 2786U, 6154U, 9853U, 
    7054U, 6554U, 9964U, 10002U, 9254U, 2958U, 6578U, 2883U, 
    9300U, 6451U, 9918U, 2797U, 8646U, 10139U, 8600U, 10131U, 
    9261U, 7556U, 8654U, 10148U, 8662U, 10157U, 10056U, 7168U, 
    6601U, 9973U, 10032U, 2739U, 6139U, 9836U, 9225U, 5924U, 
    9790U, 2451U, 6118U, 9812U, 9143U, 4180U, 6439U, 9904U, 
    9643U, 2938U, 9335U, 6502U, 9948U, 2774U, 9240U, 6274U, 
    9883U, 2745U, 6146U, 9844U, 9232U, 2457U, 6125U, 9820U, 
    9150U, 3080U, 6240U, 9861U, 9392U, 2831U, 9287U, 6445U, 
    9911U, 2891U, 9309U, 6459U, 9927U, 2897U, 9316U, 6473U, 
    9934U, 2970U, 9349U, 6751U, 9980U, 5610U, 9758U, 3091U, 
    6245U, 9867U, 9397U, 2809U, 9268U, 6390U, 9897U, 6985U, 
    6547U, 9956U, 9987U, 2446U, 6112U, 9805U, 9137U, 5851U, 
    330U, 5838U, 315U, 3604U, 6822U, 3620U, 3970U, 9580U, 
    3698U, 9515U, 4004U, 9604U, 4091U, 1340U, 2590U, 2179U, 
    10314U, 8592U, 1710U, 8195U, 7153U, 1559U, 8493U, 1665U, 
    8560U, 1692U, 2806U, 8256U, 8268U, 8168U, 7061U, 8442U, 
    8080U, 4251U, 253U, 8698U, 1911U, 6961U, 3924U, 4213U, 
    2765U, 7036U, 8429U, 8069U, 8012U, 8570U, 6259U, 7097U, 
    8474U, 8326U, 2007U, 925U, 7026U, 1535U, 8411U, 1637U, 
    7999U, 1605U, 8281U, 1623U, 8607U, 1720U, 8202U, 7158U, 
    1565U, 8499U, 1672U, 8565U, 1698U, 3780U, 1147U, 6372U, 
    1491U, 7601U, 4025U, 8024U, 8143U, 8535U, 4175U, 6016U, 
    8511U, 4185U, 2213U, 8262U, 8417U, 8019U, 350U, 343U, 
    8294U, 1630U, 8669U, 1731U, 8209U, 7163U, 1571U, 8505U, 
    1679U, 8577U, 1704U, 8704U, 8084U, 7969U, 8313U, 7984U, 
    5729U, 3254U, 6263U, 5762U, 1385U, 6044U, 1470U, 5744U, 
    6254U, 9877U, 5878U, 1396U, 5999U, 3259U, 1075U, 5982U, 
    5994U, 4562U, 2375U, 955U, 3109U, 10294U, 5774U, 2596U, 
    3273U, 1091U, 6050U, 1477U, 10249U, 10260U, 5756U, 0U, 
    48U, 3279U, 3734U, 9539U, 8691U, 9427U, 5883U, 1402U, 
    6005U, 2925U, 3266U, 1083U, 5988U, 6011U, 4569U, 3118U, 
    10304U, 5781U, 2780U, 7047U, 9994U, 9247U, 7542U, 7126U, 
    10017U, 10049U, 2815U, 9275U, 3783U, 1144U, 7577U, 10063U, 
    5912U, 5901U, 1423U, 2846U, 1020U, 8968U, 9294U, 3322U, 
    1121U, 9031U, 9434U, 5388U, 893U, 905U, 5937U, 1435U, 
    9071U, 9795U, 5931U, 1436U, 9072U, 2654U, 1010U, 8956U, 
    9208U, 3911U, 1160U, 6377U, 1497U, 9796U, 2946U, 7882U, 
    6940U, 6949U, 5788U, 6862U, 3127U, 3626U, 3648U, 3730U, 
    2792U, 3631U, 4053U, 9628U, 5750U, 9775U, 2539U, 4059U, 
    626U, 9635U, 5767U, 9782U, 9201U, 3789U, 9547U, 3796U, 
    1151U, 9045U, 9555U, 4383U, 1370U, 9054U, 9649U, 4390U, 
    1378U, 9063U, 9657U, 3705U, 9523U, 4011U, 9612U, 2400U, 
    2718U, 691U, 1098U, 714U, 1184U, 2664U, 2623U, 2691U, 
    704U, 1111U, 727U, 1326U, 2679U, 2639U, 2706U, 2078U, 
    3042U, 3007U, 3084U, 2827U, 3664U, 9487U, 9282U, 7597U, 
    1582U, 9089U, 3965U, 9574U, 10070U, 5799U, 6876U, 3156U, 
    2729U, 3637U, 9476U, 9213U, 7478U, 3933U, 9563U, 10043U, 
    2928U, 3700U, 9517U, 9323U, 7808U, 1587U, 9095U, 4006U, 
    9606U, 10075U, 2396U, 961U, 8161U, 7031U, 1541U, 8423U, 
    1644U, 8037U, 1611U, 2954U, 8274U, 8174U, 8042U, 7065U, 
    8447U, 8097U, 2769U, 7041U, 8435U, 8074U, 8548U, 6269U, 
    7102U, 8480U, 8331U, 3534U, 1133U, 8287U, 8181U, 7076U, 
    1547U, 8459U, 1651U, 8156U, 1617U, 7605U, 4030U, 8030U, 
    8149U, 8541U, 8515U, 4190U, 7890U, 1592U, 8300U, 8188U, 
    8048U, 7140U, 1553U, 8487U, 1658U, 8555U, 1686U, 8090U, 
    7976U, 7991U, 3201U, 1069U, 9024U, 2521U, 978U, 8948U, 
    9180U, 3021U, 1032U, 8982U, 9370U, 2545U, 992U, 3067U, 
    1046U, 8998U, 9384U, 3189U, 1061U, 9015U, 9413U, 9421U, 
    3609U, 2527U, 9187U, 6360U, 2585U, 2256U, 935U, 1904U, 
    917U, 6021U, 1445U, 8736U, 1736U, 8747U, 1748U, 8758U, 
    1760U, 2951U, 3719U, 2084U, 3048U, 4084U, 8004U, 2803U, 
    3777U, 3074U, 393U, 8307U, 407U, 2721U, 2582U, 3169U, 
    400U, 4683U, 7870U, 4036U, 3142U, 5734U, 7902U, 5272U, 
    6079U, 6318U, 6631U, 4292U, 6104U, 4336U, 6343U, 4436U, 
    6655U, 2865U, 2515U, 2304U, 3447U, 7812U, 2415U, 3546U, 
    7910U, 8320U, 32U, 8453U, 40U, 2480U, 2976U, 3593U, 
    7954U, 5240U, 9697U, 5328U, 9716U, 2437U, 9127U, 3568U, 
    9456U, 7924U, 10097U, 5287U, 9706U, 5337U, 9726U, 2351U, 
    9110U, 3494U, 9439U, 7844U, 10080U, 2464U, 9158U, 3577U, 
    9466U, 7933U, 10107U, 6737U, 14U, 6744U, 23U, 7180U, 
    5302U, 5279U, 5264U, 5346U, 2368U, 3511U, 7859U, 2473U, 
    3586U, 7942U, 6297U, 6307U, 5321U, 2336U, 3479U, 7837U, 
    2422U, 3553U, 7917U, 4326U, 2242U, 3396U, 7527U, 2249U, 
    3403U, 7562U, 4275U, 4309U, 6326U, 4300U, 4344U, 6351U, 
    2282U, 3425U, 2407U, 3538U, 2343U, 3486U, 2429U, 3560U, 
    2852U, 5248U, 5948U, 5959U, 2659U, 4396U, 8242U, 6513U, 
    6562U, 6521U, 6585U, 4412U, 6570U, 4420U, 6593U, 2387U, 
    2945U, 3525U, 7881U, 5296U, 4353U, 4556U, 5353U, 8611U, 
    2262U, 3410U, 7590U, 5311U, 4096U, 4176U, 2267U, 3882U, 
    3415U, 4656U, 7596U, 2380U, 3518U, 2319U, 3462U, 7819U, 
    7866U, 6017U, 2236U, 3377U, 7477U, 2277U, 3420U, 4661U, 
    7807U, 7894U, 5257U, 6071U, 6289U, 6623U, 4284U, 6096U, 
    4318U, 6335U, 4428U, 6647U, 6614U, 6062U, 6280U, 6087U, 
    6639U, 8234U, 2311U, 3454U, 8248U, 2328U, 3471U, 5977U, 
    7U, 2228U, 3369U, 6227U, 2290U, 3433U, 6857U, 3015U, 
    3723U, 5966U, 1440U, 9077U, 3910U, 1159U, 6376U, 1496U, 
    9800U, 5097U, 4788U, 5042U, 5161U, 5006U, 5582U, 6161U, 
    6671U, 6194U, 6704U, 5051U, 4804U, 4824U, 5170U, 4752U, 
    4986U, 5224U, 5026U, 4710U, 4944U, 4906U, 5079U, 4890U, 
    4730U, 4964U, 4688U, 4922U, 3889U, 2552U, 4359U, 5359U, 
    8617U, 4854U, 4868U, 5123U, 4772U, 5178U, 5132U, 5105U, 
    5624U, 4796U, 5450U, 5069U, 9675U, 5600U, 9747U, 4844U, 
    9664U, 5478U, 9736U, 5113U, 9686U, 5632U, 9764U, 5016U, 
    5564U, 5591U, 6172U, 6682U, 6205U, 6715U, 5060U, 6183U, 
    6693U, 6216U, 6726U, 4814U, 5458U, 5204U, 5678U, 4834U, 
    5468U, 5214U, 5688U, 5196U, 5670U, 4762U, 5432U, 4996U, 
    5554U, 5232U, 5698U, 5034U, 5574U, 4720U, 5411U, 4954U, 
    5533U, 4914U, 5514U, 5088U, 5615U, 4898U, 5506U, 4741U, 
    5421U, 4975U, 5543U, 4699U, 5400U, 4933U, 5522U, 3896U, 
    2560U, 4367U, 5367U, 8625U, 4861U, 5488U, 3903U, 2568U, 
    4375U, 5375U, 8633U, 4879U, 5495U, 5152U, 5652U, 4780U, 
    5442U, 5187U, 5661U, 5142U, 5642U, 2837U, 2499U, 5934U, 
    5928U, 8729U, 5963U, 7534U, 7569U, 3676U, 4101U, 3939U, 
    7873U, 2486U, 1919U, 6030U, 4159U, 4043U, 2182U, 5866U, 
    4124U, 
};

static inline void InitPPCMCInstrInfo(MCInstrInfo *II) {
  II->InitMCInstrInfo(PPCInsts, PPCInstrNameIndices, PPCInstrNameData, 1321);
}

} // End llvm namespace 
#endif // GET_INSTRINFO_MC_DESC


#ifdef GET_INSTRINFO_HEADER
#undef GET_INSTRINFO_HEADER
namespace llvm {
struct PPCGenInstrInfo : public TargetInstrInfo {
  explicit PPCGenInstrInfo(int SO = -1, int DO = -1);
  virtual ~PPCGenInstrInfo();
};
} // End llvm namespace 
#endif // GET_INSTRINFO_HEADER


#ifdef GET_INSTRINFO_CTOR_DTOR
#undef GET_INSTRINFO_CTOR_DTOR
namespace llvm {
extern const MCInstrDesc PPCInsts[];
extern const unsigned PPCInstrNameIndices[];
extern const char PPCInstrNameData[];
PPCGenInstrInfo::PPCGenInstrInfo(int SO, int DO)
  : TargetInstrInfo(SO, DO) {
  InitMCInstrInfo(PPCInsts, PPCInstrNameIndices, PPCInstrNameData, 1321);
}
PPCGenInstrInfo::~PPCGenInstrInfo() {}
} // End llvm namespace 
#endif // GET_INSTRINFO_CTOR_DTOR

#ifdef GET_INSTRINFO_OPERAND_ENUM
#undef GET_INSTRINFO_OPERAND_ENUM
namespace llvm {namespace PPC {
namespace OpName { 
enum {
OPERAND_LAST
};
} // End namespace OpName
} // End namespace PPC
} // End namespace llvm
#endif //GET_INSTRINFO_OPERAND_ENUM
#ifdef GET_INSTRINFO_NAMED_OPS
#undef GET_INSTRINFO_NAMED_OPS
namespace llvm {namespace PPC {
LLVM_READONLY
int16_t getNamedOperandIdx(uint16_t Opcode, uint16_t NamedIdx) {
  return -1;
}
} // End namespace PPC
} // End namespace llvm
#endif //GET_INSTRINFO_NAMED_OPS

#ifdef GET_INSTRINFO_OPERAND_TYPES_ENUM
#undef GET_INSTRINFO_OPERAND_TYPES_ENUM
namespace llvm {namespace PPC {
namespace OpTypes { 
enum OperandType {
  abscalltarget = 0,
  abscondbrtarget = 1,
  absdirectbrtarget = 2,
  calltarget = 3,
  condbrtarget = 4,
  crbitm = 5,
  directbrtarget = 6,
  dispRI = 7,
  dispRIX = 8,
  dispSPE2 = 9,
  dispSPE4 = 10,
  dispSPE8 = 11,
  f32imm = 12,
  f64imm = 13,
  i16imm = 14,
  i1imm = 15,
  i32imm = 16,
  i64imm = 17,
  i8imm = 18,
  imm32SExt16 = 19,
  imm64SExt16 = 20,
  imm64ZExt32 = 21,
  memr = 22,
  memri = 23,
  memrix = 24,
  memrr = 25,
  pred = 26,
  ptr_rc_idx = 27,
  ptr_rc_nor0 = 28,
  s16imm = 29,
  s16imm64 = 30,
  s17imm = 31,
  s17imm64 = 32,
  s5imm = 33,
  spe2dis = 34,
  spe4dis = 35,
  spe8dis = 36,
  tlscall = 37,
  tlscall32 = 38,
  tlsgd = 39,
  tlsgd32 = 40,
  tlsreg = 41,
  tlsreg32 = 42,
  tocentry = 43,
  tocentry32 = 44,
  u16imm = 45,
  u16imm64 = 46,
  u2imm = 47,
  u4imm = 48,
  u5imm = 49,
  u6imm = 50,
  OPERAND_TYPE_LIST_END
};
} // End namespace OpTypes
} // End namespace PPC
} // End namespace llvm
#endif // GET_INSTRINFO_OPERAND_TYPES_ENUM
#ifdef GET_INSTRMAP_INFO
#undef GET_INSTRMAP_INFO
namespace llvm {

namespace PPC {

enum IsVSXFMAAlt {
	IsVSXFMAAlt_1
};

enum RC {
	RC_0,
	RC_1
};

// getAltVSXFMAOpcode
int getAltVSXFMAOpcode(uint16_t Opcode) {
static const uint16_t getAltVSXFMAOpcodeTable[][2] = {
  { PPC::XSMADDADP, PPC::XSMADDMDP },
  { PPC::XSMSUBADP, PPC::XSMSUBMDP },
  { PPC::XSNMADDADP, PPC::XSNMADDMDP },
  { PPC::XSNMSUBADP, PPC::XSNMSUBMDP },
  { PPC::XVMADDADP, PPC::XVMADDMDP },
  { PPC::XVMADDASP, PPC::XVMADDMSP },
  { PPC::XVMSUBADP, PPC::XVMSUBMDP },
  { PPC::XVMSUBASP, PPC::XVMSUBMSP },
  { PPC::XVNMADDADP, PPC::XVNMADDMDP },
  { PPC::XVNMADDASP, PPC::XVNMADDMSP },
  { PPC::XVNMSUBADP, PPC::XVNMSUBMDP },
  { PPC::XVNMSUBASP, PPC::XVNMSUBMSP },
}; // End of getAltVSXFMAOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 12;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getAltVSXFMAOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getAltVSXFMAOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getAltVSXFMAOpcodeTable[mid][1];
}

// getNonRecordFormOpcode
int getNonRecordFormOpcode(uint16_t Opcode) {
static const uint16_t getNonRecordFormOpcodeTable[][2] = {
  { PPC::ADD4o, PPC::ADD4 },
  { PPC::ADD8o, PPC::ADD8 },
  { PPC::ADDC8o, PPC::ADDC8 },
  { PPC::ADDCo, PPC::ADDC },
  { PPC::ADDE8o, PPC::ADDE8 },
  { PPC::ADDEo, PPC::ADDE },
  { PPC::ADDICo, PPC::ADDIC },
  { PPC::ADDME8o, PPC::ADDME8 },
  { PPC::ADDMEo, PPC::ADDME },
  { PPC::ADDZE8o, PPC::ADDZE8 },
  { PPC::ADDZEo, PPC::ADDZE },
  { PPC::AND8o, PPC::AND8 },
  { PPC::ANDC8o, PPC::ANDC8 },
  { PPC::ANDCo, PPC::ANDC },
  { PPC::ANDo, PPC::AND },
  { PPC::CNTLZDo, PPC::CNTLZD },
  { PPC::CNTLZW8o, PPC::CNTLZW8 },
  { PPC::CNTLZWo, PPC::CNTLZW },
  { PPC::DIVDUo, PPC::DIVDU },
  { PPC::DIVDo, PPC::DIVD },
  { PPC::DIVWUo, PPC::DIVWU },
  { PPC::DIVWo, PPC::DIVW },
  { PPC::EQV8o, PPC::EQV8 },
  { PPC::EQVo, PPC::EQV },
  { PPC::EXTSB8o, PPC::EXTSB8 },
  { PPC::EXTSBo, PPC::EXTSB },
  { PPC::EXTSH8o, PPC::EXTSH8 },
  { PPC::EXTSHo, PPC::EXTSH },
  { PPC::EXTSW_32_64o, PPC::EXTSW_32_64 },
  { PPC::EXTSWo, PPC::EXTSW },
  { PPC::FABSDo, PPC::FABSD },
  { PPC::FABSSo, PPC::FABSS },
  { PPC::FADDSo, PPC::FADDS },
  { PPC::FADDo, PPC::FADD },
  { PPC::FCFIDSo, PPC::FCFIDS },
  { PPC::FCFIDUSo, PPC::FCFIDUS },
  { PPC::FCFIDUo, PPC::FCFIDU },
  { PPC::FCFIDo, PPC::FCFID },
  { PPC::FCPSGNDo, PPC::FCPSGND },
  { PPC::FCPSGNSo, PPC::FCPSGNS },
  { PPC::FCTIDUZo, PPC::FCTIDUZ },
  { PPC::FCTIDZo, PPC::FCTIDZ },
  { PPC::FCTIDo, PPC::FCTID },
  { PPC::FCTIWUZo, PPC::FCTIWUZ },
  { PPC::FCTIWZo, PPC::FCTIWZ },
  { PPC::FCTIWo, PPC::FCTIW },
  { PPC::FDIVSo, PPC::FDIVS },
  { PPC::FDIVo, PPC::FDIV },
  { PPC::FMADDSo, PPC::FMADDS },
  { PPC::FMADDo, PPC::FMADD },
  { PPC::FMRo, PPC::FMR },
  { PPC::FMSUBSo, PPC::FMSUBS },
  { PPC::FMSUBo, PPC::FMSUB },
  { PPC::FMULSo, PPC::FMULS },
  { PPC::FMULo, PPC::FMUL },
  { PPC::FNABSDo, PPC::FNABSD },
  { PPC::FNABSSo, PPC::FNABSS },
  { PPC::FNEGDo, PPC::FNEGD },
  { PPC::FNEGSo, PPC::FNEGS },
  { PPC::FNMADDSo, PPC::FNMADDS },
  { PPC::FNMADDo, PPC::FNMADD },
  { PPC::FNMSUBSo, PPC::FNMSUBS },
  { PPC::FNMSUBo, PPC::FNMSUB },
  { PPC::FRESo, PPC::FRES },
  { PPC::FREo, PPC::FRE },
  { PPC::FRIMDo, PPC::FRIMD },
  { PPC::FRIMSo, PPC::FRIMS },
  { PPC::FRINDo, PPC::FRIND },
  { PPC::FRINSo, PPC::FRINS },
  { PPC::FRIPDo, PPC::FRIPD },
  { PPC::FRIPSo, PPC::FRIPS },
  { PPC::FRIZDo, PPC::FRIZD },
  { PPC::FRIZSo, PPC::FRIZS },
  { PPC::FRSPo, PPC::FRSP },
  { PPC::FRSQRTESo, PPC::FRSQRTES },
  { PPC::FRSQRTEo, PPC::FRSQRTE },
  { PPC::FSELDo, PPC::FSELD },
  { PPC::FSELSo, PPC::FSELS },
  { PPC::FSQRTSo, PPC::FSQRTS },
  { PPC::FSQRTo, PPC::FSQRT },
  { PPC::FSUBSo, PPC::FSUBS },
  { PPC::FSUBo, PPC::FSUB },
  { PPC::MULHDUo, PPC::MULHDU },
  { PPC::MULHDo, PPC::MULHD },
  { PPC::MULHWUo, PPC::MULHWU },
  { PPC::MULHWo, PPC::MULHW },
  { PPC::MULLDo, PPC::MULLD },
  { PPC::MULLWo, PPC::MULLW },
  { PPC::NAND8o, PPC::NAND8 },
  { PPC::NANDo, PPC::NAND },
  { PPC::NEG8o, PPC::NEG8 },
  { PPC::NEGo, PPC::NEG },
  { PPC::NOR8o, PPC::NOR8 },
  { PPC::NORo, PPC::NOR },
  { PPC::OR8o, PPC::OR8 },
  { PPC::ORC8o, PPC::ORC8 },
  { PPC::ORCo, PPC::ORC },
  { PPC::ORo, PPC::OR },
  { PPC::RLDCLo, PPC::RLDCL },
  { PPC::RLDCRo, PPC::RLDCR },
  { PPC::RLDICLo, PPC::RLDICL },
  { PPC::RLDICRo, PPC::RLDICR },
  { PPC::RLDICo, PPC::RLDIC },
  { PPC::RLDIMIo, PPC::RLDIMI },
  { PPC::RLWIMI8o, PPC::RLWIMI8 },
  { PPC::RLWIMIo, PPC::RLWIMI },
  { PPC::RLWINM8o, PPC::RLWINM8 },
  { PPC::RLWINMo, PPC::RLWINM },
  { PPC::RLWNM8o, PPC::RLWNM8 },
  { PPC::RLWNMo, PPC::RLWNM },
  { PPC::SLDo, PPC::SLD },
  { PPC::SLW8o, PPC::SLW8 },
  { PPC::SLWo, PPC::SLW },
  { PPC::SRADIo, PPC::SRADI },
  { PPC::SRADo, PPC::SRAD },
  { PPC::SRAWIo, PPC::SRAWI },
  { PPC::SRAWo, PPC::SRAW },
  { PPC::SRDo, PPC::SRD },
  { PPC::SRW8o, PPC::SRW8 },
  { PPC::SRWo, PPC::SRW },
  { PPC::SUBF8o, PPC::SUBF8 },
  { PPC::SUBFC8o, PPC::SUBFC8 },
  { PPC::SUBFCo, PPC::SUBFC },
  { PPC::SUBFE8o, PPC::SUBFE8 },
  { PPC::SUBFEo, PPC::SUBFE },
  { PPC::SUBFME8o, PPC::SUBFME8 },
  { PPC::SUBFMEo, PPC::SUBFME },
  { PPC::SUBFZE8o, PPC::SUBFZE8 },
  { PPC::SUBFZEo, PPC::SUBFZE },
  { PPC::SUBFo, PPC::SUBF },
  { PPC::XOR8o, PPC::XOR8 },
  { PPC::XORo, PPC::XOR },
}; // End of getNonRecordFormOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 132;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getNonRecordFormOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getNonRecordFormOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getNonRecordFormOpcodeTable[mid][1];
}

// getRecordFormOpcode
int getRecordFormOpcode(uint16_t Opcode) {
static const uint16_t getRecordFormOpcodeTable[][2] = {
  { PPC::ADD4, PPC::ADD4o },
  { PPC::ADD8, PPC::ADD8o },
  { PPC::ADDC, PPC::ADDCo },
  { PPC::ADDC8, PPC::ADDC8o },
  { PPC::ADDE, PPC::ADDEo },
  { PPC::ADDE8, PPC::ADDE8o },
  { PPC::ADDIC, PPC::ADDICo },
  { PPC::ADDME, PPC::ADDMEo },
  { PPC::ADDME8, PPC::ADDME8o },
  { PPC::ADDZE, PPC::ADDZEo },
  { PPC::ADDZE8, PPC::ADDZE8o },
  { PPC::AND, PPC::ANDo },
  { PPC::AND8, PPC::AND8o },
  { PPC::ANDC, PPC::ANDCo },
  { PPC::ANDC8, PPC::ANDC8o },
  { PPC::CNTLZD, PPC::CNTLZDo },
  { PPC::CNTLZW, PPC::CNTLZWo },
  { PPC::CNTLZW8, PPC::CNTLZW8o },
  { PPC::DIVD, PPC::DIVDo },
  { PPC::DIVDU, PPC::DIVDUo },
  { PPC::DIVW, PPC::DIVWo },
  { PPC::DIVWU, PPC::DIVWUo },
  { PPC::EQV, PPC::EQVo },
  { PPC::EQV8, PPC::EQV8o },
  { PPC::EXTSB, PPC::EXTSBo },
  { PPC::EXTSB8, PPC::EXTSB8o },
  { PPC::EXTSH, PPC::EXTSHo },
  { PPC::EXTSH8, PPC::EXTSH8o },
  { PPC::EXTSW, PPC::EXTSWo },
  { PPC::EXTSW_32_64, PPC::EXTSW_32_64o },
  { PPC::FABSD, PPC::FABSDo },
  { PPC::FABSS, PPC::FABSSo },
  { PPC::FADD, PPC::FADDo },
  { PPC::FADDS, PPC::FADDSo },
  { PPC::FCFID, PPC::FCFIDo },
  { PPC::FCFIDS, PPC::FCFIDSo },
  { PPC::FCFIDU, PPC::FCFIDUo },
  { PPC::FCFIDUS, PPC::FCFIDUSo },
  { PPC::FCPSGND, PPC::FCPSGNDo },
  { PPC::FCPSGNS, PPC::FCPSGNSo },
  { PPC::FCTID, PPC::FCTIDo },
  { PPC::FCTIDUZ, PPC::FCTIDUZo },
  { PPC::FCTIDZ, PPC::FCTIDZo },
  { PPC::FCTIW, PPC::FCTIWo },
  { PPC::FCTIWUZ, PPC::FCTIWUZo },
  { PPC::FCTIWZ, PPC::FCTIWZo },
  { PPC::FDIV, PPC::FDIVo },
  { PPC::FDIVS, PPC::FDIVSo },
  { PPC::FMADD, PPC::FMADDo },
  { PPC::FMADDS, PPC::FMADDSo },
  { PPC::FMR, PPC::FMRo },
  { PPC::FMSUB, PPC::FMSUBo },
  { PPC::FMSUBS, PPC::FMSUBSo },
  { PPC::FMUL, PPC::FMULo },
  { PPC::FMULS, PPC::FMULSo },
  { PPC::FNABSD, PPC::FNABSDo },
  { PPC::FNABSS, PPC::FNABSSo },
  { PPC::FNEGD, PPC::FNEGDo },
  { PPC::FNEGS, PPC::FNEGSo },
  { PPC::FNMADD, PPC::FNMADDo },
  { PPC::FNMADDS, PPC::FNMADDSo },
  { PPC::FNMSUB, PPC::FNMSUBo },
  { PPC::FNMSUBS, PPC::FNMSUBSo },
  { PPC::FRE, PPC::FREo },
  { PPC::FRES, PPC::FRESo },
  { PPC::FRIMD, PPC::FRIMDo },
  { PPC::FRIMS, PPC::FRIMSo },
  { PPC::FRIND, PPC::FRINDo },
  { PPC::FRINS, PPC::FRINSo },
  { PPC::FRIPD, PPC::FRIPDo },
  { PPC::FRIPS, PPC::FRIPSo },
  { PPC::FRIZD, PPC::FRIZDo },
  { PPC::FRIZS, PPC::FRIZSo },
  { PPC::FRSP, PPC::FRSPo },
  { PPC::FRSQRTE, PPC::FRSQRTEo },
  { PPC::FRSQRTES, PPC::FRSQRTESo },
  { PPC::FSELD, PPC::FSELDo },
  { PPC::FSELS, PPC::FSELSo },
  { PPC::FSQRT, PPC::FSQRTo },
  { PPC::FSQRTS, PPC::FSQRTSo },
  { PPC::FSUB, PPC::FSUBo },
  { PPC::FSUBS, PPC::FSUBSo },
  { PPC::MULHD, PPC::MULHDo },
  { PPC::MULHDU, PPC::MULHDUo },
  { PPC::MULHW, PPC::MULHWo },
  { PPC::MULHWU, PPC::MULHWUo },
  { PPC::MULLD, PPC::MULLDo },
  { PPC::MULLW, PPC::MULLWo },
  { PPC::NAND, PPC::NANDo },
  { PPC::NAND8, PPC::NAND8o },
  { PPC::NEG, PPC::NEGo },
  { PPC::NEG8, PPC::NEG8o },
  { PPC::NOR, PPC::NORo },
  { PPC::NOR8, PPC::NOR8o },
  { PPC::OR, PPC::ORo },
  { PPC::OR8, PPC::OR8o },
  { PPC::ORC, PPC::ORCo },
  { PPC::ORC8, PPC::ORC8o },
  { PPC::RLDCL, PPC::RLDCLo },
  { PPC::RLDCR, PPC::RLDCRo },
  { PPC::RLDIC, PPC::RLDICo },
  { PPC::RLDICL, PPC::RLDICLo },
  { PPC::RLDICR, PPC::RLDICRo },
  { PPC::RLDIMI, PPC::RLDIMIo },
  { PPC::RLWIMI, PPC::RLWIMIo },
  { PPC::RLWIMI8, PPC::RLWIMI8o },
  { PPC::RLWINM, PPC::RLWINMo },
  { PPC::RLWINM8, PPC::RLWINM8o },
  { PPC::RLWNM, PPC::RLWNMo },
  { PPC::RLWNM8, PPC::RLWNM8o },
  { PPC::SLD, PPC::SLDo },
  { PPC::SLW, PPC::SLWo },
  { PPC::SLW8, PPC::SLW8o },
  { PPC::SRAD, PPC::SRADo },
  { PPC::SRADI, PPC::SRADIo },
  { PPC::SRAW, PPC::SRAWo },
  { PPC::SRAWI, PPC::SRAWIo },
  { PPC::SRD, PPC::SRDo },
  { PPC::SRW, PPC::SRWo },
  { PPC::SRW8, PPC::SRW8o },
  { PPC::SUBF, PPC::SUBFo },
  { PPC::SUBF8, PPC::SUBF8o },
  { PPC::SUBFC, PPC::SUBFCo },
  { PPC::SUBFC8, PPC::SUBFC8o },
  { PPC::SUBFE, PPC::SUBFEo },
  { PPC::SUBFE8, PPC::SUBFE8o },
  { PPC::SUBFME, PPC::SUBFMEo },
  { PPC::SUBFME8, PPC::SUBFME8o },
  { PPC::SUBFZE, PPC::SUBFZEo },
  { PPC::SUBFZE8, PPC::SUBFZE8o },
  { PPC::XOR, PPC::XORo },
  { PPC::XOR8, PPC::XOR8o },
}; // End of getRecordFormOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 132;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getRecordFormOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getRecordFormOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getRecordFormOpcodeTable[mid][1];
}

} // End PPC namespace
} // End llvm namespace
#endif // GET_INSTRMAP_INFO

